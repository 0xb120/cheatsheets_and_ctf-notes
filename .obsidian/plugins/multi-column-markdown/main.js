/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var state = require('@codemirror/state');
var view = require('@codemirror/view');
var language = require('@codemirror/language');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function getStyle(element, property) {
    var _a;
    const view = ((_a = element.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) || window;
    const style = view.getComputedStyle(element);
    return (style.getPropertyValue(property) || style[property]);
}

const PIXELS_PER_INCH = 96;
const MILLIMETRES_PER_INCH = 25.4;
const POINTS_PER_INCH = 72;
const PICAS_PER_INCH = 6;
function fontSize(element) {
    return element
        ? getStyle(element, 'fontSize') || fontSize(element.parentElement)
        : getStyle(window.document.documentElement, 'fontSize');
}
function parse(providedLength) {
    var _a;
    const length = providedLength || '0';
    const value = parseFloat(length);
    const match = length.match(/[\d-.]+(\w+)$/);
    const unit = (_a = match === null || match === void 0 ? void 0 : match[1]) !== null && _a !== void 0 ? _a : '';
    return [value, unit.toLowerCase()];
}
function pixels(length, element) {
    var _a, _b;
    const view = (_b = (_a = element === null || element === void 0 ? void 0 : element.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) !== null && _b !== void 0 ? _b : window;
    const root = view.document.documentElement || view.document.body;
    const [value, unit] = parse(length);
    switch (unit) {
        case 'rem':
            return value * pixels(fontSize(window.document.documentElement));
        case 'em':
            return value * pixels(fontSize(element), element === null || element === void 0 ? void 0 : element.parentElement);
        case 'in':
            return value * PIXELS_PER_INCH;
        case 'q':
            return (value * PIXELS_PER_INCH) / MILLIMETRES_PER_INCH / 4;
        case 'mm':
            return (value * PIXELS_PER_INCH) / MILLIMETRES_PER_INCH;
        case 'cm':
            return (value * PIXELS_PER_INCH * 10) / MILLIMETRES_PER_INCH;
        case 'pt':
            return (value * PIXELS_PER_INCH) / POINTS_PER_INCH;
        case 'pc':
            return (value * PIXELS_PER_INCH) / PICAS_PER_INCH;
        case 'vh':
            return (value * view.innerHeight || root.clientWidth) / 100;
        case 'vw':
            return (value * view.innerWidth || root.clientHeight) / 100;
        case 'vmin':
            return ((value *
                Math.min(view.innerWidth || root.clientWidth, view.innerHeight || root.clientHeight)) /
                100);
        case 'vmax':
            return ((value *
                Math.max(view.innerWidth || root.clientWidth, view.innerHeight || root.clientHeight)) /
                100);
        default:
            return value;
    }
}

/**
 * File: /src/utilities/interfaces.ts                                          *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2023 Cameron Robinson                                         *
 */
class HTMLSizing {
    get sizeValue() {
        return this._sizeValue;
    }
    set sizeValue(value) {
        this._sizeValue = value;
    }
    constructor(value, units) {
        this._sizeValue = 0;
        this.widthSet = false;
        this.sizeUnits = "px";
        this.sizeValue = value;
        this.sizeUnits = units;
    }
    setWidth(value) {
        this.widthSet = true;
        return new HTMLSizing(value, this.sizeUnits);
    }
    setUnits(units) {
        return new HTMLSizing(this.sizeValue, units);
    }
    toString() {
        return `${this.sizeValue}${this.sizeUnits}`;
    }
    convertToPX(parentElement) {
        if (this.sizeUnits === "px") {
            return this;
        }
        switch (this.sizeUnits) {
            case "cm":
            case "mm":
            case "in":
            case "pt":
            case "pc":
                let absUnitsResult = pixels(`${this.toString()}`);
                return new HTMLSizing(absUnitsResult, "px");
            case "vw":
            case "vh":
                return handleViewportSizing();
            case "em":
                return getFontSizeFromEl();
            case "ch":
                let ch = createEl("p", {
                    "attr": { "style": "width: 1ch;" }
                });
                return getSizeFromStyleWidth(ch);
            case "ex":
                let ex = createEl("p", {
                    "attr": { "style": "width: 1ex;" }
                });
                return getSizeFromStyleWidth(ex);
        }
        function getSizeFromStyleWidth(el) {
            const DEFAULT_SIZE = 16;
            if (parentElement === null ||
                parentElement === undefined) {
                return new HTMLSizing(this.sizeValue * DEFAULT_SIZE, "px");
            }
            parentElement.appendChild(el);
            let exToPxResult = this.sizeValue * el.clientWidth;
            if (el.clientWidth === 0) {
                exToPxResult = this.sizeValue * DEFAULT_SIZE;
            }
            parentElement.removeChild(el);
            return new HTMLSizing(exToPxResult, "px");
        }
        function getFontSizeFromEl() {
            const DEFAULT_SIZE = 16;
            let fontSize = DEFAULT_SIZE;
            let emToPxResult = fontSize * this.sizeValue;
            if (parentElement === null ||
                parentElement === undefined) {
                return new HTMLSizing(emToPxResult, "px");
            }
            let sizing = HTMLSizing.parseToSizing(parentElement.getCssPropertyValue("font-size"));
            if (sizing !== null) {
                fontSize = sizing.sizeValue;
                emToPxResult = fontSize * this.sizeValue;
            }
            return new HTMLSizing(emToPxResult, "px");
        }
        function handleViewportSizing() {
            let scale = this.sizeValue / 100;
            if (parentElement === null || parentElement === undefined) {
                console.warn("Found undefined root element. Using default client size. Result may not appear as intended.");
                let defaultSizing = scale * 1200;
                return new HTMLSizing(defaultSizing, "px");
            }
            let viewWidth = parentElement.clientWidth;
            let viewHeight = parentElement.clientHeight;
            switch (this.sizeUnits) {
                case "vw":
                    let wToPxResult = scale * viewWidth;
                    return new HTMLSizing(wToPxResult, "px");
                case "vh":
                case "%":
                    let hToPxResult = scale * viewHeight;
                    return new HTMLSizing(hToPxResult, "px");
            }
        }
    }
    static create() {
        return new HTMLSizing(0, "px");
    }
    static parseToSizing(sizingText) {
        if (sizingText === "") {
            return null;
        }
        let unitData = HTMLSizing.getLengthUnit(sizingText);
        if (unitData.isValid === true) {
            let units = unitData.unitStr;
            let sizeText = sizingText.replace(units, "").trim();
            let size = parseInt(sizeText);
            if (isNaN(size)) {
                return null;
            }
            return HTMLSizing.create().setWidth(size).setUnits(units);
        }
        return null;
    }
    static getLengthUnit(lengthStr) {
        let lastChar = lengthStr.slice(lengthStr.length - 1);
        let lastTwoChars = lengthStr.slice(lengthStr.length - 2);
        let unitStr = "";
        let isValid = false;
        if (lastChar === "%") {
            unitStr = lastChar;
            isValid = true;
        }
        else if (lastTwoChars === "cm" ||
            lastTwoChars === "mm" ||
            lastTwoChars === "in" ||
            lastTwoChars === "px" ||
            lastTwoChars === "pt" ||
            lastTwoChars === "pc" ||
            lastTwoChars === "em" ||
            lastTwoChars === "ex" ||
            lastTwoChars === "ch" ||
            lastTwoChars === "vw" ||
            lastTwoChars === "vh") {
            unitStr = lastTwoChars;
            isValid = true;
        }
        return { isValid: isValid, unitStr: unitStr };
    }
}
let mouseState = "up";
addEventListener("mousedown", () => {
    mouseState = "down";
});
addEventListener("mouseup", () => {
    mouseState = "up";
});
function defaultStartRegionData() {
    return {
        found: false,
        startPosition: -1,
        endPosition: -1,
        matchLength: 0,
        regionType: "CODEBLOCK"
    };
}

/*
 * Filename: multi-column-markdown/src/regionSettings.ts
 * Created Date: Tuesday, February 1st 2022, 12:23:53 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
var BorderOption;
(function (BorderOption) {
    BorderOption[BorderOption["enabled"] = 0] = "enabled";
    BorderOption[BorderOption["on"] = 1] = "on";
    BorderOption[BorderOption["true"] = 2] = "true";
    BorderOption[BorderOption["disabled"] = 3] = "disabled";
    BorderOption[BorderOption["off"] = 4] = "off";
    BorderOption[BorderOption["false"] = 5] = "false";
})(BorderOption || (BorderOption = {}));
var ShadowOption;
(function (ShadowOption) {
    ShadowOption[ShadowOption["enabled"] = 0] = "enabled";
    ShadowOption[ShadowOption["on"] = 1] = "on";
    ShadowOption[ShadowOption["true"] = 2] = "true";
    ShadowOption[ShadowOption["disabled"] = 3] = "disabled";
    ShadowOption[ShadowOption["off"] = 4] = "off";
    ShadowOption[ShadowOption["false"] = 5] = "false";
})(ShadowOption || (ShadowOption = {}));
const ALL_LAYOUTS = [
    "standard",
    "left",
    "first",
    "center",
    "middle",
    "second",
    "right",
    "third",
    "last"
];
function isColumnLayout(value) {
    return ALL_LAYOUTS.includes(value.toLowerCase());
}
function validateColumnLayout(value) {
    return value.toLowerCase();
}
var ContentOverflowType;
(function (ContentOverflowType) {
    ContentOverflowType[ContentOverflowType["scroll"] = 0] = "scroll";
    ContentOverflowType[ContentOverflowType["hidden"] = 1] = "hidden";
})(ContentOverflowType || (ContentOverflowType = {}));
var AlignmentType;
(function (AlignmentType) {
    AlignmentType[AlignmentType["left"] = 0] = "left";
    AlignmentType[AlignmentType["center"] = 1] = "center";
    AlignmentType[AlignmentType["right"] = 2] = "right";
})(AlignmentType || (AlignmentType = {}));
function getDefaultMultiColumnSettings() {
    return {
        columnID: "",
        numberOfColumns: 2,
        drawBorder: [true],
        drawShadow: true,
        autoLayout: false,
        columnSize: "standard",
        columnPosition: "standard",
        columnSpacing: [""],
        contentOverflow: [ContentOverflowType.scroll],
        alignment: [AlignmentType.left],
        columnHeight: null,
        fullDocReflow: false
    };
}
function shouldDrawColumnBorder(index, settings) {
    if (settings.drawBorder.length === 0) {
        return true;
    }
    return getIndexedClampedArrayValue(index, settings.drawBorder);
}
function columnOverflowState(index, settings) {
    if (settings.contentOverflow.length === 0) {
        return ContentOverflowType.scroll;
    }
    return getIndexedClampedArrayValue(index, settings.contentOverflow);
}
function columnAlignmentState(index, settings) {
    if (settings.alignment.length === 0) {
        return AlignmentType.left;
    }
    return getIndexedClampedArrayValue(index, settings.alignment);
}
function columnSpacingState(index, settings) {
    if (settings.columnSpacing.length === 0) {
        return "";
    }
    return `margin-inline: ${getIndexedClampedArrayValue(index, settings.columnSpacing)};`;
}
function getIndexedClampedArrayValue(index, arr) {
    if (arr.length === 0) {
        throw ("Error getting value from empty array.");
    }
    if (index < 0) {
        return arr[0];
    }
    if (index < arr.length) {
        return arr[index];
    }
    return arr.last();
}

/**
 * File: /src/utilities/settingsParser.ts
 * Created Date: Friday, June 3rd 2022, 8:16 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
/**
 * Here we define all of the valid settings strings that the user can enter for each setting type.
 * The strings are then mapped twice, first to a valid regex string that searches for the setting
 * name, ignoring all extra spaces and letter case, and then maped to a RegEx object to be used
 * when parsing.
 */
const COL_POSITION_OPTION_STRS = [
    "column position",
    "col position",
    "column location",
    "col location",
    "single column location",
    "single column position",
];
const COL_POSITION_REGEX_ARR = COL_POSITION_OPTION_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const COL_SIZE_OPTION_STRS = [
    "column size",
    "column width",
    "col size",
    "col width",
    "single column size",
    "single col size",
    "single column width",
    "single col width",
    "largest column"
];
const COL_SIZE_OPTION_REGEX_ARR = COL_SIZE_OPTION_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const NUMBER_OF_COLUMNS_STRS = [
    "number of columns",
    "num of cols",
    "col count",
    "column count"
];
const NUMBER_OF_COLUMNS_REGEX_ARR = NUMBER_OF_COLUMNS_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const DRAW_BORDER_STRS = [
    "border"
];
const DRAW_BORDER_REGEX_ARR = DRAW_BORDER_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const DRAW_SHADOW_STRS = [
    "shadow"
];
const DRAW_SHADOW_REGEX_ARR = DRAW_SHADOW_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const AUTO_LAYOUT_SETTING_STRS = [
    "auto layout",
    "fluid div",
    "fluid divs",
    "fluid columns",
    "fluid cols",
    "fluid col"
];
const AUTO_LAYOUT_REGEX_ARR = AUTO_LAYOUT_SETTING_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
const COLUMN_SPACING_REGEX_ARR = [
    "column spacing",
    "column gap",
    "column sep"
].map((value) => {
    return new RegExp(convertStringToSettingsRegex(value), "i");
});
const COLUMN_HEIGHT_REGEX_ARR = [
    "column height",
    "col height",
    "column max height",
    "col max height",
    "max column height",
    "max col height"
].map((value) => {
    return new RegExp(convertStringToSettingsRegex(value), "i");
});
const CONTENT_OVERFLOW_REGEX_ARR = [
    "overflow",
    "content overflow"
].map((value) => {
    return new RegExp(convertStringToSettingsRegex(value), "i");
});
const ALIGNMENT_REGEX_ARR = [
    "alignment",
    "content alignment",
    "align",
    "content align",
    "align content",
    "text align",
    "align text",
    "Text Alignment"
].map((value) => {
    return new RegExp(convertStringToSettingsRegex(value), "i");
});
/**
 * This function searches the settings string through each regex option. If one of the regex
 * values match, it returns the first group found by the regex. This is depended on proper
 * regex formatting which is done by the convertStringToSettingsRegex function defined below.
 *
 * @param settingsString The value that may match one of the setting options.
 * @param validSettingFormatRegEx The settings options through which to check all options. If one of these regex
 * values match on the string we break from the loop returning the found value.
 *
 * @returns the user entered data if the setting is a match, or null if non of the options matched.
 */
function getSettingsDataFromKeys(settingsString, validSettingFormatRegEx) {
    for (let i = 0; i < validSettingFormatRegEx.length; i++) {
        let regexSearchData = validSettingFormatRegEx[i].exec(settingsString);
        if (regexSearchData !== null) {
            return regexSearchData[1].trim();
        }
    }
    return null;
}
function parseSingleColumnSettings(settingsStr, originalSettings) {
    originalSettings.columnSize = "medium";
    let settingsLines = settingsStr.split("\n");
    for (let i = 0; i < settingsLines.length; i++) {
        let settingsLine = settingsLines[i];
        let settingsData = getSettingsDataFromKeys(settingsLine, COL_POSITION_REGEX_ARR);
        if (settingsData !== null) {
            originalSettings.columnPosition = parseForSingleColumnLocation(settingsData);
        }
        settingsData = getSettingsDataFromKeys(settingsLine, COL_SIZE_OPTION_REGEX_ARR);
        if (settingsData !== null) {
            originalSettings.columnSize = parseForSingleColumnSize(settingsData);
        }
    }
    return originalSettings;
}
function parseColumnSettings(settingsStr) {
    let parsedSettings = getDefaultMultiColumnSettings();
    let settingsLines = settingsStr.split("\n");
    for (let i = 0; i < settingsLines.length; i++) {
        let settingsLine = settingsLines[i];
        checkSettingIsRegionID(settingsLine, parsedSettings);
        checkSettingIsNumberOfColumns(settingsLine, parsedSettings);
        checkSettingDefinesColumnSize(settingsLine, parsedSettings);
        checkSettingIsDrawBorder(settingsLine, parsedSettings);
        checkSettingIsDrawShadow(settingsLine, parsedSettings);
        checkSettingIsAutoLayout(settingsLine, parsedSettings);
        checkSettingIsColumnSpacing(settingsLine, parsedSettings);
        checkSettingIsContentOverflow(settingsLine, parsedSettings);
        checkSettingIsColumnAlignment(settingsLine, parsedSettings);
        checkSettingIsColumnHeight(settingsLine, parsedSettings);
    }
    return parsedSettings;
}
function checkSettingIsNumberOfColumns(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, NUMBER_OF_COLUMNS_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let settingValues = parseForMultiSettings(settingsData);
    settingsData = settingValues[0];
    let numOfCols = parseInt(settingsData);
    if (Number.isNaN(numOfCols) === false) {
        if (numOfCols >= 1) {
            parsedSettings.numberOfColumns = numOfCols;
        }
    }
}
function checkSettingIsRegionID(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, CODEBLOCK_REGION_ID_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    parsedSettings.columnID = settingsData;
}
function checkSettingDefinesColumnSize(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, COL_SIZE_OPTION_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let settingValues = parseForMultiSettings(settingsData);
    if (settingValues.length === 1) {
        // If there is only 1 item we attempt to parse out a layout type. If we get a valid item we 
        // return here.
        if (isColumnLayout(settingValues[0])) {
            parsedSettings.columnSize = validateColumnLayout(settingValues[0]);
            return;
        }
    }
    let widths = [];
    for (let setting of settingValues) {
        let parsed = HTMLSizing.parseToSizing(setting.trim());
        if (parsed !== null) {
            widths.push(parsed);
        }
    }
    // If none are parsed properly to a width then we return a default.
    if (widths.length === 0) {
        console.warn("Error parsing column layout or width, defaulting to standard layout.");
        parsedSettings.columnSize = "standard";
        return;
    }
    // If we parsed some lengths and some did not parse properly, the user has either
    // poorly defined their settings or is attempting to break us. Take the first valid option
    // between the two arrays.
    if (widths.length !== settingValues.length) {
        for (let setting of settingValues) {
            let unitData = HTMLSizing.getLengthUnit(setting);
            if (unitData.isValid === true) {
                parsedSettings.columnSize = widths;
                return;
            }
            if (isColumnLayout(settingValues[0])) {
                parsedSettings.columnSize = validateColumnLayout(settingValues[0]);
                return;
            }
        }
    }
    parsedSettings.columnSize = widths;
}
function checkSettingIsDrawBorder(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, DRAW_BORDER_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let borders = [];
    let settingValues = parseForMultiSettings(settingsData);
    for (let settingsData of settingValues) {
        let borderState = true;
        let isBorderDrawn = BorderOption[settingsData];
        if (isBorderDrawn !== undefined) {
            switch (isBorderDrawn) {
                case (BorderOption.disabled):
                case (BorderOption.off):
                case (BorderOption.false):
                    borderState = false;
                    break;
            }
        }
        borders.push(borderState);
    }
    parsedSettings.drawBorder = borders;
}
function checkSettingIsDrawShadow(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, DRAW_SHADOW_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let settingValues = parseForMultiSettings(settingsData);
    settingsData = settingValues[0];
    let isShadowDrawn = ShadowOption[settingsData];
    if (isShadowDrawn !== undefined) {
        switch (isShadowDrawn) {
            case (ShadowOption.disabled):
            case (ShadowOption.off):
            case (ShadowOption.false):
                parsedSettings.drawShadow = false;
                break;
        }
    }
}
function checkSettingIsAutoLayout(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, AUTO_LAYOUT_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let settingValues = parseForMultiSettings(settingsData);
    settingsData = settingValues[0];
    if (settingsData === "false" ||
        settingsData === "off") {
        parsedSettings.autoLayout = false;
    }
    parsedSettings.autoLayout = true;
}
function checkSettingIsColumnSpacing(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, COLUMN_SPACING_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let spacings = [];
    let settingValues = parseForMultiSettings(settingsData);
    for (let settingsData of settingValues) {
        let parsed = HTMLSizing.parseToSizing(settingsData.trim());
        let spacingStr = "";
        if (parsed !== null) {
            spacingStr = parsed.toString();
        }
        else {
            let noUnitsNum = parseInt(settingsData.trim());
            if (isNaN(noUnitsNum) === false) {
                spacingStr = `${noUnitsNum}pt`;
            }
        }
        spacings.push(spacingStr);
    }
    parsedSettings.columnSpacing = spacings;
}
function checkSettingIsContentOverflow(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, CONTENT_OVERFLOW_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let overflowStates = [];
    let settingValues = parseForMultiSettings(settingsData);
    for (let settingsData of settingValues) {
        let overflowType = ContentOverflowType.scroll;
        settingsData = settingsData.toLowerCase().trim();
        if (settingsData === "hidden") {
            overflowType = ContentOverflowType.hidden;
        }
        overflowStates.push(overflowType);
    }
    parsedSettings.contentOverflow = overflowStates;
}
function checkSettingIsColumnAlignment(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, ALIGNMENT_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let alignments = [];
    let settingValues = parseForMultiSettings(settingsData);
    for (let settingsData of settingValues) {
        let alignmentType = AlignmentType.left;
        settingsData = settingsData.toLowerCase().trim();
        if (settingsData === "center") {
            alignmentType = AlignmentType.center;
        }
        if (settingsData === "right") {
            alignmentType = AlignmentType.right;
        }
        alignments.push(alignmentType);
    }
    parsedSettings.alignment = alignments;
}
function checkSettingIsColumnHeight(settingsLine, parsedSettings) {
    let settingsData = getSettingsDataFromKeys(settingsLine, COLUMN_HEIGHT_REGEX_ARR);
    if (settingsData === null) {
        return;
    }
    let settingValues = parseForMultiSettings(settingsData);
    settingsData = settingValues[0];
    let parsed = HTMLSizing.parseToSizing(settingsData.trim());
    if (parsed !== null) {
        parsedSettings.columnHeight = parsed;
    }
    else {
        let noUnitsNum = parseInt(settingsData.trim());
        if (isNaN(noUnitsNum) === false) {
            parsedSettings.columnHeight = HTMLSizing.create().setWidth(noUnitsNum).setUnits("pt");
        }
    }
}
function parseForMultiSettings(originalValue) {
    // Parse off brackets. If no brackets we return original value to be parsed as sole value.
    let result = /\[(.*)\]/.exec(originalValue);
    if (result === null) {
        return [originalValue];
    }
    let settingsList = result[1];
    let settings = settingsList.split(",").map((val) => {
        return val.trim();
    });
    return settings;
}
const CODEBLOCK_REGION_ID_REGEX_STRS = [
    "id",
    "region id"
];
const CODEBLOCK_REGION_ID_REGEX_ARR = CODEBLOCK_REGION_ID_REGEX_STRS.map(convertStringToSettingsRegex).map((value) => {
    return new RegExp(value, "i");
});
function parseStartRegionCodeBlockID(settingsStr) {
    let codeBlockRegionID = "";
    let settingsLines = settingsStr.split("\n");
    for (let i = 0; i < settingsLines.length; i++) {
        let settingsLine = settingsLines[i];
        let settingsData = getSettingsDataFromKeys(settingsLine, CODEBLOCK_REGION_ID_REGEX_ARR);
        if (settingsData !== null) {
            codeBlockRegionID = settingsData;
        }
    }
    return codeBlockRegionID;
}
function parseForSingleColumnLocation(locationString) {
    switch (locationString.toLowerCase().trim().replace(" ", "")) {
        case "left":
        case "leftside":
        case "leftmargin":
        case "leftalign":
        case "leftaligned":
        case "leftalignement":
        case "first":
        case "start":
        case "beginning":
            return "left";
        case "middle":
        case "middlealigned":
        case "middlealignment":
        case "center":
        case "centeraligned":
        case "centeralignment":
        case "centered":
        case "standard":
            return "center";
        case "right":
        case "rightside":
        case "rightmargin":
        case "rightalign":
        case "rightaligned":
        case "rightalignment":
        case "last":
        case "end":
            return "right";
    }
    return "center";
}
function parseForSingleColumnSize(sizeString) {
    switch (sizeString = sizeString.toLowerCase().trim().replace(" ", "")) {
        case "small":
        case "sm":
            return "small";
        case "medium":
        case "med":
            return "medium";
        case "large":
        case "lg":
            return "large";
        case "full":
        case "full size":
            return "full";
    }
    return "medium";
}
function convertStringToSettingsRegex(originalString) {
    originalString = originalString.replace(" ", "(?:[-_]| *|)");
    let regexString = `(?:${originalString} *[:=] *)(.*)`;
    return regexString;
}

const PANDOC_ENGLISH_NUMBER_OF_COLUMNS = [
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten"
];
function isPandocNumberOfColumns(value) {
    return PANDOC_ENGLISH_NUMBER_OF_COLUMNS.includes(value);
}
function validatePandocNumberOfColumns(value) {
    return value.toLowerCase();
}
function pandocNumberOfColumnsToValue(value) {
    switch (value) {
        case "two":
            return 2;
        case "three":
            return 3;
        case "four":
            return 4;
        case "five":
            return 5;
        case "six":
            return 6;
        case "seven":
            return 7;
        case "eight":
            return 8;
        case "nine":
            return 9;
        case "ten":
            return 10;
    }
}
const PANDOC_COL_DOT_COUNT_NAME = "colDotCount";
const PANDOC_COL_NODOT_COUNT_NAME = "colCount";
const PANDOC_COl_SETTINGS = "colSettings";
const PANDOC_REGEX_STR = (() => {
    let nums = PANDOC_ENGLISH_NUMBER_OF_COLUMNS.join("|");
    let regex_strings = `:{3,} *(?:\\{ *\\.(?<${PANDOC_COL_DOT_COUNT_NAME}>(?:${nums}|))(?:[-_]|)columns(?<${PANDOC_COl_SETTINGS}>.*)\\}|(?<${PANDOC_COL_NODOT_COUNT_NAME}>(?:${nums}|))(?:[-_]|)columns)(?:[ :]*)$\\n?`;
    return regex_strings;
})();
const PANDOC_REGEX = new RegExp(PANDOC_REGEX_STR, "m");
const PANDOC_OPEN_FENCE_REGEX = /^:{3,} *(?:[a-zA-Z]+|\{.*\})(?:[ :]*)$/m;
const PANDOC_CLOSE_FENCE_REGEX = /^:{3,} *$/m;
function findPandoc(text) {
    let regexData = PANDOC_REGEX.exec(text);
    if (regexData !== null) {
        let data = defaultPandocRegexData();
        data.found = true;
        data.startPosition = regexData.index;
        data.endPosition = regexData.index + regexData[0].length;
        let regionData = reducePandocRegionToEndDiv(text.slice(data.endPosition));
        data.endPosition += regionData.content.length + regionData.matchLength;
        data.content = regionData.content;
        data.matchLength = data.endPosition - data.startPosition;
        data.userSettings = regexData.groups[PANDOC_COl_SETTINGS] ? regexData.groups[PANDOC_COl_SETTINGS] : "";
        data.columnCount = regexData.groups[PANDOC_COL_DOT_COUNT_NAME] ? regexData.groups[PANDOC_COL_DOT_COUNT_NAME] : regexData.groups[PANDOC_COL_NODOT_COUNT_NAME];
        return data;
    }
    return defaultPandocRegexData();
}
function getPandocStartData(text) {
    let data = findPandoc(text);
    if (data.found === false) {
        return {
            found: false,
            userSettings: getDefaultMultiColumnSettings()
        };
    }
    return {
        found: true,
        userSettings: parsePandocSettings(data.userSettings, data.columnCount)
    };
}
function containsPandoc(text) {
    return findPandoc(text).found;
}
function containsPandocStartTag(text) {
    let regexData = PANDOC_REGEX.exec(text);
    if (regexData !== null) {
        return true;
    }
    return false;
}
function containsPandocEndTag(text) {
    let regexData = PANDOC_CLOSE_FENCE_REGEX.exec(text);
    if (regexData !== null) {
        return true;
    }
    return false;
}
function isValidPandocEndTag(linesAbove, currentLine) {
    if (containsPandocEndTag(currentLine) === false) {
        return false;
    }
    let contentText = linesAbove.concat(currentLine).join("\n");
    return reducePandocRegionToEndDiv(contentText).found;
}
function reducePandocRegionToEndDiv(contentText) {
    let workingText = contentText;
    let result = {
        found: false,
        content: workingText,
        matchLength: 0
    };
    let state = 0;
    let offset = 0;
    for (let i = 0; true; i++) {
        if (i > 100) {
            break;
        }
        let fence = getNextPandocFence(workingText);
        if (fence === null) {
            break;
        }
        let result = fence.result;
        if (fence.type === "close") {
            // console.log(workingText.slice(result.index, result.index + result[0].length));
            offset += (result.index + result[0].length);
            state--;
        }
        else {
            // console.log(workingText.slice(result.index, result.index + result[0].length));
            offset += (result.index + result[0].length);
            state++;
        }
        if (state === -1) {
            // We have found our last close tag.
            return buildReturnData(result);
        }
        workingText = contentText.slice(offset);
    }
    function buildReturnData(matchResult) {
        result.content = contentText.slice(0, offset - matchResult[0].length);
        result.matchLength = matchResult[0].length;
        result.found = true;
        return result;
    }
    return result;
}
function getNextPandocFence(workingText) {
    let openResult = PANDOC_OPEN_FENCE_REGEX.exec(workingText);
    let closeResult = PANDOC_CLOSE_FENCE_REGEX.exec(workingText);
    if (openResult === null && closeResult === null) {
        return null;
    }
    if (openResult === null && closeResult !== null) {
        return {
            result: closeResult,
            type: "close"
        };
    }
    if (closeResult === null && openResult !== null) {
        return {
            result: openResult,
            type: "open"
        };
    }
    if (closeResult.index < openResult.index) {
        return {
            result: closeResult,
            type: "close"
        };
    }
    else {
        return {
            result: openResult,
            type: "open"
        };
    }
}
function findPandocStart(text) {
    let startRegion = defaultStartRegionData();
    startRegion.regionType = "PADOC";
    let regexData = PANDOC_REGEX.exec(text);
    if (regexData !== null && regexData.length > 0) {
        startRegion.found = true;
        startRegion.startPosition = regexData.index;
        startRegion.matchLength = regexData[0].length;
        startRegion.endPosition = startRegion.startPosition + startRegion.matchLength;
    }
    return startRegion;
}
function defaultPandocRegexData() {
    return {
        found: false,
        startPosition: -1,
        endPosition: -1,
        matchLength: 0,
        content: "",
        userSettings: "",
        columnCount: "",
        regionType: "PADOC"
    };
}
const PANDOC_SETTING_REGEX = /(?<settingName>[^ ]*)=(?<settingValue>".*"|[^ =]*)/;
function parsePandocSettings(pandocUserSettings, colCount = "") {
    //TODO: Add option for column rule. 
    let defaultSettings = getDefaultMultiColumnSettings();
    let colCountDefined = false;
    if (colCount !== "" && isPandocNumberOfColumns(colCount)) {
        colCountDefined = true;
        defaultSettings.numberOfColumns = pandocNumberOfColumnsToValue(validatePandocNumberOfColumns(colCount));
    }
    if (pandocUserSettings.replace(" ", "") === "") {
        return defaultSettings;
    }
    let workingString = pandocUserSettings;
    let regexValue = PANDOC_SETTING_REGEX.exec(workingString);
    let settingList = "";
    for (let i = 0; regexValue !== null; i < 100) {
        let settingName = regexValue.groups['settingName'];
        let settingValue = regexValue.groups['settingValue'];
        settingList += `${settingName}: ${settingValue}\n`;
        workingString = workingString.slice(regexValue.index + regexValue[0].length);
        regexValue = PANDOC_SETTING_REGEX.exec(workingString);
    }
    let parsedSettings = parseColumnSettings(settingList);
    if (colCountDefined) {
        parsedSettings.numberOfColumns = defaultSettings.numberOfColumns;
    }
    return parsedSettings;
}

/*
 * File: multi-column-markdown/src/MultiColumnParser.ts
 * Created Date: Saturday, January 22nd 2022, 6:02:46 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
const START_REGEX_STRS = ["=== *start-multi-column(:?[a-zA-Z0-9-_\\s]*)?",
    "=== *multi-column-start(:?[a-zA-Z0-9-_\\s]*)?"];
const START_REGEX_ARR = [];
for (let i = 0; i < START_REGEX_STRS.length; i++) {
    START_REGEX_ARR.push(new RegExp(START_REGEX_STRS[i]));
}
const START_REGEX_STRS_WHOLE_LINE = ["^=== *start-multi-column(:?[a-zA-Z0-9-_\\s]*)?$",
    "^=== *multi-column-start(:?[a-zA-Z0-9-_\\s]*)?$"];
const START_REGEX_ARR_WHOLE_LINE = [];
for (let i = 0; i < START_REGEX_STRS_WHOLE_LINE.length; i++) {
    START_REGEX_ARR_WHOLE_LINE.push(new RegExp(START_REGEX_STRS_WHOLE_LINE[i]));
}
function findStartTag(text) {
    let startRegion = defaultStartRegionData();
    startRegion.regionType = "DEPRECIATED";
    for (let i = 0; i < START_REGEX_ARR.length; i++) {
        let regexData = START_REGEX_ARR[i].exec(text);
        if (regexData !== null && regexData.length > 0) {
            startRegion.startPosition = regexData.index;
            startRegion.matchLength = regexData[0].length;
            startRegion.endPosition = startRegion.startPosition + startRegion.matchLength;
            let line = text.slice(startRegion.startPosition, startRegion.endPosition);
            if (START_REGEX_ARR_WHOLE_LINE[i].test(line)) {
                startRegion.found = true;
                break;
            }
        }
    }
    return startRegion;
}
function containsStartTag(text) {
    return findStartTag(text).found;
}
function isStartTagWithID(text) {
    let startTagData = findStartTag(text);
    if (startTagData.found === true) {
        let key = getStartTagKey(text);
        if (key === null || key === "") {
            return { isStartTag: true, hasKey: false };
        }
        return { isStartTag: true, hasKey: true };
    }
    return { isStartTag: false, hasKey: false };
}
const END_REGEX_STRS = ["--- *end-multi-column",
    "--- *multi-column-end",
    "=== *end-multi-column",
    "=== *multi-column-end"];
const END_REGEX_ARR = [];
for (let i = 0; i < END_REGEX_STRS.length; i++) {
    END_REGEX_ARR.push(new RegExp(END_REGEX_STRS[i]));
}
function findEndTag(text) {
    // We want to find the first end tag in the text.
    // So here we loop backwards, slicing off the tail until
    // there are no more end tags available
    let lastValidData = getEndTagData(text);
    let workingRegexData = lastValidData;
    while (workingRegexData.found === true) {
        lastValidData = workingRegexData;
        text = text.slice(0, workingRegexData.startPosition);
        workingRegexData = getEndTagData(text);
    }
    return lastValidData;
}
function containsEndTag(text) {
    return findEndTag(text).found;
}
function getEndTagData(text) {
    let found = false;
    let startPosition = -1;
    let endPosition = -1;
    let matchLength = 0;
    for (let i = 0; i < END_REGEX_ARR.length; i++) {
        let regexData = END_REGEX_ARR[i].exec(text);
        if (regexData !== null && regexData.length > 0) {
            found = true;
            startPosition = regexData.index;
            matchLength = regexData[0].length;
            break;
        }
    }
    endPosition = startPosition + matchLength;
    return { found, startPosition, endPosition, matchLength };
}
const COL_REGEX_STRS = [["^===\\s*?column-end\\s*?===\\s*?$", ""],
    ["^===\\s*?end-column\\s*?===\\s*?$", ""],
    ["^===\\s*?column-break\\s*?===\\s*?$", ""],
    ["^===\\s*?break-column\\s*?===\\s*?$", ""],
    ["^---\\s*?column-end\\s*?---\\s*?$", ""],
    ["^---\\s*?end-column\\s*?---\\s*?$", ""],
    ["^---\\s*?column-break\\s*?---\\s*?$", ""],
    ["^---\\s*?break-column\\s*?---\\s*?$", ""],
    ["^ *?(?:\\?)\\columnbreak *?$", ""],
    ["^:{3,} *column-?break *(?:(?:$\\n^)?| *):{3,} *$", "m"]];
const COL_REGEX_ARR = [];
for (let i = 0; i < COL_REGEX_STRS.length; i++) {
    COL_REGEX_ARR.push(new RegExp(COL_REGEX_STRS[i][0], COL_REGEX_STRS[i][1]));
}
function containsColEndTag(text) {
    let found = false;
    for (let i = 0; i < COL_REGEX_ARR.length; i++) {
        if (COL_REGEX_ARR[i].test(text)) {
            found = true;
            break;
        }
    }
    return found;
}
const INNER_COL_END_REGEX_ARR = [
    /^-{3}\s*?column-end\s*?-{3}\s*?$\n?/m,
    /^-{3}\s*?end-column\s*?-{3}\s*?$\n?/m,
    /^-{3}\s*?column-break\s*?-{3}\s*?$\n?/m,
    /^-{3}\s*?break-column\s*?-{3}\s*?$\n?/m,
    /^={3}\s*?column-end\s*?={3}\s*?$\n?/m,
    /^={3}\s*?end-column\s*?={3}\s*?$\n?/m,
    /^={3}\s*?column-break\s*?={3}\s*?$\n?/m,
    /^={3}\s*?break-column\s*?={3}\s*?$\n?/m,
    /^ *?(?:\\?)\\columnbreak *?$\n?/m,
    /^:{3,} *column-?break *(?:(?:$\n^)?| *):{3,} *$/m
];
function checkForParagraphInnerColEndTag(text) {
    for (let i = 0; i < INNER_COL_END_REGEX_ARR.length; i++) {
        let regexResult = INNER_COL_END_REGEX_ARR[i].exec(text);
        if (regexResult) {
            return regexResult;
        }
    }
    return null;
}
const COL_ELEMENT_INNER_TEXT_REGEX_STRS = ["= *column-end *=",
    "= *end-column *=",
    "= *column-break *=",
    "= *break-column *="];
const COL_ELEMENT_INNER_TEXT_REGEX_ARR = [];
for (let i = 0; i < COL_ELEMENT_INNER_TEXT_REGEX_STRS.length; i++) {
    COL_ELEMENT_INNER_TEXT_REGEX_ARR.push(new RegExp(COL_ELEMENT_INNER_TEXT_REGEX_STRS[i]));
}
function elInnerTextContainsColEndTag(text) {
    let found = false;
    for (let i = 0; i < COL_ELEMENT_INNER_TEXT_REGEX_ARR.length; i++) {
        if (COL_ELEMENT_INNER_TEXT_REGEX_ARR[i].test(text)) {
            found = true;
            break;
        }
    }
    return found;
}
const COL_SETTINGS_REGEX_STRS = ["```settings",
    "```column-settings",
    "```multi-column-settings"];
const COL_SETTINGS_REGEX_ARR = [];
for (let i = 0; i < COL_SETTINGS_REGEX_STRS.length; i++) {
    COL_SETTINGS_REGEX_ARR.push(new RegExp(COL_SETTINGS_REGEX_STRS[i]));
}
function containsColSettingsTag(text) {
    let found = false;
    for (let i = 0; i < COL_SETTINGS_REGEX_ARR.length; i++) {
        if (COL_SETTINGS_REGEX_ARR[i].test(text)) {
            found = true;
            break;
        }
    }
    return found;
}
function findSettingsCodeblock(text) {
    let found = false;
    let startPosition = -1;
    let endPosition = -1;
    let matchLength = 0;
    for (let i = 0; i < COL_SETTINGS_REGEX_ARR.length; i++) {
        let regexData = COL_SETTINGS_REGEX_ARR[i].exec(text);
        if (regexData !== null && regexData.length > 0) {
            found = true;
            startPosition = regexData.index;
            matchLength = regexData[0].length;
            endPosition = startPosition + matchLength;
            let remainingText = text.slice(endPosition);
            regexData = CODEBLOCK_END_REGEX.exec(remainingText);
            if (regexData !== null && regexData.length > 0) {
                found = true;
                endPosition += regexData.index + regexData[0].length;
            }
            break;
        }
    }
    return {
        found,
        startPosition,
        endPosition,
        matchLength,
        regionType: "CODEBLOCK"
    };
}
const CODEBLOCK_START_REGEX_STR = [
    "multi-column-start",
    "start-multi-column"
].reduce((prev, cur) => {
    if (prev === "") {
        return cur;
    }
    return `${prev}|${cur}`;
}, "");
const START_CODEBLOCK_REGEX = new RegExp(`\`\`\`(:?${CODEBLOCK_START_REGEX_STR})(.*?)\`\`\``, "ms");
function findStartCodeblock(text) {
    let startRegion = defaultStartRegionData();
    startRegion.regionType = "CODEBLOCK";
    let regexData = START_CODEBLOCK_REGEX.exec(text);
    if (regexData !== null && regexData.length > 0) {
        startRegion.found = true;
        startRegion.startPosition = regexData.index;
        startRegion.matchLength = regexData[0].length;
        startRegion.endPosition = startRegion.startPosition + startRegion.matchLength;
    }
    return startRegion;
}
function containsStartCodeBlock(text) {
    return findStartCodeblock(text).found;
}
function containsRegionStart(text) {
    return containsStartCodeBlock(text) || containsStartTag(text) || containsPandoc(text);
}
function countStartTags(initialText) {
    let keys = [];
    let text = initialText;
    let startTagData = findStartTag(text);
    while (startTagData.found) {
        // Slice off everything before the tag
        text = text.slice(startTagData.startPosition);
        /**
         * Get just the start tag line and then set text to everything just
         * after the start tag.
         */
        let tag = text.split("\n")[0];
        text = text.slice(1); // This moves the text 1 character so we dont match the same tag.
        // Parse out the key and append to the list.
        let key = getStartTagKey(tag);
        if (key === null) {
            key = "";
        }
        keys.push(key);
        // Search again for another tag before looping.
        startTagData = findStartTag(text);
    }
    text = initialText;
    startTagData = findStartCodeblock(text);
    while (startTagData.found) {
        let settingsText = text.slice(startTagData.startPosition, startTagData.endPosition);
        text = text.slice(startTagData.endPosition);
        let key = parseStartRegionCodeBlockID(settingsText);
        if (key === null) {
            key = "";
        }
        keys.push(key);
        // Search again for another tag before looping.
        startTagData = findStartCodeblock(text);
    }
    return { numberOfTags: keys.length, keys };
}
function getStartDataAboveLine(linesAboveArray) {
    return getStartBlockOrCodeblockAboveLine(linesAboveArray, [
        findStartTag,
        findStartCodeblock,
        findPandocStart
    ]);
}
function getStartBlockOrCodeblockAboveLine(linesAboveArray, searchFunctions) {
    let originalText = linesAboveArray.join("\n");
    let { tagMatchData, lastFoundTag, textAbove } = findLastValidTag(originalText);
    if (tagMatchData === null) {
        return null;
    }
    if (tagMatchData.found === false) {
        return null;
    }
    if (tagMatchData.regionType === "CODEBLOCK") {
        let endTagSerachData = findEndTag(textAbove);
        if (endTagSerachData.found === true) {
            return null;
        }
        let startBlockKey = parseStartRegionCodeBlockID(lastFoundTag);
        let linesAboveArray = textAbove.split("\n");
        return { startBlockKey, linesAboveArray, startBlockType: "CODEBLOCK" };
    }
    if (tagMatchData.regionType === "DEPRECIATED") {
        let endTagSerachData = findEndTag(textAbove);
        if (endTagSerachData.found === true) {
            return null;
        }
        let linesAboveArray = textAbove.split("\n");
        let startBlockKey = getStartTagKey(lastFoundTag);
        let codeBlockData = parseCodeBlockStart(linesAboveArray);
        if (codeBlockData !== null) {
            startBlockKey = codeBlockData.id;
            if (codeBlockData.index > 0) {
                linesAboveArray = linesAboveArray.slice(codeBlockData.index + 1);
            }
        }
        if (startBlockKey === null) {
            startBlockKey = "";
        }
        return { startBlockKey, linesAboveArray, startBlockType: "DEPRECIATED" };
    }
    if (tagMatchData.regionType === "PADOC") {
        let endTagSerachData = reducePandocRegionToEndDiv(textAbove);
        if (endTagSerachData.found === true) {
            return null;
        }
        let linesAboveArray = textAbove.split("\n");
        let pandocData = getPandocStartData(`${lastFoundTag}`);
        let startBlockKey = pandocData.userSettings.columnID;
        return {
            startBlockKey,
            linesAboveArray,
            startBlockType: "PADOC"
        };
    }
    return null;
    function findLastValidTag(originalText) {
        let textAbove = originalText;
        let offset = 0;
        let tagMatchData = null;
        let lastFoundTag = "";
        for (let i = 0; true; i++) {
            if (i > 100) {
                break;
            }
            let tagsFound = [];
            searchFunctions.forEach((func) => {
                tagsFound.push(func(textAbove));
            });
            tagsFound = tagsFound.filter((val) => {
                return val.found === true;
            }).sort((a, b) => {
                return a.startPosition - b.startPosition;
            });
            if (tagsFound.length === 0) {
                break;
            }
            tagMatchData = tagsFound[0];
            let startIndex = offset + tagMatchData.startPosition;
            lastFoundTag = originalText.slice(startIndex, startIndex + tagMatchData.matchLength).trimEnd();
            offset += (tagMatchData.startPosition + tagMatchData.matchLength);
            textAbove = originalText.slice(offset);
        }
        return {
            tagMatchData,
            lastFoundTag,
            textAbove
        };
    }
}
/**
 * This function will filter a set of strings, returning all items starting
 * from the closest open start tag through the last item in the set.
 *
 * The function filters out all end tags to make sure that the start tag we
 * find is the proper start tag for the list sent.
 * @param linesAboveArray
 * @returns
 */
function getStartBlockAboveLine(linesAboveArray) {
    return getStartBlockOrCodeblockAboveLine(linesAboveArray, [findStartTag]);
}
function getEndBlockBelow(linesBelow) {
    // Reduce the array down into a single string so that we can
    // easily RegEx over the string and find the indicies we're looking for.
    let linesBelowStr = linesBelow.reduce((prev, current) => {
        return prev + "\n" + current;
    }, "");
    let endTagSerachData = findEndTag(linesBelowStr);
    let startTagSearchData = findStartTag(linesBelowStr);
    let sliceEndIndex = -1; // If neither start or end found we return the entire array.
    if (endTagSerachData.found === true && startTagSearchData.found === false) {
        sliceEndIndex = endTagSerachData.startPosition;
    }
    else if (endTagSerachData.found === false && startTagSearchData.found === true) {
        sliceEndIndex = startTagSearchData.startPosition;
    }
    else if (endTagSerachData.found === true && startTagSearchData.found === true) {
        sliceEndIndex = endTagSerachData.startPosition;
        if (startTagSearchData.startPosition < endTagSerachData.startPosition) {
            /**
             * If we found a start tag before an end tag we want to use the start tag
             * our current block is not properly ended and we use the next start tag
             * as our limit
             */
            sliceEndIndex = startTagSearchData.startPosition;
        }
    }
    return linesBelow.slice(0, sliceEndIndex);
}
function getStartTagKey(startTag) {
    let keySplit = startTag.split(":");
    if (keySplit.length > 1) {
        return keySplit[1].replace(" ", "");
    }
    return null;
}
const TAB_HEADER_END_REGEX_STR = "^```$";
const TAB_HEADER_END_REGEX = new RegExp(TAB_HEADER_END_REGEX_STR);
function parseCodeBlockStart(codeBlockLines) {
    let id = null;
    for (let i = 0; i < codeBlockLines.length; i++) {
        let line = codeBlockLines[i];
        if (id === null) {
            let key = line.split(":")[0];
            if (key.toLowerCase() === "region id") {
                id = line.split(":")[1].trim();
            }
        }
        else {
            if (TAB_HEADER_END_REGEX.test(line)) {
                return { id: id, index: i };
            }
        }
    }
    if (id === null) {
        return null;
    }
    else {
        return { id: id, index: -1 };
    }
}
const CODEBLOCK_END_REGEX_STR = "```";
const CODEBLOCK_END_REGEX = new RegExp(CODEBLOCK_END_REGEX_STR);

/*
 * Filename: multi-column-markdown/src/utilities/utils.ts
 * Created Date: Tuesday, January 30th 2022, 4:02:19 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
function getUID(length = 10) {
    if (length > 10) {
        length = 10;
    }
    let UID = Math.random().toString(36).substring(2);
    UID = UID.slice(0, length);
    return UID;
}
/**
 * BFS on the child nodes of the passed element searching for the first instance of the
 * node type passed. Returning the element found or null if none found.
 *
 * @param root
 * @param nodeTypeName
 * @returns
 */
function searchChildrenForNodeType(root, nodeTypeName) {
    nodeTypeName = nodeTypeName.toLowerCase();
    let queue = [root];
    while (queue.length > 0) {
        for (let i = 0; i < queue.length; i++) {
            let node = queue.shift();
            let nodeName = node.nodeName.toLowerCase();
            if (nodeName === nodeTypeName) {
                return node;
            }
            for (let i = 0; i < node.children.length; i++) {
                queue.push(node.children[i]);
            }
        }
    }
    return null;
}
function fileStillInView(sourcePath) {
    let fileLeaf = getFileLeaf(sourcePath);
    if (fileLeaf === null) {
        return false;
    }
    return true;
}
function getFileLeaf(sourcePath) {
    let markdownLeaves = app.workspace.getLeavesOfType("markdown");
    if (markdownLeaves.length === 0) {
        return null;
    }
    for (let i = 0; i < markdownLeaves.length; i++) {
        if (markdownLeaves[i].getViewState().state.file === sourcePath) {
            return markdownLeaves[i];
        }
    }
    return null;
}

/*
 * Filename: multi-column-markdown/src/domObject.ts
 * Created Date: Tuesday, February 1st 2022, 12:04:00 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
const UPDATE_TIMES = [125, 125, 250, 20000];
const MID_BREAK_ERROR_MESSAGE = "Detected invalid column break syntax.\nPlease make sure column break tags are not in the middle of a paragraph block";
var DOMObjectTag;
(function (DOMObjectTag) {
    DOMObjectTag[DOMObjectTag["none"] = 0] = "none";
    DOMObjectTag[DOMObjectTag["startRegion"] = 1] = "startRegion";
    DOMObjectTag[DOMObjectTag["regionSettings"] = 2] = "regionSettings";
    DOMObjectTag[DOMObjectTag["columnBreak"] = 3] = "columnBreak";
    DOMObjectTag[DOMObjectTag["endRegion"] = 4] = "endRegion";
})(DOMObjectTag || (DOMObjectTag = {}));
var ElementColumnBreakType;
(function (ElementColumnBreakType) {
    ElementColumnBreakType[ElementColumnBreakType["none"] = 0] = "none";
    ElementColumnBreakType[ElementColumnBreakType["preBreak"] = 1] = "preBreak";
    ElementColumnBreakType[ElementColumnBreakType["postBreak"] = 2] = "postBreak";
    ElementColumnBreakType[ElementColumnBreakType["midBreak"] = 3] = "midBreak";
})(ElementColumnBreakType || (ElementColumnBreakType = {}));
class DOMObject {
    constructor(element, linesOfElement, randomID = getUID(), tag = DOMObjectTag.none) {
        this.clonedElement = null;
        this.elementIsColumnBreak = ElementColumnBreakType.none;
        this.elementType = "undefined";
        this.elementContainer = null;
        this.elementRenderedHeight = 0;
        this.canvasElementUpdateTime = Date.now();
        this.canvasTimerIndex = 0;
        this.lastClonedElementUpdateTime = Date.now();
        this.updateTimerIndex = 0;
        this.nodeKey = element.innerText.trim();
        this.originalElement = element;
        this.UID = randomID;
        this.tag = tag;
        this.usingOriginalElement = false;
        this.linesOfElement = linesOfElement;
        if (this.tag === DOMObjectTag.none) {
            this.setDomObjectTag();
        }
        // If our tag is still none here, we now want to check for
        // an in paragraph column break flag.
        if (this.tag === DOMObjectTag.none) {
            this.checkForPrePostColumnBreak();
        }
    }
    setMainDOMElement(domElement) {
        this.originalElement = domElement;
        this.usingOriginalElement = true;
    }
    clonedElementReadyForUpdate() {
        let deltaTime = Date.now() - this.lastClonedElementUpdateTime;
        if (deltaTime > UPDATE_TIMES[this.updateTimerIndex]) {
            return true;
        }
        return false;
    }
    canvasReadyForUpdate() {
        let deltaTime = Date.now() - this.canvasElementUpdateTime;
        if (deltaTime > UPDATE_TIMES[this.canvasTimerIndex]) {
            this.canvasElementUpdateTime = Date.now();
            this.canvasTimerIndex = Math.clamp(this.canvasTimerIndex + 1, 0, UPDATE_TIMES.length - 1);
            return true;
        }
        return false;
    }
    updateClonedElement(newClonedElement) {
        this.clonedElement = newClonedElement;
        this.lastClonedElementUpdateTime = Date.now();
        this.updateTimerIndex = Math.clamp(this.updateTimerIndex + 1, 0, UPDATE_TIMES.length - 1);
    }
    setDomObjectTag() {
        let elementTextSpaced = this.linesOfElement.reduce((prev, curr) => {
            return prev + "\n" + curr;
        });
        if (containsEndTag(this.originalElement.textContent) === true) {
            this.elementType = "unRendered";
            this.tag = DOMObjectTag.endRegion;
            // el.addClass(MultiColumnStyleCSS.RegionEndTag)
            // regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.endRegion);
        }
        else if (containsColEndTag(this.originalElement.textContent) === true ||
            (this.originalElement.innerHTML.startsWith("<mark>")) && elInnerTextContainsColEndTag(this.originalElement.textContent)) {
            this.elementType = "unRendered";
            this.tag = DOMObjectTag.columnBreak;
            // el.addClass(MultiColumnStyleCSS.ColumnEndTag)
            // regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.columnBreak);
        }
        else if (containsStartTag(this.originalElement.textContent) === true) {
            this.elementType = "unRendered";
            this.tag = DOMObjectTag.startRegion;
            // el.addClass(MultiColumnStyleCSS.ColumnEndTag)
            // regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.columnBreak);
        }
        else if (containsColSettingsTag(elementTextSpaced) === true) {
            this.elementType = "unRendered";
            // el.addClass(MultiColumnStyleCSS.RegionSettings)
            // regionalManager = regionalContainer.setRegionSettings(elementTextSpaced)
            // regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.regionSettings);
        }
    }
    checkForPrePostColumnBreak() {
        function replaceColBreak(text) {
            let colBreakData = checkForParagraphInnerColEndTag(text);
            if (containsColumnBreak === null) {
                return text;
            }
            let startIndex = colBreakData.index;
            let endIndex = startIndex + colBreakData[0].length;
            let pre = text.slice(0, startIndex);
            let post = text.slice(endIndex);
            return `${pre}${post}`;
        }
        let textOfElement = this.originalElement.innerText;
        let containsColumnBreak = checkForParagraphInnerColEndTag(textOfElement);
        if (containsColumnBreak !== null) {
            let text = this.originalElement.innerText;
            let startIndex = containsColumnBreak.index;
            let endIndex = startIndex + containsColumnBreak[0].length;
            let pre = text.slice(0, startIndex);
            let post = text.slice(endIndex);
            // Sometimes the element passed in is a DIV containing a child element, other
            // times it is the root child element alone, here we just make sure we are accessing
            // the right element we want.
            let checkNode = this.originalElement;
            if (this.originalElement.nodeName === "DIV") {
                checkNode = this.originalElement.children[0];
            }
            let paragraph = null;
            if (checkNode.nodeName === "P") {
                // Paragraphs simply remove the col-break tag
                // we set our element here incase we need to display an error.
                paragraph = checkNode;
                checkNode.innerText = `${pre}${post}`;
            }
            else if (checkNode.nodeName === "UL" || checkNode.nodeName === "OL") {
                // Attempt to get the list item that contains the column break,
                // From testing this code should only run when the column break is at the end
                // of a list not at the start of the list.
                let listItem = null;
                for (let i = checkNode.children.length - 1; i >= 0; i--) {
                    if (checkNode.children[i].nodeName === "LI") {
                        listItem = checkNode.children[i];
                        break;
                    }
                }
                if (listItem !== null) {
                    // Replace, the list element HTML without the col-break text.
                    listItem.innerHTML = replaceColBreak(listItem.innerHTML);
                }
            }
            else {
                console.debug(`Element Type: ${checkNode.nodeName}, does not currently support appened column-breaks.`, checkNode.cloneNode(true));
                // if(paragraph) {
                //     paragraph.innerText = `${pre}${post}`;
                // }
            }
            // console.debug("Checking where column break is", startIndex, endIndex, text.length);
            if (startIndex === 0) {
                // console.debug("column break at start of element.")
                this.elementIsColumnBreak = ElementColumnBreakType.preBreak;
            }
            else if (endIndex === text.length) {
                // console.debug("Column break at end of element.")
                this.elementIsColumnBreak = ElementColumnBreakType.postBreak;
            }
            else {
                // console.debug("Column break in the middle of element?")
                this.elementIsColumnBreak = ElementColumnBreakType.midBreak;
                const ERROR_COLOR_CSS = "mcm-error-message-color";
                const CENTER_ALIGN_SPAN_CSS = "mcm-span-content-alignment-center";
                if (paragraph) {
                    paragraph.innerHTML = `${pre}\n<span class="${ERROR_COLOR_CSS} ${CENTER_ALIGN_SPAN_CSS}">${MID_BREAK_ERROR_MESSAGE}</span>\n\n${post}`.split("\n").join("<br>");
                }
            }
        }
    }
}
class TaskListDOMObject extends DOMObject {
    constructor(baseDOMObject) {
        super(baseDOMObject.originalElement, baseDOMObject.linesOfElement, baseDOMObject.UID, DOMObjectTag.none);
        this.originalCheckboxes = [];
        this.checkboxElements = new Map();
    }
    checkboxClicked(index) {
        if (this.checkboxElements.has(index)) {
            this.checkboxElements.get(index).click();
        }
        if (index < this.originalCheckboxes.length) {
            let originalInput = this.originalCheckboxes[index].getElementsByClassName('task-list-item-checkbox');
            if (originalInput.length === 1) {
                originalInput[0].click();
            }
            // else {
            //     console.error("Could not find checkbox to click.")
            // }
        }
    }
    getCheckboxElement(index) {
        var _a;
        if (this.checkboxElements.has(index) === false) {
            if (index < this.originalCheckboxes.length) {
                let originalInput = (_a = this.originalCheckboxes[index]) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('task-list-item-checkbox');
                if ((originalInput === null || originalInput === void 0 ? void 0 : originalInput.length) === 1) {
                    this.checkboxElements.set(index, originalInput[0]);
                }
                // else {
                //     console.error("Could not find checkbox element to return.", this.originalCheckboxes, index);
                // }
            }
        }
        return this.checkboxElements.get(index);
    }
    static checkForTaskListElement(domElement) {
        if (domElement.originalElement.getElementsByClassName("task-list-item").length > 0) {
            return new TaskListDOMObject(domElement);
        }
        return domElement;
    }
    static getChildCheckbox(el) {
        let checkboxElements = el.getElementsByClassName('task-list-item-checkbox');
        if (checkboxElements.length === 1) {
            return checkboxElements[0];
        }
        return el.children[0];
    }
}

/*
 * File: multi-column-markdown/src/utilities/cssDefinitions.ts
 * Created Date: Wednesday, February 16th 2022, 11:09:06 am
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
var MultiColumnLayoutCSS;
(function (MultiColumnLayoutCSS) {
    MultiColumnLayoutCSS["RegionRootContainerDiv"] = "mcm-column-root-container";
    MultiColumnLayoutCSS["RegionErrorContainerDiv"] = "mcm-column-error-region-wrapper";
    MultiColumnLayoutCSS["RegionContentContainerDiv"] = "mcm-column-region-wrapper";
    MultiColumnLayoutCSS["RegionColumnContainerDiv"] = "mcm-column-parent-container";
    MultiColumnLayoutCSS["ColumnDualElementContainer"] = "mcm-column-element-wrapper";
    MultiColumnLayoutCSS["OriginalElementType"] = "mcm-original-column-element";
    MultiColumnLayoutCSS["ClonedElementType"] = "mcm-cloned-column-element";
    MultiColumnLayoutCSS["ContentOverflowAutoScroll_X"] = "mcm-content-overflow-auto-scroll-x";
    MultiColumnLayoutCSS["ContentOverflowAutoScroll_Y"] = "mcm-content-overflow-auto-scroll-y";
    MultiColumnLayoutCSS["ContentOverflowHidden_X"] = "mcm-content-overflow-hidden-x";
    MultiColumnLayoutCSS["ContentOverflowHidden_Y"] = "mcm-content-overflow-hidden-y";
    MultiColumnLayoutCSS["AlignmentLeft"] = "mcm-content-alignment-left";
    MultiColumnLayoutCSS["AlignmentCenter"] = "mcm-content-alignment-center";
    MultiColumnLayoutCSS["AlignmentRight"] = "mcm-content-alignment-right";
    MultiColumnLayoutCSS["NoFlexShrink"] = "mcm-no-flex-shrink";
    MultiColumnLayoutCSS["ReflowContainerDiv"] = "mcm-doc-reflow-container";
    // ------------------------------------------------------ //
    MultiColumnLayoutCSS["SingleColumnSmall"] = "mcm-single-column-small";
    MultiColumnLayoutCSS["SingleColumnMed"] = "mcm-single-column-medium";
    MultiColumnLayoutCSS["SingleColumnLarge"] = "mcm-single-column-large";
    MultiColumnLayoutCSS["SingleColumnFull"] = "mcm-single-column-full";
    MultiColumnLayoutCSS["SingleColumnLeftLayout"] = "mcm-singlecol-layout-left";
    MultiColumnLayoutCSS["SingleColumnCenterLayout"] = "mcm-singlecol-layout-center";
    MultiColumnLayoutCSS["SingleColumnRightLayout"] = "mcm-singlecol-layout-right";
    // ------------------------------------------------------ //
    MultiColumnLayoutCSS["TwoEqualColumns"] = "mcm-two-equal-columns";
    MultiColumnLayoutCSS["TwoColumnSmall"] = "mcm-two-column-small";
    MultiColumnLayoutCSS["TwoColumnLarge"] = "mcm-two-column-large";
    // ------------------------------------------------------ //
    MultiColumnLayoutCSS["ThreeEqualColumns"] = "mcm-three-equal-columns";
    MultiColumnLayoutCSS["ThreeColumn_Large"] = "mcm-three-column-large";
    MultiColumnLayoutCSS["ThreeColumn_Small"] = "mcm-three-column-small";
})(MultiColumnLayoutCSS || (MultiColumnLayoutCSS = {}));
var MultiColumnStyleCSS;
(function (MultiColumnStyleCSS) {
    MultiColumnStyleCSS["RegionErrorMessage"] = "mcm-column-error-message";
    MultiColumnStyleCSS["RegionSettings"] = "mcm-column-settings-wrapper";
    MultiColumnStyleCSS["RegionContent"] = "mcm-column-content-wrapper";
    MultiColumnStyleCSS["RegionEndTag"] = "mcm-column-end-tag-wrapper";
    MultiColumnStyleCSS["ColumnEndTag"] = "mcm-column-break-tag-wrapper";
    MultiColumnStyleCSS["RegionShadow"] = "mcm-region-shadow";
    MultiColumnStyleCSS["ColumnShadow"] = "mcm-column-shadow";
    MultiColumnStyleCSS["ColumnBorder"] = "mcm-column-border";
    MultiColumnStyleCSS["ColumnContent"] = "mcm-column-div";
    MultiColumnStyleCSS["SmallFont"] = "mcm-small-font-message";
})(MultiColumnStyleCSS || (MultiColumnStyleCSS = {}));

/**
 * File: /src/utilities/elementRenderTypeParser.ts                             *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2023 Cameron Robinson                                         *
 */
function getElementRenderType(element) {
    if (isEmbededImage(element) === true) {
        return "imageEmbed";
    }
    if (isButtonPlugin_CrossCompatibilty(element) === true) {
        return "buttonPlugin";
    }
    /**
     * The Dataview plugin needs to be constantly checked if the clone should be
     * updated but should not always update the "dual render" aspect, so we add
     * a special case for that plugin and maybe others in the future.
     */
    if (hasDataview(element) === true) {
        return "dataviewPlugin";
    }
    else if (isInternalEmbed(element)) {
        return "internalEmbed";
    }
    /**
     * Some types of content are rendered in canvases which are not rendered properly
     * when we clone the original node. Here we are flagging the element as a canvas
     * element so we can clone the canvas to a copy element within the region.
     *
     */
    if (hasDataviewJSCanvas(element) === true) {
        return "dataviewJSCanvasEmbed";
    }
    if (hasDataviewJS(element) === true) {
        return "dataviewJSEmbed";
    }
    if (hasDataviewInline(element) === true) {
        return "dataviewInlineQuery";
    }
    /**
     * Look for specific kinds of elements by their CSS class names here. These
     * are going to be brittle links as they rely on other plugin definitions but
     * as this is only adding in extra compatability to the plugins defined here
     * it should be ok.
     *
     * These may be classes on one of the simple elements (such as a paragraph)
     * that we search for below so need to look for these first.
     */
    if (hasDiceRoller(element) === true) {
        return "diceRoller";
    }
    else if (hasCopyButton(element) === true) {
        return "calloutCopyButton";
    }
    else if (hasAdmonitionFold(element) === true) {
        return "admonitionFold";
    }
    /**
     * This checks for special types of elements that should be rendered normally. Is
     * slightly redundant with next check but differentiates between types of ements
     * being checked.
     */
    if (hasAdmonition(element) === true) {
        return "admonition";
    }
    else if (isIFrame(element) === true) {
        return "iFrameEmbed";
    }
    else if (isCustomIFrame(element) === true) {
        return "customFramePlugin";
    }
    /**
     * If we didnt find a special element we want to check for simple elements
     * such as paragraphs or lists. In the current implementation we only set up
     * the special case for "specialRender" elements so this *should* be saving
     * some rendering time by setting these tags properly.
     */
    if (hasParagraph(element) ||
        hasHeader(element) ||
        hasList(element) ||
        isHorizontalRule(element) ||
        isTable(element)) {
        return "basicElement";
    }
    // If still nothing found we return other as the default response if nothing else found.
    return "specialRender";
}
function hasParagraph(element) {
    return element.innerHTML.startsWith("<p");
}
function hasHeader(element) {
    if (element.innerHTML.startsWith("<h1") ||
        element.innerHTML.startsWith("<h2") ||
        element.innerHTML.startsWith("<h3") ||
        element.innerHTML.startsWith("<h4") ||
        element.innerHTML.startsWith("<h5") ||
        element.innerHTML.startsWith("<h6")) {
        return true;
    }
    return false;
}
function hasList(element) {
    if (element.innerHTML.startsWith("<ul") ||
        element.innerHTML.startsWith("<ol")) {
        return true;
    }
    return false;
}
function hasCopyButton(element) {
    return element.getElementsByClassName("copy-code-button").length !== 0 ||
        element.getElementsByClassName("admonition-content-copy").length !== 0;
}
function hasDiceRoller(element) {
    return element.getElementsByClassName("dice-roller").length !== 0;
}
function hasAdmonition(element) {
    return element.getElementsByClassName("admonition").length !== 0;
}
function isIFrame(element) {
    if (element.children.length > 0) {
        return element.firstChild.nodeName.toLowerCase() === "iframe";
    }
    return false;
}
function isHorizontalRule(element) {
    return element.innerHTML.startsWith("<hr");
}
function isTable(element) {
    return element.innerHTML.startsWith("<table");
}
function hasAdmonitionFold(element) {
    return element.getElementsByClassName("callout-fold").length !== 0;
}
function hasDataview(element) {
    let isDataview = element.getElementsByClassName("block-language-dataview").length !== 0;
    return isDataview;
}
function hasDataviewInline(element) {
    let isDataview = element.getElementsByClassName("dataview-inline-query").length !== 0;
    return isDataview;
}
function hasDataviewJSCanvas(element) {
    let isDataviewJS = element.getElementsByClassName("block-language-dataviewjs").length !== 0;
    let canvas = searchChildrenForNodeType(element, "canvas");
    /**
     * This means only dataviewJS chart canvas elements should be rendered properly. Other canvases will
     * need thier own case put in or the restriction removed after testing.
     */
    return canvas !== null && isDataviewJS;
}
function hasDataviewJS(element) {
    let isDataviewJS = element.getElementsByClassName("block-language-dataviewjs").length !== 0;
    return isDataviewJS;
}
function isInternalEmbed(element) {
    let isEmbed = element.getElementsByClassName("internal-embed").length !== 0;
    return isEmbed;
}
function getHeadingCollapseElement(element) {
    if (element === null) {
        return null;
    }
    let childElements = element.getElementsByClassName("heading-collapse-indicator");
    if (childElements.length === 1) {
        return childElements[0];
    }
    if (childElements.length > 1) {
        console.debug("Found multiple heading collapse indicators in element.");
    }
    return null;
}
function isCustomIFrame(element) {
    let isFrame = element.getElementsByClassName("custom-frames-frame").length !== 0;
    return isFrame;
}
function isButtonPlugin_CrossCompatibilty(element) {
    if (element.hasClass("block-language-button")) {
        return true;
    }
    let buttonPluginBlock = element.getElementsByClassName("block-language-button")[0];
    if (buttonPluginBlock) {
        return true;
    }
    return false;
}
function isEmbededImage(element) {
    let img = element.getElementsByTagName("img")[0];
    if (img === null ||
        img === undefined) {
        return false;
    }
    return true;
}

/**
 * File: /src/dom_manager/regional_managers/RegionManager.ts                   *
 * Created Date: Sunday, May 22nd 2022, 7:49 pm                                *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2022 Cameron Robinson                                         *
 */
class RegionManager {
    get numberOfChildren() {
        return this.domList.length;
    }
    get regionParent() {
        return this._regionParent;
    }
    set regionParent(value) {
        this._regionParent = value;
    }
    constructor(data) {
        this.domList = [];
        this.domObjectMap = new Map();
        this.regionalSettings = getDefaultMultiColumnSettings();
        this.domList = data.domList;
        this.domObjectMap = data.domObjectMap;
        this.regionParent = data.regionParent;
        this.fileManager = data.fileManager;
        this.regionalSettings = data.regionalSettings;
        this.regionKey = data.regionKey;
    }
    getRegionData() {
        return {
            domList: this.domList,
            domObjectMap: this.domObjectMap,
            regionParent: this.regionParent,
            fileManager: this.fileManager,
            regionalSettings: this.regionalSettings,
            regionKey: this.regionKey,
            rootElement: null
        };
    }
    /**
     * Adds a new object to the region by finding where it should be relative to its siblings.
     * @param siblingsAbove The Markdown text rendered elements for sibilings above this element in the dom
     * @param siblingsBelow The Markdown text rendered elements for sibilings below this element in the dom
     * @param obj The object to add.
     * @returns Returns the index at which the object has been added.
     */
    addObject(siblingsAbove, siblingsBelow, obj) {
        let nextObj = siblingsBelow.children[0];
        let addAtIndex = siblingsAbove.children.length;
        if (siblingsAbove.children.length > 0) {
            /**
             * We want to find the first sibling withouth "" for an inner text so we can use that to anchor our
             * element into the domList. For most items the first element before our new element will have the proper
             * innerText. Sometimes other elements are empty and were causing issues.
             *
             * Now we loop back through the previous siblings looking for the first one with a valid inner text and using that
             * as the anchor and offsetting our addAtIndex by the number of empty string elements we found.
             */
            let prevSiblingInnerText = "";
            let prevSiblingOffset = 0;
            for (let i = siblingsAbove.children.length - 1; i >= 0; i--) {
                let obj = siblingsAbove.children[i];
                if (obj.innerText !== "") {
                    prevSiblingInnerText = obj.innerText;
                    break;
                }
                prevSiblingOffset++;
            }
            for (let i = this.domList.length - 1; i >= 0; i--) {
                if (this.domList[i].nodeKey === prevSiblingInnerText) {
                    addAtIndex = i + 1 + prevSiblingOffset;
                    break;
                }
            }
        }
        let nextElIndex = addAtIndex;
        if (nextObj !== undefined) {
            nextObj.innerText;
            for (let i = addAtIndex; i < this.domList.length; i++) {
                if (this.domList[i].nodeKey === nextObj.innerText.trim()) {
                    nextElIndex = i;
                    break;
                }
            }
        }
        // console.log(" Prev: ", Array.from(siblingsAbove.children).slice(-3), "Adding: ", obj.originalElement, " Next: ", siblingsBelow.children[0], "Overwriting:", this.domList.slice(addAtIndex, nextElIndex));
        this.domList.splice(addAtIndex, nextElIndex - addAtIndex, obj);
        this.domObjectMap.set(obj.UID, obj);
        // /**
        //  * Make a copy of the list to log, only because
        //  * console log updates its references with updates in memory.
        //  */
        // let x = this.domList.slice(0);
        // console.log(x);
        return addAtIndex;
    }
    addObjectAtIndex(obj, index) {
        this.domList.splice(index, 0, obj);
        this.domObjectMap.set(obj.UID, obj);
    }
    removeObject(objectUID) {
        // /**
        //  * Make a copy of the list to log
        //  */
        // let x = domList.slice(0);
        // console.log(x);
        // Get the object by key, remove it from the map and then
        // from the list.
        let obj = this.domObjectMap.get(objectUID);
        this.domObjectMap.delete(objectUID);
        if (obj === undefined) {
            return;
        }
        if (this.domList.contains(obj)) {
            this.domList.remove(obj);
        }
        if (this.domList.length === 0 && this.fileManager !== null) {
            this.fileManager.removeRegion(this.regionKey);
        }
        // x = domList.slice(0);
        // console.log(x);
    }
    updateElementTag(objectUID, newTag) {
        let obj = this.domObjectMap.get(objectUID);
        obj.tag = newTag;
    }
    setRegionalSettings(regionSettings) {
        this.regionalSettings = regionSettings;
    }
    /**
     * Creates an object containing all necessary information for the region
     * to be rendered to the preview pane.
     *
     * @returns a MultiColumnRenderData object with the root DOM element, settings object, and
     * all child objects in the order they should be rendered.
     */
    getRegionRenderData() {
        return {
            parentRenderElement: this.regionParent,
            parentRenderSettings: this.regionalSettings,
            domObjects: this.domList
        };
    }
    /**
     * This fuction is called when a start tag is removed from view meaning
     * our parent element storing the multi-column region is removed. It
     * removes the CSS class from all of the elements so they will be
     * re-rendered in the preview window.
     */
    displayOriginalElements() {
        for (let i = 0; i < this.domList.length; i++) {
            if (this.domList[i].originalElement) {
                this.domList[i].originalElement.removeClasses([MultiColumnStyleCSS.RegionEndTag,
                    MultiColumnStyleCSS.ColumnEndTag,
                    MultiColumnStyleCSS.RegionSettings,
                    MultiColumnStyleCSS.RegionContent]);
                if (this.domList[i].originalElement.parentElement) {
                    this.domList[i].originalElement.parentElement.removeChild(this.domList[i].originalElement);
                }
            }
        }
    }
    getID() {
        return this.regionKey;
    }
    updateRenderedMarkdown() {
        /**
         * This function acts as the update loop for the multi-column regions.
         * Here we loop through all of the elements within the rendered region and
         * potentially update how things are rendered. We need to do this for
         * compatability with other plugins.
         *
         * If the multi-column region is rendered before other plugins that effect
         * content within the region our rendered data may not properly display
         * the content from the other plugin. Here we loop through the elements
         * after all plugins have had a chance to run and can make changes to the
         * DOM at this point.
         */
        for (let i = 0; i < this.domList.length; i++) {
            /**
             * Here we check for special cases
             */
            if (this.domList[i] instanceof TaskListDOMObject) {
                this.fixClonedCheckListButtons(this.domList[i]);
            }
            let elementType = this.domList[i].elementType;
            if (elementType === "unRendered") {
                continue;
            }
            /**
             * If the element is not currently a special render element we check again
             * as the original element may have been updated.
             */
            if (elementType === "undefined" ||
                elementType === "basicElement" ||
                elementType === "specialRender") {
                // If the new result returns as a special renderer we update so
                // this wont run again for this item.
                elementType = getElementRenderType(this.domList[i].originalElement);
            }
            if (elementType === "basicElement") {
                this.domList[i].elementType = "basicElement";
                continue;
            }
            if (elementType === "imageEmbed") { //ElementRenderType.fixedElementRender) {
                this.domList[i].elementType = elementType;
                continue;
            }
            if (elementType === "buttonPlugin") {
                processButtonPluginUpdate(this.domList[i]);
                continue;
            }
            if (elementType === "diceRoller" ||
                elementType === "admonitionFold" ||
                elementType === "calloutCopyButton" ||
                elementType === "dataviewPlugin" ||
                elementType === "internalEmbed" ||
                elementType === "dataviewJSCanvasEmbed" ||
                elementType === "dataviewJSEmbed" ||
                elementType === "dataviewInlineQuery") {
                this.domList[i].elementType = elementType;
                this.setUpDualRender(this.domList[i]);
                continue;
            }
        }
    }
    /**
     * This function takes in the original element and its clone and checks if
     * the element contains a task-list-item class. If so it loops through all
     * items in the list and fixes their checkboxes to properly fire an event.
     * The new checkbox calls the click function on the original checkbox so
     * compatability with other plugins *should* remain.
     * @param domElement
     * @param initalizeCheckboxes
     */
    fixClonedCheckListButtons(domElement, initalizeCheckboxes = false) {
        if (domElement.originalElement === null || domElement.clonedElement === null) {
            return;
        }
        let element = domElement.originalElement;
        let clonedElement = domElement.clonedElement;
        let clonedListCheckboxes = Array.from(clonedElement.getElementsByClassName("task-list-item"));
        let originalListCheckboxes = Array.from(element.getElementsByClassName("task-list-item"));
        if (initalizeCheckboxes === true) {
            domElement.originalCheckboxes = originalListCheckboxes;
            // When we initalize we remove the old input checkbox that contains
            // the weird callback situation causing the bug. Then we create a new
            // checkbox to replace it and set it up to fire the click event on
            // the original checkbox so functionality is restored.
            for (let i = 0; i < originalListCheckboxes.length; i++) {
                const checkbox = createEl('input');
                let originalInput = domElement.getCheckboxElement(i);
                checkbox.checked = originalInput === null || originalInput === void 0 ? void 0 : originalInput.checked;
                clonedListCheckboxes[i].replaceChild(checkbox, TaskListDOMObject.getChildCheckbox(clonedListCheckboxes[i]));
                checkbox.addClass('task-list-item-checkbox');
                checkbox.type = 'checkbox';
                checkbox.onClickEvent(() => {
                    domElement.checkboxClicked(i);
                });
            }
        }
        else {
            // Whenever we reach this point we update our list of original checkboxes
            // that may be different from our cache. This is due to how obsidian
            // changes the DOM underneath us so we need to constantly update our cache.
            domElement.originalCheckboxes = originalListCheckboxes;
        }
        // When the Tasks plugin is installed the cloned copy of the original element contains
        // an extra element for some reason. If this occurs for other reasons here we adjust
        // that to keep the clone the same as the original.
        if (clonedListCheckboxes.length > originalListCheckboxes.length) {
            for (let i = originalListCheckboxes.length; i < clonedListCheckboxes.length; i++) {
                domElement.clonedElement.removeChild(clonedListCheckboxes[i]);
            }
        }
    }
    setUpDualRender(domElement) {
        /**
         * If our element is of "specialRender" type it *may* need to be rendered
         * using the original element rather than a copy. For example, an element
         * may have an onClick event that would not get coppied to the clone.
         *
         * If we just moved these elements into the region it would get
         * moved back out into the original location in the DOM by obsidian
         * when scrolling or when the file is updated. On the next refresh it
         * would be moved back but that can lead to a region jumping
         * around as the item is moved in and out.
         *
         * Here we set up the div to contain the element and create
         * a visual only clone of it. The clone will only be visible
         * when the original is not in the multi-column region so it
         * saves us from the visual noise of the region jumping around.
         */
        let originalElement = domElement.originalElement;
        let clonedElement = domElement.clonedElement;
        let containerElement = domElement.elementContainer;
        // Get height of the original and cloned element. If the element is not currently rendered
        // it will have 0 height so we need to temporarily render it to get the height.
        let originalElementHeight = getElementClientHeight(originalElement, containerElement);
        let clonedElementHeight = getElementClientHeight(clonedElement, containerElement);
        /**
         * We only want to clone the element once to reduce GC. But if the cloned
         * element's height is not equal to the original element, this means the
         * item element has been updated somewhere else without the dom being
         * refreshed. This can occur when elements are updated by other plugins,
         * such as Dataview.
         */
        if ((clonedElement === null ||
            Math.abs(clonedElementHeight - originalElementHeight) > 10 ||
            domElement.clonedElementReadyForUpdate() === true) &&
            domElement.elementType !== "dataviewJSCanvasEmbed") {
            // console.log("Updating Cloned Element.", ElementRenderType[domElement.elementType], clonedElementHeight, originalElementHeight)
            // Update clone and reference.
            cloneElement(domElement);
        }
        if (domElement.elementType === "dataviewJSCanvasEmbed" &&
            domElement.canvasReadyForUpdate()) {
            // console.log("Updating canvas re-render")
            containerElement.appendChild(originalElement);
            if (clonedElement !== null && clonedElement.parentElement === containerElement) {
                containerElement.removeChild(clonedElement);
            }
            function cloneCanvas(originalCanvas) {
                //create a new canvas
                let clonedCanvas = originalCanvas.cloneNode(true);
                let context = clonedCanvas.getContext('2d');
                //set dimensions
                clonedCanvas.width = originalCanvas.width;
                clonedCanvas.height = originalCanvas.height;
                if (clonedCanvas.width === 0 || clonedCanvas.height === 0) {
                    // Dont want to render if the width is 0 as it throws an error
                    // would happen if the old canvas hasnt been rendered yet.
                    return clonedCanvas;
                }
                //apply the old canvas to the new one
                context.drawImage(originalCanvas, 0, 0);
                //return the new canvas
                return clonedCanvas;
            }
            let canvas = searchChildrenForNodeType(originalElement, "canvas");
            if (canvas !== null) {
                domElement.updateClonedElement(originalElement.cloneNode(true));
                clonedElement = domElement.clonedElement;
                clonedElement.addClass(MultiColumnLayoutCSS.ClonedElementType);
                clonedElement.removeClasses([MultiColumnStyleCSS.RegionContent, MultiColumnLayoutCSS.OriginalElementType]);
                containerElement.appendChild(clonedElement);
                for (let i = clonedElement.children.length - 1; i >= 0; i--) {
                    clonedElement.children[i].detach();
                }
                clonedElement.appendChild(cloneCanvas(canvas));
            }
            containerElement.removeChild(originalElement);
            containerElement.appendChild(clonedElement);
        }
        /**
         * If the container element has less than 2 children we need to move the
         * original element back into it. However some elements constantly get moved
         * in and out causing some unwanted behavior. Those element will be tagged
         * as specialSingleElementRender so we ignore those elements here.
         */
        if (domElement.elementContainer.children.length < 2 &&
            domElement.elementType !== "dataviewPlugin" &&
            domElement.elementType !== "internalEmbed" &&
            domElement.elementType !== "dataviewJSCanvasEmbed" &&
            domElement.elementType !== "dataviewJSEmbed") {
            // console.log("Updating dual rendering.", domElement, domElement.originalElement.parentElement, domElement.originalElement.parentElement?.childElementCount);
            // Make sure our CSS is up to date.
            originalElement.addClass(MultiColumnLayoutCSS.OriginalElementType);
            clonedElement.addClass(MultiColumnLayoutCSS.ClonedElementType);
            clonedElement.removeClasses([MultiColumnStyleCSS.RegionContent, MultiColumnLayoutCSS.OriginalElementType]);
            for (let i = containerElement.children.length - 1; i >= 0; i--) {
                containerElement.children[i].detach();
            }
            containerElement.appendChild(originalElement);
            containerElement.appendChild(clonedElement);
        }
    }
    /**
     * Sets up the CSS classes and the number of columns based on the passed settings.
     * @param settings The user defined settings that determine what CSS is set here.
     * @param multiColumnParent The parent object that the column divs will be created under.
     * @returns The list of column divs created under the passed parent element.
     */
    getColumnContentDivs(settings, multiColumnParent) {
        let columnContentDivs = [];
        if (typeof settings.columnSize === "string" &&
            isColumnLayout(settings.columnSize) &&
            (settings.numberOfColumns === 2 || settings.numberOfColumns === 3)) {
            settings.columnSize = validateColumnLayout(settings.columnSize);
            multiColumnParent.removeClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
            multiColumnParent.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
            buildStandardLayouts(settings, multiColumnParent, columnContentDivs);
            setMaxColumnHeight();
            return columnContentDivs;
        }
        if (typeof settings.columnSize === "string" &&
            isColumnLayout(settings.columnSize) &&
            settings.columnSize === "standard" &&
            settings.numberOfColumns > 3) {
            settings.columnSize = validateColumnLayout(settings.columnSize);
            multiColumnParent.removeClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
            multiColumnParent.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
            buildEqualLayout(settings, multiColumnParent, columnContentDivs);
            setMaxColumnHeight();
            return columnContentDivs;
        }
        let columnSizes = [];
        // If the user has defined the widths individually then we just need to create
        // each column individually with each width size.
        if (Array.isArray(settings.columnSize)) {
            columnSizes = settings.columnSize.slice();
        }
        else {
            calcColumnSizes(settings, columnSizes);
        }
        if (columnSizes.length === 0) {
            columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
        }
        for (let i = 0; i < settings.numberOfColumns; i++) {
            let sizing = getIndexedClampedArrayValue(i, columnSizes);
            columnContentDivs.push(multiColumnParent.createDiv({
                cls: `${MultiColumnStyleCSS.ColumnContent}`,
                attr: { "style": `width: ${sizing.toString()}` }
            }));
            if (i !== settings.numberOfColumns - 1) {
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
            }
        }
        for (let i = 0; i < columnContentDivs.length; i++) {
            columnContentDivs[i].addClass(MultiColumnLayoutCSS.NoFlexShrink);
        }
        setMaxColumnHeight();
        return columnContentDivs;
        function setMaxColumnHeight() {
            if (settings.columnHeight !== null) {
                multiColumnParent.removeClass(MultiColumnLayoutCSS.ContentOverflowHidden_Y);
                multiColumnParent.addClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_Y);
                columnContentDivs.forEach((column) => {
                    column.style.height = settings.columnHeight.toString();
                    column.style.maxHeight = settings.columnHeight.toString();
                    column.style.minHeight = settings.columnHeight.toString();
                });
            }
        }
    }
}
function calcColumnSizes(settings, columnSizes) {
    let layout = settings.columnSize;
    if (settings.numberOfColumns === 2) {
        switch (layout) {
            case ("standard"):
            case ("middle"):
            case ("center"):
            case ("third"):
                columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
                break;
            case ("left"):
            case ("first"):
                columnSizes.push(HTMLSizing.create().setWidth(75).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                break;
            case ("right"):
            case ("second"):
            case ("last"):
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(75).setUnits("%"));
                break;
        }
        return;
    }
    if (settings.numberOfColumns === 3) {
        switch (layout) {
            case ("standard"):
                columnSizes.push(HTMLSizing.create().setWidth(33).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(33).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(33).setUnits("%"));
                break;
            case ("left"):
            case ("first"):
                columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                break;
            case ("middle"):
            case ("center"):
            case ("second"):
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                break;
            case ("right"):
            case ("third"):
            case ("last"):
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(25).setUnits("%"));
                columnSizes.push(HTMLSizing.create().setWidth(50).setUnits("%"));
                break;
        }
    }
}
function getElementClientHeight(element, parentRenderElement) {
    let height = element.clientHeight;
    if (height === 0) {
        parentRenderElement.appendChild(element);
        height = element.clientHeight;
        parentRenderElement.removeChild(element);
    }
    return height;
}
function buildEqualLayout(settings, multiColumnParent, columnContentDivs) {
    let percent = Math.ceil(100 / settings.numberOfColumns);
    for (let i = 0; i < settings.numberOfColumns; i++) {
        columnContentDivs.push(multiColumnParent.createDiv({
            cls: `${MultiColumnStyleCSS.ColumnContent}`,
            attr: { "style": `width: ${percent}%` }
        }));
        if (i !== settings.numberOfColumns - 1) {
            multiColumnParent.createDiv({
                cls: `mcm-column-spacer`,
                attr: { "style": columnSpacingState(0, settings) }
            });
        }
    }
}
function buildStandardLayouts(settings, multiColumnParent, columnContentDivs) {
    let layout = settings.columnSize;
    if (settings.numberOfColumns === 2) {
        switch (layout) {
            case ("standard"):
            case ("middle"):
            case ("center"):
            case ("third"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoEqualColumns}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoEqualColumns}`
                }));
                break;
            case ("left"):
            case ("first"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoColumnLarge}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoColumnSmall}`
                }));
                break;
            case ("right"):
            case ("second"):
            case ("last"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoColumnSmall}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.TwoColumnLarge}`
                }));
                break;
        }
        return;
    }
    if (settings.numberOfColumns === 3) {
        switch (layout) {
            case ("standard"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeEqualColumns}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeEqualColumns}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(1, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeEqualColumns}`
                }));
                break;
            case ("left"):
            case ("first"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Large}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(1, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                break;
            case ("middle"):
            case ("center"):
            case ("second"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Large}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(1, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                break;
            case ("right"):
            case ("third"):
            case ("last"):
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(0, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Small}`
                }));
                multiColumnParent.createDiv({
                    cls: `mcm-column-spacer`,
                    attr: { "style": columnSpacingState(1, settings) }
                });
                columnContentDivs.push(multiColumnParent.createDiv({
                    cls: `${MultiColumnStyleCSS.ColumnContent} ${MultiColumnLayoutCSS.ThreeColumn_Large}`
                }));
                break;
        }
    }
}
function fixOnClick(domElement) {
    let originalElement = domElement.originalElement;
    let clonedElement = domElement.clonedElement;
    let originalButton = originalElement.getElementsByTagName("button")[0];
    let clonedButton = clonedElement.getElementsByTagName("button")[0];
    if (originalButton === undefined || clonedButton === undefined) {
        return;
    }
    clonedButton.onClickEvent((ev) => {
        originalButton.click();
    });
}
function cloneElement(domElement) {
    let originalElement = domElement.originalElement;
    let clonedElement = domElement.clonedElement;
    let containerElement = domElement.elementContainer;
    domElement.updateClonedElement(originalElement.cloneNode(true));
    clonedElement = domElement.clonedElement;
    /**
     * If we updated the cloned element, we want to also update the
     * element rendered in the parent container.
     */
    for (let i = containerElement.children.length - 1; i >= 0; i--) {
        containerElement.children[i].detach();
    }
    // Update CSS, we add cloned class and remove classes from originalElement that do not apply.
    clonedElement.addClass(MultiColumnLayoutCSS.ClonedElementType);
    clonedElement.removeClasses([MultiColumnStyleCSS.RegionContent, MultiColumnLayoutCSS.OriginalElementType]);
    containerElement.appendChild(clonedElement);
}
function processButtonPluginUpdate(domObject) {
    domObject.elementType = "buttonPlugin";
    if (domObject.clonedElementReadyForUpdate() === true) {
        cloneElement(domObject);
        fixOnClick(domObject);
    }
}

/**
 * File: /src/dom_manager/regional_managers/regionDOMManager.ts                *
 * Created Date: Sunday, May 22nd 2022, 7:46 pm                                *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2022 Cameron Robinson                                         *
 */
class StandardMultiColumnRegionManager extends RegionManager {
    renderRegionElementsToScreen() {
        this.renderColumnMarkdown(this.regionParent, this.domList, this.regionalSettings);
    }
    exportRegionElementsToPDF(pdfParentElement) {
        // Default set shadow to off for exporting PDFs
        let renderSettings = this.regionalSettings;
        renderSettings.drawShadow = false;
        this.renderColumnMarkdown(pdfParentElement, this.domList.slice(), renderSettings);
    }
    renderRegionElementsToLivePreview(parentElement) {
        this.renderColumnMarkdown(parentElement, this.domList, this.regionalSettings);
    }
    /**
     * This function takes in the data for the multi-column region and sets up the
     * user defined number of children with the proper css classes to be rendered properly.
     *
     * @param parentElement The element that the multi-column region will be rendered under.
     * @param regionElements The list of DOM objects that will be coppied under the parent object
     * @param settings The settings the user has defined for the region.
     */
    renderColumnMarkdown(parentElement, regionElements, settings) {
        let multiColumnParent = createDiv({
            cls: `${MultiColumnLayoutCSS.RegionColumnContainerDiv} \
                  ${MultiColumnLayoutCSS.ContentOverflowAutoScroll_X} \
                  ${MultiColumnLayoutCSS.ContentOverflowHidden_Y};
                  `
        });
        /**
         * Pass our parent div and settings to parser to create the required
         * column divs as children of the parent.
         */
        let columnContentDivs = this.getColumnContentDivs(settings, multiColumnParent);
        if (settings.drawShadow === true) {
            multiColumnParent.addClass(MultiColumnStyleCSS.RegionShadow);
        }
        for (let i = 0; i < columnContentDivs.length; i++) {
            if (shouldDrawColumnBorder(i, settings) === true) {
                columnContentDivs[i].addClass(MultiColumnStyleCSS.ColumnBorder);
            }
            if (settings.drawShadow === true) {
                columnContentDivs[i].addClass(MultiColumnStyleCSS.ColumnShadow);
            }
        }
        // Create markdown renderer to parse the passed markdown
        // between the tags.
        let markdownRenderChild = new obsidian.MarkdownRenderChild(multiColumnParent);
        // Remove every other child from the parent so 
        // we dont end up with multiple sets of data. This should
        // really only need to loop once for i = 0 but loop just
        // in case.
        for (let i = parentElement.children.length - 1; i >= 0; i--) {
            parentElement.children[i].detach();
        }
        parentElement.appendChild(markdownRenderChild.containerEl);
        this.appendElementsToColumns(regionElements, columnContentDivs, settings);
    }
    appendElementsToColumns(regionElements, columnContentDivs, settings) {
        let columnIndex = 0;
        for (let i = 0; i < regionElements.length; i++) {
            if (regionElements[i].tag === DOMObjectTag.none ||
                regionElements[i].tag === DOMObjectTag.columnBreak) {
                // If a standard element contains a column break tag and it is set as a pre content break tag we flip our index here.
                if (regionElements[i].tag === DOMObjectTag.none &&
                    regionElements[i].elementIsColumnBreak === ElementColumnBreakType.preBreak &&
                    (columnIndex + 1) < settings.numberOfColumns) {
                    columnIndex++;
                }
                // We store the elements in a wrapper container until we determine
                let element = createDiv({
                    cls: MultiColumnLayoutCSS.ColumnDualElementContainer,
                });
                if (columnOverflowState(columnIndex, settings) === ContentOverflowType.hidden) {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
                }
                let alignment = columnAlignmentState(columnIndex, settings);
                if (alignment === AlignmentType.center) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentCenter);
                }
                else if (alignment === AlignmentType.right) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentRight);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.AlignmentLeft);
                }
                regionElements[i].elementContainer = element;
                // Otherwise we just make a copy of the original element to display.
                let clonedElement = regionElements[i].originalElement.cloneNode(true);
                let headingCollapseElement = getHeadingCollapseElement(clonedElement);
                if (headingCollapseElement !== null) {
                    // This removes the collapse arrow from the view if it exists.
                    headingCollapseElement.detach();
                }
                regionElements[i].clonedElement = clonedElement;
                element.appendChild(clonedElement);
                if (regionElements[i] instanceof TaskListDOMObject) {
                    this.fixClonedCheckListButtons(regionElements[i], true);
                }
                if (element !== null && regionElements[i].tag !== DOMObjectTag.columnBreak) {
                    columnContentDivs[columnIndex].appendChild(element);
                }
                /**
                 * If the tag is a column break we update the column index after
                 * appending the item to the column div. This keeps the main DOM
                 * cleaner by removing other items and placing them all within
                 * a region container.
                 */
                if (regionElements[i].tag === DOMObjectTag.columnBreak &&
                    (columnIndex + 1) < settings.numberOfColumns) {
                    columnIndex++;
                }
                else if (regionElements[i].tag === DOMObjectTag.none &&
                    regionElements[i].elementIsColumnBreak === ElementColumnBreakType.postBreak &&
                    (columnIndex + 1) < settings.numberOfColumns) {
                    // If a standard element contains a column break tag and it is set as a post content break tag we flip our index here.
                    columnIndex++;
                }
            }
        }
    }
}

/**
 * File: /src/dom_manager/regional_managers/singleColumnRegionManager.ts       *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2023 Cameron Robinson                                         *
 */
class SingleColumnRegionManager extends RegionManager {
    renderRegionElementsToScreen() {
        this.renderColumnMarkdown(this.regionParent, this.domList, this.regionalSettings);
    }
    exportRegionElementsToPDF(pdfParentElement) {
        // Default set shadow to off for exporting PDFs
        let renderSettings = this.regionalSettings;
        renderSettings.drawShadow = false;
        this.renderColumnMarkdown(pdfParentElement, this.domList.slice(), renderSettings);
    }
    renderRegionElementsToLivePreview(parentElement) {
        this.renderColumnMarkdown(parentElement, this.domList, this.regionalSettings);
    }
    /**
     * This function takes in the data for the multi-column region and sets up the
     * user defined number of children with the proper css classes to be rendered properly.
     *
     * @param parentElement The element that the multi-column region will be rendered under.
     * @param regionElements The list of DOM objects that will be coppied under the parent object
     * @param settings The settings the user has defined for the region.
     */
    renderColumnMarkdown(parentElement, regionElements, settings) {
        let multiColumnParent = createDiv({
            cls: `${MultiColumnLayoutCSS.RegionColumnContainerDiv} \
                  ${MultiColumnLayoutCSS.ContentOverflowAutoScroll_X} \
                  ${MultiColumnLayoutCSS.ContentOverflowHidden_Y};
                  `
        });
        if (isLeftLayout(this.regionalSettings.columnPosition)) {
            multiColumnParent.addClass(MultiColumnLayoutCSS.SingleColumnLeftLayout);
        }
        else if (isRightLayout(this.regionalSettings.columnPosition)) {
            multiColumnParent.addClass(MultiColumnLayoutCSS.SingleColumnRightLayout);
        }
        else {
            multiColumnParent.addClass(MultiColumnLayoutCSS.SingleColumnCenterLayout);
        }
        /**
         * Pass our parent div and settings to parser to create the required
         * column divs as children of the parent.
         */
        let columnContentDiv = this.createColumnContentDivs(multiColumnParent);
        if (shouldDrawColumnBorder(0, settings) === true) {
            columnContentDiv.addClass(MultiColumnStyleCSS.ColumnBorder);
        }
        if (settings.drawShadow === true) {
            columnContentDiv.addClass(MultiColumnStyleCSS.ColumnShadow);
        }
        // Create markdown renderer to parse the passed markdown
        // between the tags.
        let markdownRenderChild = new obsidian.MarkdownRenderChild(multiColumnParent);
        // Remove every other child from the parent so 
        // we dont end up with multiple sets of data. This should
        // really only need to loop once for i = 0 but loop just
        // in case.
        for (let i = parentElement.children.length - 1; i >= 0; i--) {
            parentElement.children[i].detach();
        }
        parentElement.appendChild(markdownRenderChild.containerEl);
        this.appendElementsToColumns(regionElements, columnContentDiv, settings);
    }
    appendElementsToColumns(regionElements, columnContentDiv, settings) {
        for (let i = 0; i < regionElements.length; i++) {
            if (regionElements[i].tag === DOMObjectTag.none ||
                regionElements[i].tag === DOMObjectTag.columnBreak) {
                // We store the elements in a wrapper container until we determine
                let element = createDiv({
                    cls: MultiColumnLayoutCSS.ColumnDualElementContainer,
                });
                regionElements[i].elementContainer = element;
                if (columnOverflowState(0, settings) === ContentOverflowType.hidden) {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
                }
                let alignment = columnAlignmentState(0, settings);
                if (alignment === AlignmentType.center) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentCenter);
                }
                else if (alignment === AlignmentType.right) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentRight);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.AlignmentLeft);
                }
                // Otherwise we just make a copy of the original element to display.
                let clonedElement = regionElements[i].originalElement.cloneNode(true);
                let headingCollapseElement = getHeadingCollapseElement(clonedElement);
                if (headingCollapseElement !== null) {
                    // This removes the collapse arrow from the view if it exists.
                    headingCollapseElement.detach();
                }
                regionElements[i].clonedElement = clonedElement;
                element.appendChild(clonedElement);
                if (regionElements[i] instanceof TaskListDOMObject) {
                    this.fixClonedCheckListButtons(regionElements[i], true);
                }
                if (element !== null) {
                    columnContentDiv.appendChild(element);
                }
            }
        }
    }
    createColumnContentDivs(multiColumnParent) {
        let contentDiv = multiColumnParent.createDiv({
            cls: `${MultiColumnStyleCSS.ColumnContent}`
        });
        if (this.regionalSettings.columnSize === "small") {
            contentDiv.addClass(`${MultiColumnLayoutCSS.SingleColumnSmall}`);
        }
        else if (this.regionalSettings.columnSize === "large") {
            contentDiv.addClass(`${MultiColumnLayoutCSS.SingleColumnLarge}`);
        }
        else if (this.regionalSettings.columnSize === "full") {
            contentDiv.addClass(`${MultiColumnLayoutCSS.SingleColumnFull}`);
        }
        else {
            contentDiv.addClass(`${MultiColumnLayoutCSS.SingleColumnMed}`);
        }
        return contentDiv;
    }
}
function isLeftLayout(layout) {
    if (layout === "left" ||
        layout === "first") {
        return true;
    }
    return false;
}
function isRightLayout(layout) {
    if (layout === "right" ||
        layout === "third" ||
        layout === "last") {
        return true;
    }
    return false;
}

/**
 * File: /src/dom_manager/regional_managers/autoLayoutRegionManager.ts         *
 * Created Date: Sunday, May 22nd 2022, 10:23 pm                               *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2022 Cameron Robinson                                         *
 */
class AutoLayoutRegionManager extends RegionManager {
    constructor(data, balanceIterations = 5) {
        super(data);
        this.autoLayoutBalanceIterations = 5;
        this.previousColumnHeights = [];
        this.autoLayoutBalanceIterations = balanceIterations;
        this.docReflow = data.regionalSettings.fullDocReflow;
    }
    renderRegionElementsToScreen() {
        this.renderColumnMarkdown(this.regionParent, this.domList, this.regionalSettings);
    }
    exportRegionElementsToPDF(pdfParentElement) {
        // Default set shadow to off for exporting PDFs
        let renderSettings = this.regionalSettings;
        renderSettings.drawShadow = false;
        this.renderColumnMarkdown(pdfParentElement, this.domList.slice(), renderSettings);
    }
    renderRegionElementsToLivePreview(parentElement) {
        this.renderColumnMarkdown(parentElement, this.domList, this.regionalSettings);
    }
    /**
     * This function takes in the data for the multi-column region and sets up the
     * user defined number of children with the proper css classes to be rendered properly.
     *
     * @param parentElement The element that the multi-column region will be rendered under.
     * @param regionElements The list of DOM objects that will be coppied under the parent object
     * @param settings The settings the user has defined for the region.
     */
    renderColumnMarkdown(parentElement, regionElements, settings) {
        let multiColumnParent = createDiv({
            cls: `${MultiColumnLayoutCSS.RegionColumnContainerDiv} \
                  ${MultiColumnLayoutCSS.ContentOverflowAutoScroll_X} \
                  ${MultiColumnLayoutCSS.ContentOverflowHidden_Y};
                  `
        });
        this.columnParent = multiColumnParent;
        /**
         * Pass our parent div and settings to parser to create the required
         * column divs as children of the parent.
         */
        this.columnDivs = this.getColumnContentDivs(settings, multiColumnParent);
        if (settings.drawShadow === true) {
            multiColumnParent.addClass(MultiColumnStyleCSS.RegionShadow);
        }
        for (let i = 0; i < this.columnDivs.length; i++) {
            if (shouldDrawColumnBorder(i, settings) === true) {
                this.columnDivs[i].addClass(MultiColumnStyleCSS.ColumnBorder);
            }
            if (settings.drawShadow === true) {
                this.columnDivs[i].addClass(MultiColumnStyleCSS.ColumnShadow);
            }
        }
        // Remove every other child from the parent so 
        // we dont end up with multiple sets of data. This should
        // really only need to loop once for i = 0 but loop just
        // in case.
        for (let i = parentElement.children.length - 1; i >= 0; i--) {
            parentElement.children[i].detach();
        }
        parentElement.appendChild(multiColumnParent);
        this.appendElementsToColumns(regionElements, this.columnDivs, settings);
    }
    appendElementsToColumns(regionElements, columnContentDivs, settings) {
        function balanceElements() {
            let totalHeight = regionElements.map((el, index) => {
                // We only want to attempt to update the elementRenderedHeight if it is 0 and if it is not an unrendered element such as a endregion tag.
                if (el.elementRenderedHeight === 0 &&
                    el.tag !== DOMObjectTag.columnBreak &&
                    el.tag !== DOMObjectTag.endRegion &&
                    el.tag !== DOMObjectTag.regionSettings &&
                    el.tag !== DOMObjectTag.startRegion) {
                    // Add element to rendered div so we can extract the rendered height.
                    columnContentDivs[0].appendChild(el.originalElement);
                    el.elementRenderedHeight = el.originalElement.clientHeight;
                    columnContentDivs[0].removeChild(el.originalElement);
                }
                return el.elementRenderedHeight;
            }).reduce((prev, curr) => { return prev + curr; }, 0);
            let maxColumnContentHeight = Math.trunc(totalHeight / settings.numberOfColumns);
            for (let i = 0; i < columnContentDivs.length; i++) {
                for (let j = columnContentDivs[i].children.length - 1; j >= 0; j--) {
                    columnContentDivs[i].children[j].detach();
                }
            }
            let columnIndex = 0;
            let currentColumnHeight = 0;
            function checkShouldSwitchColumns(nextElementHeight) {
                if (currentColumnHeight + nextElementHeight > maxColumnContentHeight &&
                    (columnIndex + 1) < settings.numberOfColumns) {
                    columnIndex++;
                    currentColumnHeight = 0;
                }
            }
            for (let i = 0; i < regionElements.length; i++) {
                if (regionElements[i].tag === DOMObjectTag.none ||
                    regionElements[i].tag === DOMObjectTag.columnBreak) {
                    /**
                     * Here we check if we need to swap to the next column for the current element.
                     * If the user wants to keep headings with the content below it we also make sure
                     * that the last item in a column is not a header element by using the header and
                     * the next element's height as the height value.
                     */
                    if (hasHeader(regionElements[i].originalElement) === true) { // TODO: Add this as selectable option.
                        let headerAndNextElementHeight = regionElements[i].elementRenderedHeight;
                        if (i < regionElements.length - 1) {
                            headerAndNextElementHeight += regionElements[i + 1].elementRenderedHeight;
                        }
                        checkShouldSwitchColumns(headerAndNextElementHeight);
                    }
                    else {
                        checkShouldSwitchColumns(regionElements[i].elementRenderedHeight);
                    }
                    currentColumnHeight += regionElements[i].elementRenderedHeight;
                    /**
                     * We store the elements in a wrapper container until we determine if we want to
                     * use the original element or a clone of the element. This helps us by allowing
                     * us to create a visual only clone while the update loop moves the original element
                     * into the columns.
                     */
                    let element = createDiv({
                        cls: MultiColumnLayoutCSS.ColumnDualElementContainer,
                    });
                    regionElements[i].elementContainer = element;
                    if (columnOverflowState(columnIndex, settings) === ContentOverflowType.hidden) {
                        element.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
                    }
                    else {
                        element.addClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
                    }
                    let alignment = columnAlignmentState(columnIndex, settings);
                    if (alignment === AlignmentType.center) {
                        element.addClass(MultiColumnLayoutCSS.AlignmentCenter);
                    }
                    else if (alignment === AlignmentType.right) {
                        element.addClass(MultiColumnLayoutCSS.AlignmentRight);
                    }
                    else {
                        element.addClass(MultiColumnLayoutCSS.AlignmentLeft);
                    }
                    let clonedElement = regionElements[i].clonedElement;
                    if (regionElements[i].clonedElement === null) {
                        clonedElement = regionElements[i].originalElement.cloneNode(true);
                        let headingCollapseElement = getHeadingCollapseElement(clonedElement);
                        if (headingCollapseElement !== null) {
                            // This removes the collapse arrow from the view if it exists.
                            headingCollapseElement.detach();
                        }
                        regionElements[i].clonedElement = clonedElement;
                    }
                    element.appendChild(clonedElement);
                    if (regionElements[i] instanceof TaskListDOMObject) {
                        this.fixClonedCheckListButtons(regionElements[i], true);
                    }
                    if (element !== null &&
                        columnContentDivs[columnIndex] &&
                        regionElements[i].tag !== DOMObjectTag.columnBreak) {
                        columnContentDivs[columnIndex].appendChild(element);
                        regionElements[i].elementRenderedHeight = element.clientHeight;
                    }
                    /**
                     * If the tag is a column break we update the column index after
                     * appending the item to the column div. This keeps the main DOM
                     * cleaner by removing other items and placing them all within
                     * a region container.
                     *
                     * Removing the end column tag as an option for now.
                     */
                    // if (regionElements[i].tag === DOMObjectTag.columnBreak &&
                    //    (columnIndex + 1) < settings.numberOfColumns) {
                    //     columnIndex++;
                    //     currentColumnHeight = 0;
                    // }
                }
            }
        }
        /**
         * Attempt to balanced the elements. We need to iterate over the elements multiple times because
         * our initial balance estimate may not be perfectly balanced due to different column widths causing
         * elements within them to be of different heights. This can cause the elements to jump around on
         * subsiquent update loops which is not ideal. Here we render the elements to the screen and update
         * their height after being rendered into the estimated position.
         *
         * Once everything is rendered we check all of the column heights against our last iteration and
         * if nothing has changed we know we are balanced.
         *
         * There is probably a better way of accomplishing this task but this works for the time being.
         */
        for (let i = 0; i < this.autoLayoutBalanceIterations; i++) {
            balanceElements();
            let balanced = true;
            for (let j = 0; j < columnContentDivs.length; j++) {
                // If the column heights are undefined we set default to zero so not to encounter an error.
                if (!this.previousColumnHeights[j]) {
                    this.previousColumnHeights.push(0);
                }
                // if this render height is not the same as the previous height we are still balancing.
                if (this.previousColumnHeights[j] !== columnContentDivs[j].clientHeight) {
                    this.previousColumnHeights[j] = columnContentDivs[j].clientHeight;
                    balanced = false;
                }
            }
            // if we made it out of the loop and all of the columns are the same height as last update
            // we're balanced so we can break out of the loop.
            if (balanced === true) {
                break;
            }
        }
    }
    updateRenderedMarkdown() {
        if (this.docReflow === true) {
            super.updateRenderedMarkdown();
            return;
        }
        for (let i = 0; i < this.domList.length; i++) {
            let el = this.domList[i];
            let originalClientHeight = 0;
            if (el.originalElement) {
                originalClientHeight = el.originalElement.clientHeight;
            }
            let clonedClientHeight = 0;
            if (el.clonedElement) {
                clonedClientHeight = el.clonedElement.clientHeight;
            }
            if (originalClientHeight < clonedClientHeight) {
                this.domList[i].elementRenderedHeight = clonedClientHeight;
            }
            else {
                this.domList[i].elementRenderedHeight = originalClientHeight;
            }
        }
        let validColumns = true;
        if (this.columnParent !== null && this.columnDivs !== null && this.columnDivs !== undefined &&
            this.columnDivs.length === this.regionalSettings.numberOfColumns) {
            let totalHeight = this.domList.map((el, index) => {
                // We only want to attempt to update the elementRenderedHeight if it is 0 and if it is not an unrendered element such as a endregion tag.
                if (el.elementRenderedHeight === 0 &&
                    el.tag !== DOMObjectTag.columnBreak &&
                    el.tag !== DOMObjectTag.endRegion &&
                    el.tag !== DOMObjectTag.regionSettings &&
                    el.tag !== DOMObjectTag.startRegion) {
                    // Add element to rendered div so we can extract the rendered height.
                    this.columnParent.appendChild(el.originalElement);
                    el.elementRenderedHeight = el.originalElement.clientHeight;
                    this.columnParent.removeChild(el.originalElement);
                }
                return el.elementRenderedHeight;
            }).reduce((prev, curr) => { return prev + curr; }, 0);
            let maxColumnContentHeight = Math.trunc(totalHeight / this.regionalSettings.numberOfColumns);
            for (let i = 0; i < this.columnDivs.length - 1; i++) {
                let columnHeight = 0;
                for (let j = 0; j < this.columnDivs[i].children.length; j++) {
                    columnHeight += this.columnDivs[i].children[j].clientHeight;
                }
                if (columnHeight > maxColumnContentHeight) {
                    validColumns = false;
                    break;
                }
            }
        }
        if (validColumns === false) {
            this.renderColumnMarkdown(this.regionParent, this.domList, this.regionalSettings);
        }
        super.updateRenderedMarkdown();
    }
}

/**
 * File: /src/dom_manager/regional_managers/reflowRegionManager.ts             *
 * Created Date: Thursday, May 11th 2023, 9:59 pm                              *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2023 Cameron Robinson                                         *
 */
class ReflowRegionManager extends RegionManager {
    renderRegionElementsToScreen() {
        this.renderColumnMarkdown(this.regionParent, this.domList, this.regionalSettings);
    }
    exportRegionElementsToPDF(pdfParentElement) {
        // Default set shadow to off for exporting PDFs
        let renderSettings = this.regionalSettings;
        renderSettings.drawShadow = false;
        this.renderColumnMarkdown(pdfParentElement, this.domList.slice(), renderSettings);
    }
    renderRegionElementsToLivePreview(parentElement) {
        this.renderColumnMarkdown(parentElement, this.domList, this.regionalSettings);
    }
    /**
     * This function takes in the data for the multi-column region and sets up the
     * user defined number of children with the proper css classes to be rendered properly.
     *
     * @param parentElement The element that the multi-column region will be rendered under.
     * @param regionElements The list of DOM objects that will be coppied under the parent object
     * @param settings The settings the user has defined for the region.
     */
    renderColumnMarkdown(parentElement, regionElements, settings) {
        let verticalColumnParent = createDiv({
            cls: ``
        });
        /**
         * Pass our parent div and settings to parser to create the required
         * column divs as children of the parent.
         */
        // Remove every other child from the parent so 
        // we dont end up with multiple sets of data. This should
        // really only need to loop once for i = 0 but loop just
        // in case.
        for (let i = parentElement.children.length - 1; i >= 0; i--) {
            parentElement.children[i].detach();
        }
        parentElement.appendChild(verticalColumnParent);
        this.appendElementsToColumns(verticalColumnParent, regionElements, settings);
    }
    appendElementsToColumns(verticalColumnParent, regionElements, settings) {
        this.domList.forEach((el, index) => {
            // We only want to attempt to update the elementRenderedHeight if it is 0 and if it is not an unrendered element such as a endregion tag.
            if (el.elementRenderedHeight === 0 &&
                el.tag !== DOMObjectTag.columnBreak &&
                el.tag !== DOMObjectTag.endRegion &&
                el.tag !== DOMObjectTag.regionSettings &&
                el.tag !== DOMObjectTag.startRegion) {
                // Add element to rendered div so we can extract the rendered height.
                verticalColumnParent.appendChild(el.originalElement);
                el.elementRenderedHeight = el.originalElement.clientHeight;
                verticalColumnParent.removeChild(el.originalElement);
            }
        });
        let maxColumnContentHeight = settings.columnHeight.sizeValue;
        let columnIndex = 0;
        let currentColumnHeight = 0;
        let divCount = 1;
        let colDivsCallback = (settings, multiColumnParent) => {
            return this.getColumnContentDivs(settings, multiColumnParent);
        };
        let columns = getFormattedColumnDivs(settings, verticalColumnParent, colDivsCallback, divCount);
        for (let i = 0; i < regionElements.length; i++) {
            if (regionElements[i].tag === DOMObjectTag.none ||
                regionElements[i].tag === DOMObjectTag.columnBreak) {
                /**
                 * Here we check if we need to swap to the next column for the current element.
                 * If the user wants to keep headings with the content below it we also make sure
                 * that the last item in a column is not a header element by using the header and
                 * the next element's height as the height value.
                 */
                if (hasHeader(regionElements[i].originalElement) === true) { // TODO: Add this as selectable option.
                    let headerAndNextElementHeight = regionElements[i].elementRenderedHeight;
                    if (i < regionElements.length - 1) {
                        headerAndNextElementHeight += regionElements[i + 1].elementRenderedHeight;
                    }
                    checkShouldSwitchColumns(headerAndNextElementHeight);
                }
                else {
                    checkShouldSwitchColumns(regionElements[i].elementRenderedHeight);
                }
                currentColumnHeight += regionElements[i].elementRenderedHeight;
                /**
                 * We store the elements in a wrapper container until we determine if we want to
                 * use the original element or a clone of the element. This helps us by allowing
                 * us to create a visual only clone while the update loop moves the original element
                 * into the columns.
                 */
                let element = createDiv({
                    cls: MultiColumnLayoutCSS.ColumnDualElementContainer,
                });
                regionElements[i].elementContainer = element;
                if (columnOverflowState(columnIndex, settings) === ContentOverflowType.hidden) {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowHidden_X);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.ContentOverflowAutoScroll_X);
                }
                let alignment = columnAlignmentState(columnIndex, settings);
                if (alignment === AlignmentType.center) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentCenter);
                }
                else if (alignment === AlignmentType.right) {
                    element.addClass(MultiColumnLayoutCSS.AlignmentRight);
                }
                else {
                    element.addClass(MultiColumnLayoutCSS.AlignmentLeft);
                }
                let clonedElement = regionElements[i].clonedElement;
                if (regionElements[i].clonedElement === null) {
                    clonedElement = regionElements[i].originalElement.cloneNode(true);
                    let headingCollapseElement = getHeadingCollapseElement(clonedElement);
                    if (headingCollapseElement !== null) {
                        // This removes the collapse arrow from the view if it exists.
                        headingCollapseElement.detach();
                    }
                    regionElements[i].clonedElement = clonedElement;
                }
                element.appendChild(clonedElement);
                if (regionElements[i] instanceof TaskListDOMObject) {
                    this.fixClonedCheckListButtons(regionElements[i], true);
                }
                if (element !== null &&
                    columns[columnIndex] &&
                    regionElements[i].tag !== DOMObjectTag.columnBreak) {
                    columns[columnIndex].appendChild(element);
                    regionElements[i].elementRenderedHeight = element.clientHeight;
                }
                /**
                 * If the tag is a column break we update the column index after
                 * appending the item to the column div. This keeps the main DOM
                 * cleaner by removing other items and placing them all within
                 * a region container.
                 */
                if (regionElements[i].tag === DOMObjectTag.columnBreak) {
                    checkCreateNewColumns();
                    columnIndex++;
                    currentColumnHeight = 0;
                }
            }
        }
        function checkShouldSwitchColumns(nextElementHeight) {
            if (currentColumnHeight + nextElementHeight < maxColumnContentHeight) {
                return;
            }
            checkCreateNewColumns();
            columnIndex++;
            currentColumnHeight = 0;
        }
        function checkCreateNewColumns() {
            if ((columnIndex + 1) >= columns.length) {
                divCount++;
                columns = columns.concat(getFormattedColumnDivs(settings, verticalColumnParent, colDivsCallback, divCount));
            }
        }
    }
}
function getFormattedColumnDivs(settings, verticalColumnParent, getColumnContentDivs, divCount) {
    let multiColumnParent = verticalColumnParent.createDiv({
        cls: `${MultiColumnLayoutCSS.RegionColumnContainerDiv} \
              ${MultiColumnLayoutCSS.ContentOverflowAutoScroll_X} \
              ${MultiColumnLayoutCSS.ContentOverflowHidden_Y};
              `
    });
    if (divCount > 1) {
        multiColumnParent.addClass(`${MultiColumnLayoutCSS.ReflowContainerDiv}`);
    }
    let columnDivs = getColumnContentDivs(settings, multiColumnParent);
    if (settings.drawShadow === true) {
        multiColumnParent.addClass(MultiColumnStyleCSS.RegionShadow);
    }
    for (let i = 0; i < columnDivs.length; i++) {
        if (shouldDrawColumnBorder(i, settings) === true) {
            columnDivs[i].addClass(MultiColumnStyleCSS.ColumnBorder);
        }
        if (settings.drawShadow === true) {
            columnDivs[i].addClass(MultiColumnStyleCSS.ColumnShadow);
        }
    }
    return columnDivs;
}

/**
 * File: /src/dom_manager/regional_managers/regionManagerContainer.ts          *
 * Created Date: Sunday, May 22nd 2022, 7:50 pm                                *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2022 Cameron Robinson                                         *
 */
/**
 * This class acts as an abstraction for the actual regional manager. It is used to update the
 * subclass of RegionalManager depending on user preferences to make rendering more simplified.
 */
class RegionManagerContainer {
    constructor(parentFileManager, regionKey, rootElement, regionParent) {
        this.region = new StandardMultiColumnRegionManager(createDefaultRegionManagerData(regionParent, parentFileManager, regionKey, rootElement));
    }
    getRegion() {
        return this.region;
    }
    setRegionSettings(settingsText) {
        let regionalSettings = parseColumnSettings(settingsText);
        if (regionalSettings.numberOfColumns === 1) {
            regionalSettings = parseSingleColumnSettings(settingsText, regionalSettings);
        }
        return this.setRegionParsedSettings(regionalSettings);
    }
    setRegionParsedSettings(regionalSettings) {
        this.region.setRegionalSettings(regionalSettings);
        if (regionalSettings.numberOfColumns === 1) {
            if (this.region instanceof SingleColumnRegionManager === false) {
                // console.debug("Converting region to single column.")
                this.convertToSingleColumn();
            }
        }
        else if (regionalSettings.autoLayout === true) {
            if (this.region instanceof AutoLayoutRegionManager === false) {
                // console.debug("Converting region to auto layout.")
                this.convertToAutoLayout();
            }
        }
        else if (regionalSettings.fullDocReflow === true) {
            if (this.region instanceof ReflowRegionManager === false) {
                // console.debug("Converting region to auto layout.")
                this.convertToDocReflow();
            }
        }
        else if (regionalSettings.numberOfColumns >= 2) {
            if (this.region instanceof StandardMultiColumnRegionManager === false) {
                // console.debug("Converting region to standard multi-column")
                this.convertToStandardMultiColumn();
            }
        }
        return this.region;
    }
    convertToSingleColumn() {
        let data = this.region.getRegionData();
        this.region = new SingleColumnRegionManager(data);
        return this.region;
    }
    convertToStandardMultiColumn() {
        let data = this.region.getRegionData();
        this.region = new StandardMultiColumnRegionManager(data);
        return this.region;
    }
    convertToAutoLayout() {
        let data = this.region.getRegionData();
        this.region = new AutoLayoutRegionManager(data);
        return this.region;
    }
    convertToDocReflow() {
        let data = this.region.getRegionData();
        this.region = new ReflowRegionManager(data);
        return this.region;
    }
}
function createDefaultRegionManagerData(regionParent, fileManager, regionKey, rootElement) {
    return {
        domList: [],
        domObjectMap: new Map(),
        regionParent: regionParent,
        fileManager: fileManager,
        regionalSettings: getDefaultMultiColumnSettings(),
        regionKey: regionKey,
        rootElement: rootElement
    };
}

/*
 * File: multi-column-markdown/src/domManager.ts
 * Created Date: Saturday, January 30th 2022, 3:16:32 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
/**
 * This class handles the global managers keeping track of all open files that
 * contain MCM-Regions.
 */
class GlobalDOMManager {
    constructor() {
        this.managers = new Map();
    }
    removeFileManagerCallback(key) {
        if (this.managers.has(key) === true) {
            this.managers.delete(key);
        }
    }
    getFileManager(key) {
        let fileManager = null;
        if (this.managers.has(key) === true) {
            fileManager = this.managers.get(key);
        }
        else {
            fileManager = createFileDOMManager(this, key);
            this.managers.set(key, fileManager);
        }
        return fileManager;
    }
    getAllFileManagers() {
        return Array.from(this.managers.values());
    }
}
function createFileDOMManager(parentManager, fileKey) {
    let regionMap = new Map();
    let hasStartTag = false;
    function removeRegion(regionKey) {
        let regionContainer = regionMap.get(regionKey);
        if (regionContainer === undefined) {
            return;
        }
        let regionalManager = regionContainer.getRegion();
        regionalManager.displayOriginalElements();
        regionMap.delete(regionKey);
        if (regionMap.size === 0) {
            parentManager.removeFileManagerCallback(fileKey);
        }
    }
    function createRegionalManager(regionKey, rootElement, errorElement, renderRegionElement) {
        //TODO: Use the error element whenever there is an error.
        let regonalContainer = new RegionManagerContainer(this, regionKey, rootElement, renderRegionElement);
        regionMap.set(regionKey, regonalContainer);
        return regonalContainer.getRegion();
    }
    function getRegionalContainer(regionKey) {
        let regonalManager = null;
        if (regionMap.has(regionKey) === true) {
            regonalManager = regionMap.get(regionKey);
        }
        return regonalManager;
    }
    function getAllRegionalManagers() {
        let containers = Array.from(regionMap.values());
        let regions = containers.map((curr) => { return curr.getRegion(); });
        return regions;
    }
    function setHasStartTag() {
        hasStartTag = true;
    }
    function getHasStartTag() {
        return hasStartTag;
    }
    function getNumberOfRegions() {
        return regionMap.size;
    }
    function checkKeyExists(checkKey) {
        return regionMap.has(checkKey);
    }
    return { regionMap: regionMap,
        hasStartTag: hasStartTag,
        createRegionalManager: createRegionalManager,
        getRegionalContainer: getRegionalContainer,
        getAllRegionalManagers: getAllRegionalManagers,
        removeRegion: removeRegion,
        setHasStartTag: setHasStartTag,
        getHasStartTag: getHasStartTag,
        getNumberOfRegions: getNumberOfRegions,
        checkKeyExists: checkKeyExists
    };
}

/*
 * Filename: multi-column-markdown/src/live_preview/MultiColumnMarkdown_Widget.ts
 * Created Date: Tuesday, August 16th 2022, 4:38:43 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
class MultiColumnMarkdown_LivePreview_Widget extends view.WidgetType {
    constructor(contentData, userSettings, sourceFile, settingsText = "") {
        super();
        this.domList = [];
        this.regionSettings = getDefaultMultiColumnSettings();
        this.sourcePath = "";
        this.contentData = contentData;
        this.settingsText = settingsText;
        this.sourceFile = sourceFile;
        if (this.sourceFile) {
            this.sourcePath = sourceFile.path;
        }
        if (userSettings !== null) {
            this.regionSettings = userSettings;
        }
        // Render the markdown content to our temp parent element.
        this.tempParent = createDiv();
        let elementMarkdownRenderer = new obsidian.MarkdownRenderChild(this.tempParent);
        obsidian.MarkdownRenderer.renderMarkdown(this.contentData, this.tempParent, this.sourcePath, elementMarkdownRenderer);
        // take all elements, in order, and create our DOM list.
        let arr = Array.from(this.tempParent.children);
        for (let i = 0; i < arr.length; i++) {
            let el = this.fixElementRender(arr[i]);
            this.domList.push(new DOMObject(el, [""]));
        }
        // Set up the region manager data before then creating our region manager.
        let regionData = {
            domList: this.domList,
            domObjectMap: new Map(),
            regionParent: createDiv(),
            fileManager: null,
            regionalSettings: this.regionSettings,
            regionKey: getUID(),
            rootElement: createDiv()
        };
        // Finally setup the type of region manager required.
        if (this.regionSettings.numberOfColumns === 1) {
            this.regionSettings = parseSingleColumnSettings(this.settingsText, this.regionSettings);
            this.regionManager = new SingleColumnRegionManager(regionData);
        }
        else if (this.regionSettings.autoLayout === true) {
            this.regionManager = new AutoLayoutRegionManager(regionData, 1);
        }
        else {
            this.regionManager = new StandardMultiColumnRegionManager(regionData);
        }
    }
    fixElementRender(el) {
        let fixedEl = fixImageRender(el, this.sourcePath);
        fixedEl = fixPDFRender(fixedEl, this.sourcePath);
        fixedEl = fixFileEmbed(fixedEl, this.sourcePath);
        fixedEl = fixTableRender(fixedEl);
        fixedEl = fixUnSupportedRender(fixedEl);
        return fixedEl;
    }
    toDOM() {
        // Create our element to hold all of the live preview elements.
        let el = document.createElement("div");
        el.className = "mcm-cm-preview";
        /**
         * For situations where we need to know the rendered height, AutoLayout,
         * the element must be rendered onto the screen to get the info, even if
         * only for a moment. Here we attempt to get a leaf from the app so we
         * can briefly append our element, check any data if required, and then
         * remove it.
         */
        let leaf = null;
        if (app) {
            let leaves = app.workspace.getLeavesOfType("markdown");
            if (leaves.length > 0) {
                leaf = leaves[0];
            }
        }
        if (this.regionManager) {
            if (leaf) {
                leaf.view.containerEl.appendChild(el);
            }
            this.regionManager.renderRegionElementsToLivePreview(el);
            if (leaf) {
                leaf.view.containerEl.removeChild(el);
            }
        }
        fixExternalLinks(el);
        return el;
    }
}
class MultiColumnMarkdown_DefinedSettings_LivePreview_Widget extends view.WidgetType {
    constructor(contentData) {
        super();
        this.contentData = contentData;
    }
    toDOM() {
        // Create our element to hold all of the live preview elements.
        let el = document.createElement("div");
        el.className = "mcm-cm-settings-preview";
        let labelDiv = el.createDiv();
        let label = labelDiv.createSpan({
            cls: "mcm-col-settings-preview"
        });
        label.textContent = "Column Settings:";
        let list = el.createEl("ul");
        let lines = this.contentData.split("\n");
        for (let i = 1; i < lines.length - 1; i++) {
            let item = list.createEl("li");
            item.textContent = lines[i];
        }
        return el;
    }
}
const OBSIDIAN_LIVEPREVIEW_TABLE_CLASSES = "cm-embed-block markdown-rendered cm-table-widget show-indentation-guide";
function fixTableRender(el) {
    if (el.tagName !== "TABLE") {
        return el;
    }
    let parentDiv = createDiv({
        "cls": OBSIDIAN_LIVEPREVIEW_TABLE_CLASSES
    });
    parentDiv.appendChild(el);
    return parentDiv;
}
function fixFileEmbed(el, source) {
    let embed = getEmbed(el);
    if (embed === null) {
        return el;
    }
    let alt = embed.getAttr("alt");
    let src = embed.getAttr("src");
    if (src === null) {
        return el;
    }
    let file = app.metadataCache.getFirstLinkpathDest(src, source);
    if (file === null) {
        return el;
    }
    if (isMDExtension(file.extension) === false) {
        return el;
    }
    // If we found the resource path then we update the element to be a proper PDF render.
    let fixedEl = createDiv({
        cls: "internal-embed markdown-embed inline-embed is-loaded",
        attr: {
            "tabindex": "-1",
            "contenteditable": "false"
        }
    });
    fixedEl.setAttr("alt", alt);
    fixedEl.setAttr("src", `app://obsidian.md/${src}`);
    fixedEl.appendChild(createDiv({
        "cls": "embed-title markdown-embed-title",
    }));
    let contentEl = fixedEl.createDiv({
        "cls": `markdown-embed-content`,
    });
    let paragraph = contentEl.createEl("p", {
        "cls": `${MultiColumnStyleCSS.RegionErrorMessage}, ${MultiColumnStyleCSS.SmallFont}`
    });
    paragraph.innerText = "File embeds are not supported in Live Preview.\nPlease use reading mode to view.";
    return fixedEl;
}
function fixPDFRender(el, source) {
    let embed = getEmbed(el);
    if (embed === null) {
        return el;
    }
    let alt = embed.getAttr("alt");
    let src = embed.getAttr("src");
    if (src === null) {
        return el;
    }
    let file = app.metadataCache.getFirstLinkpathDest(src, source);
    if (file === null) {
        return el;
    }
    if (isPDFExtension(file.extension) === false) {
        return el;
    }
    let resourcePath = app.vault.getResourcePath(file);
    // If we found the resource path then we update the element to be a proper PDF render.
    let fixedEl = createDiv({
        cls: "internal-embed pdf-embed is-loaded",
    });
    fixedEl.setAttr("alt", alt);
    let iframe = fixedEl.createEl("iframe", {
        "attr": {
            "style": "width: 100%; height: 100%;"
        }
    });
    iframe.setAttr("src", resourcePath);
    return fixedEl;
}
function fixImageRender(el, source) {
    let embed = getEmbed(el);
    if (embed === null) {
        return el;
    }
    let customWidth = embed.attributes.getNamedItem("width");
    let alt = embed.getAttr("alt");
    let src = embed.getAttr("src");
    if (src === null) {
        return el;
    }
    let file = app.metadataCache.getFirstLinkpathDest(src, source);
    if (file === null) {
        return el;
    }
    // If the link source is not an image we dont want to make any adjustments.
    if (isImageExtension(file.extension) === false) {
        return el;
    }
    let fixedEl = createDiv({
        cls: "internal-embed image-embed is-loaded",
    });
    fixedEl.setAttr("alt", alt);
    let resourcePath = app.vault.getResourcePath(file);
    let image = fixedEl.createEl("img");
    image.setAttr("src", resourcePath);
    if (customWidth !== null) {
        image.setAttr("width", customWidth.value);
    }
    return fixedEl;
}
function fixExternalLinks(el) {
    let items = el.getElementsByClassName("external-link");
    for (let linkEl of Array.from(items)) {
        let link = linkEl;
        if (link === undefined ||
            link === null) {
            continue;
        }
        // Remove the href from the link and setup an event listener to open the link in the default browser.
        let href = link.getAttr("href");
        link.removeAttribute("href");
        link.addEventListener("click", (ev) => {
            window.open(href);
        });
    }
    items = el.getElementsByClassName("internal-link");
    for (let linkEl of Array.from(items)) {
        let link = linkEl;
        if (link === undefined ||
            link === null) {
            continue;
        }
        // Removing the href from internal links is all that seems to be required to fix the onclick.
        link.removeAttribute("href");
    }
    return el;
}
function getEmbed(el) {
    // embeds can either be a <div class="internal-embed" or <p><div class="internal-embed"
    // depending on the syntax this additional check is to fix false negatives when embed is
    // the first case.
    if (el.hasClass("internal-embed")) {
        return el;
    }
    else {
        let items = el.getElementsByClassName("internal-embed");
        if (items.length === 1) {
            return items[0];
        }
    }
    return null;
}
function isImageExtension(extension) {
    extension = extension.toLowerCase();
    switch (extension) {
        case "png":
        case "jpg":
        case "jpeg":
        case "gif":
        case "bmp":
        case "svg":
        case "webp":
            return true;
    }
    return false;
}
function isPDFExtension(extension) {
    return extension.toLowerCase() === "pdf";
}
function isMDExtension(extension) {
    return extension.toLowerCase() === "md";
}
function fixUnSupportedRender(el) {
    if (isButtonPlugin_CrossCompatibilty(el)) {
        console.log("Got button.");
        let fixedEl = createDiv();
        let paragraph = fixedEl.createEl("p", {
            "cls": `${MultiColumnStyleCSS.RegionErrorMessage} ${MultiColumnStyleCSS.SmallFont}`
        });
        paragraph.innerText = "Buttons are not supported in Live Preview.\nPlease use reading mode.";
        return fixedEl;
    }
    return el;
}

/*
 * Filename: multi-column-markdown/src/live_preview/cm6_livePreview.ts
 * Created Date: Monday, August 1st 2022, 1:51:16 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
let selecting = false;
const multiColumnMarkdown_StateField = state.StateField.define({
    create(state) {
        return view.Decoration.none;
    },
    update(oldState, transaction) {
        const builder = new state.RangeSetBuilder();
        let ignoreFurtherIterations = false;
        // Check if view is in live preview state.
        if (transaction.state.field(obsidian.editorLivePreviewField) === false) {
            return builder.finish();
        }
        /**
         * When we have the while file we then get the entire doc text and check if it
         * contains a MCM region so we know to break or not.
         */
        let docLength = transaction.state.doc.length;
        let docText = transaction.state.doc.sliceString(0, docLength);
        if (containsRegionStart(docText) === false) {
            return builder.finish();
        }
        if (selecting && mouseState === "down") {
            return builder.finish();
        }
        else if (mouseState === "up") {
            selecting = false;
        }
        let isSelecting = checkUserSelecting(transaction);
        if (isSelecting) {
            selecting = true;
            return builder.finish();
        }
        language.syntaxTree(transaction.state).iterate({
            enter(node) {
                // If we find that the file does not contain any MCM regions we can flip this
                // flag and skip all other node iterations, potentially saving a lot of compute time.
                // 
                // We only want to run the generation once per state change. If
                // a previous node has sucessfully generated regions we ignore all
                // other nodes in the state.
                if (ignoreFurtherIterations === true) {
                    return;
                }
                // We want to run on the whole file so we dont just look for a single token.
                const tokenProps = node.type.prop(language.tokenClassNodeProp);
                if (tokenProps !== undefined) {
                    return;
                }
                // We want to know where the user's cursor is, it can be
                // selecting multiple regions of text as well so we need to know
                // all locations. Used to know if we should render region as text or as preview.
                let ranges = getCursorLineLocations();
                // Setup our loop to render the regions as MCM. 
                let workingFileText = docText;
                let loopIndex = 0;
                let startIndexOffset = 0;
                while (true) {
                    let regionData = getNextRegion(workingFileText, startIndexOffset, docText);
                    if (regionData === null) {
                        break;
                    }
                    let elementText = regionData.regionText;
                    workingFileText = regionData.remainingText;
                    let startIndex = regionData.startIndex;
                    let endIndex = regionData.endIndex;
                    startIndexOffset = endIndex;
                    // Here we check if the cursor is in this specific region.
                    let cursorInRegion = checkCursorInRegion(startIndex, endIndex, ranges);
                    if (cursorInRegion === true) {
                        // If the cursor is within the region we then need to know if
                        // it is within our settings block (if it exists.)
                        let settingsStartData = findStartCodeblock(elementText);
                        if (settingsStartData.found === false) {
                            settingsStartData = findSettingsCodeblock(elementText);
                        }
                        if (settingsStartData.found === true) {
                            // Since the settings block exists check if the cursor is within that region.
                            let codeblockStartIndex = startIndex + settingsStartData.startPosition;
                            let codeblockEndIndex = startIndex + settingsStartData.endPosition;
                            let settingsText = docText.slice(codeblockStartIndex, codeblockEndIndex);
                            let cursorInCodeblock = checkCursorInRegion(codeblockStartIndex, codeblockEndIndex, ranges);
                            if (cursorInCodeblock === false) {
                                // If the cursor is not within the region we pass the data to the
                                // settings view so it can be displayed in the region.
                                builder.add(codeblockStartIndex, codeblockEndIndex + 1, view.Decoration.replace({
                                    widget: new MultiColumnMarkdown_DefinedSettings_LivePreview_Widget(settingsText),
                                }));
                            }
                        }
                    }
                    else {
                        let foundSettings = getSettingsData(regionData);
                        let userSettings = null;
                        let settingsText = "";
                        if (foundSettings !== null) {
                            elementText = foundSettings.contentData;
                            userSettings = foundSettings.settings;
                            settingsText = foundSettings.settingsText;
                        }
                        const editorInfo = transaction.state.field(obsidian.editorInfoField);
                        // At this point if the cursor isnt in the region we pass the data to the
                        // element to be rendered.
                        builder.add(startIndex, endIndex, view.Decoration.replace({
                            widget: new MultiColumnMarkdown_LivePreview_Widget(elementText, userSettings, editorInfo.file, settingsText),
                        }));
                    }
                    ignoreFurtherIterations = true;
                    // Infinite loop protection.
                    loopIndex++;
                    if (loopIndex > 100) {
                        console.warn("Potential issue with rendering Multi-Column Markdown live preview regions. If problem persists please file a bug report with developer.");
                        break;
                    }
                }
            },
        });
        return builder.finish();
        function getCursorLineLocations() {
            let ranges = [];
            if (transaction.state.selection.ranges) {
                ranges = transaction.state.selection.ranges.filter((range) => {
                    return range.empty;
                }).map((range) => {
                    let line = transaction.state.doc.lineAt(range.head);
                    `${line.number}:${range.head - line.from}`;
                    return {
                        line: line,
                        position: range.head
                    };
                });
            }
            return ranges;
        }
        function valueIsInRange(value, minVal, maxVal, inclusive = true) {
            if (inclusive === true && (value === minVal || value === maxVal)) {
                return true;
            }
            if (minVal < value && value < maxVal) {
                return true;
            }
            return false;
        }
        function checkCursorInRegion(startIndex, endIndex, ranges) {
            for (let i = 0; i < ranges.length; i++) {
                // TODO: Maybe look into limiting this to the second and second to last line
                // of the region as clicking right at the top or bottom of the region
                // swaps it to unrendered.
                let range = ranges[i];
                if (valueIsInRange(range.position, startIndex, endIndex) === true) {
                    return true;
                }
            }
            if (transaction.state.selection) {
                for (let i = 0; i < transaction.state.selection.ranges.length; i++) {
                    let range = transaction.state.selection.ranges[i];
                    // If either the start or end of the selection is within the
                    // region range we do not render live preview.
                    if (valueIsInRange(range.from, startIndex, endIndex) ||
                        valueIsInRange(range.to, startIndex, endIndex)) {
                        return true;
                    }
                    // // Or if the entire region is within the selection range
                    // we do not render the live preview.
                    if (valueIsInRange(startIndex, range.from, range.to) &&
                        valueIsInRange(endIndex, range.from, range.to)) {
                        return true;
                    }
                }
            }
            return false;
        }
    },
    provide(field) {
        return view.EditorView.decorations.from(field);
    },
});
function getNextRegion(workingFileText, startIndexOffset, wholeDoc) {
    let region = findNextRegion(workingFileText);
    if (region === null) {
        return null;
    }
    if (region.dataType === "CODEBLOCK" || region.dataType === "DEPRECIATED") {
        // Search for the first end tag after a start block. (No recursive columns.)
        let endTagData = findEndTag(workingFileText.slice(region.data.startPosition));
        if (endTagData.found === false) {
            return null;
        }
        /**
         * For the region we found get the start and end position of the tags so we
         * can slice it out of the document.
         */
        let startIndex = startIndexOffset + region.data.startPosition;
        let endIndex = startIndex + endTagData.startPosition + endTagData.matchLength; // Without the matchLength will leave the end tag on the screen.
        // This text is the entire region data including the start and end tags.
        let elementText = wholeDoc.slice(startIndex, endIndex);
        workingFileText = wholeDoc.slice(endIndex);
        /**
         * Update our start offset and the working text of the file so our next
         * iteration knows where we left off
         */
        let data = {
            regionType: region.dataType,
            regionText: elementText,
            remainingText: workingFileText,
            startIndex: startIndex,
            endIndex: endIndex
        };
        return data;
    }
    if (region.dataType === "PADOC") {
        let pandocData = region.data;
        let startIndex = startIndexOffset + pandocData.startPosition;
        let endIndex = startIndexOffset + pandocData.endPosition;
        workingFileText = wholeDoc.slice(endIndex);
        let data = {
            regionType: region.dataType,
            regionText: pandocData.content,
            remainingText: workingFileText,
            startIndex: startIndex,
            endIndex: endIndex,
            columnCount: pandocData.columnCount,
            userSettings: pandocData.userSettings
        };
        return data;
    }
}
function findNextRegion(workingFileText) {
    // If there are multiple kinds of start blocks, the old way of parsing would cause issues.
    // Now search for both kinds and determine what to do after search.
    let startTagData_codeblockStart = { dataType: "CODEBLOCK", data: findStartCodeblock(workingFileText) };
    let startTagData_depreciatedStart = { dataType: "DEPRECIATED", data: findStartTag(workingFileText) };
    let pandocData = { dataType: "PADOC", data: findPandoc(workingFileText) };
    if (startTagData_codeblockStart.data.found === false &&
        startTagData_depreciatedStart.data.found === false &&
        pandocData.data.found === false) {
        return null;
    }
    let regionsFound = [startTagData_codeblockStart, startTagData_depreciatedStart, pandocData].filter((val) => { return val.data.found === true; });
    if (regionsFound.length > 1) {
        let sorted = regionsFound.sort((a, b) => {
            return a.data.startPosition - b.data.endPosition;
        });
        return sorted.first();
    }
    if (startTagData_codeblockStart.data.found === true) {
        return startTagData_codeblockStart;
    }
    if (startTagData_depreciatedStart.data.found === true) {
        return startTagData_depreciatedStart;
    }
    if (pandocData.data.found === true) {
        return pandocData;
    }
    throw ("Unknown type found when parsing region.");
}
function getSettingsData(regionData) {
    let contentData = regionData.regionText;
    function parseCodeBlockSettings(settingsStartData) {
        let settingsText = contentData.slice(settingsStartData.startPosition, settingsStartData.endPosition);
        contentData = contentData.replace(settingsText, "");
        let settings = parseColumnSettings(settingsText);
        return {
            settings: settings,
            settingsText: settingsText,
            contentData: contentData
        };
    }
    if (regionData.regionType === "CODEBLOCK") {
        let settingsStartData = findStartCodeblock(contentData);
        if (settingsStartData.found === false) {
            return null;
        }
        return parseCodeBlockSettings(settingsStartData);
    }
    if (regionData.regionType === "DEPRECIATED") {
        let settingsStartData = findSettingsCodeblock(contentData);
        if (settingsStartData.found === false) {
            return null;
        }
        return parseCodeBlockSettings(settingsStartData);
    }
    if (regionData.regionType === "PADOC") {
        let pandocData = regionData;
        return {
            settings: parsePandocSettings(pandocData.userSettings, pandocData.columnCount),
            settingsText: "",
            contentData: regionData.regionText
        };
    }
}
function checkUserSelecting(transaction) {
    let isSelecting = false;
    if (transaction.isUserEvent("select.pointer") &&
        transaction.state.selection.ranges &&
        transaction.state.selection.ranges.length > 0) {
        for (let range of transaction.state.selection.ranges) {
            if (range.to - range.from > 1) {
                isSelecting = true;
                break;
            }
        }
    }
    return isSelecting;
}

/**
 * File: /src/live_preview/cm6_livePreivew_onClickFix.ts                       *
 * Created Date: Friday, March 24th 2023, 6:10 pm                              *
 * Author: Cameron Robinson                                                    *
 *                                                                             *
 * Copyright (c) 2023 Cameron Robinson                                         *
 */
const EDITOR_VIEW_GC_TIMEOUT_MS = 150000; // 2.5m in ms
class EditorCallbackManager {
    constructor() {
        this._regainedFocus = true;
        this._lostFocus = true;
    }
    get regainedFocus() {
        return this._regainedFocus;
    }
    get lostFocus() {
        return this._lostFocus;
    }
    get hasFocus() {
        return this._hasFocus;
    }
    set hasFocus(value) {
        if (value === true) {
            if (this._hasFocus === false) {
                this._regainedFocus = true;
            }
            else {
                this._regainedFocus = false;
            }
        }
        else {
            if (this._hasFocus === true) {
                this._lostFocus = true;
            }
            else {
                this._lostFocus = false;
            }
        }
        this._hasFocus = value;
    }
}
class EditorViewScrollStateManager extends EditorCallbackManager {
    get editorView() {
        return this._editorView;
    }
    get lastDocState() {
        return this._lastDocState;
    }
    set lastDocState(value) {
        this._lastDocState = value;
    }
    get docTitle() {
        return this._docTitle;
    }
    set docTitle(value) {
        let parsedDocTitle = attemptParseDocTitle(value);
        if (parsedDocTitle !== "") {
            this._docTitle = parsedDocTitle;
            return;
        }
        this._docTitle = value;
    }
    constructor(editorView) {
        super();
        this.lastUseTimestamp = Date.now();
        this._editorView = editorView;
        this.hasFocus = true;
    }
    hasBeenAccessed() {
        this.lastUseTimestamp = Date.now();
    }
    get isReadyForGC() {
        if (this._editorView === null) {
            return true;
        }
        let delta = Date.now() - this.lastUseTimestamp;
        if (this._editorView.inView === false &&
            this._editorView.hasFocus === false &&
            delta > EDITOR_VIEW_GC_TIMEOUT_MS) {
            return true;
        }
        return false;
    }
}
class EditorDelayCallback extends EditorCallbackManager {
    constructor() {
        super(...arguments);
        this.creationTimestamp = Date.now();
    }
    get callbackShouldTimeout() {
        let currentTimeMS = Date.now();
        let delta = currentTimeMS - this.creationTimestamp;
        let maxDeltaTimeMS = 200;
        if (delta > maxDeltaTimeMS) {
            return true;
        }
        return false;
    }
}
const clickDelayCallbacks = new Map();
const openEditorViews = new Map();
let lastGCPass = Date.now();
let editorMouseState = "up";
const MultiColumnMarkdown_OnClickFix = state.StateField.define({
    create(state) {
        return view.Decoration.none;
    },
    update(oldState, transaction) {
        const builder = new state.RangeSetBuilder();
        if (shouldRunGCOnEditorMap()) {
            for (let [editorView, scrollStateManager] of openEditorViews) {
                if (scrollStateManager.isReadyForGC) {
                    openEditorViews.delete(editorView);
                }
            }
        }
        if (transaction.state.field(obsidian.editorLivePreviewField) === false) {
            return builder.finish();
        }
        if (isTransactionRangeSelection(transaction) === true) {
            return builder.finish();
        }
        /**
         * When we have the while file we then get the entire doc text and check if it
         * contains a MCM region so we know to break or not.
         */
        let docLength = transaction.state.doc.length;
        let docText = transaction.state.doc.sliceString(0, docLength);
        if (containsRegionStart(docText) === false) {
            return builder.finish();
        }
        if (mouseState === "down") {
            editorMouseState = mouseState;
        }
        const editorView = transaction.state.field(obsidian.editorEditorField);
        let scrollStateManager = getScrollStateManager(editorView, transaction);
        scrollStateManager.lastDocState = transaction.newDoc;
        scrollStateManager.docTitle = editorView.dom.ownerDocument.title;
        if (editorView.hasFocus === true) {
            scrollStateManager.hasFocus = true;
        }
        let cursorLocation = getMainCursorLocation(transaction);
        if (cursorLocation !== null) {
            let textAboveCursor = docText.slice(0, cursorLocation.from);
            let endTagAboveCursor = containsEndTag(textAboveCursor);
            if (endTagAboveCursor === false) {
                return builder.finish();
            }
        }
        if (transactionIsValidMouseDownEvent(transaction, cursorLocation)) {
            handleMouseDownEvent(transaction, editorView, cursorLocation);
        }
        else if (transactionIsMouseUpEvent(transaction)) {
            handleMouseUpEvent(transaction);
        }
        else if (editorHasBeenClickedAwayFrom(transaction, editorView, scrollStateManager)) {
            let refocusLocation = shouldRefocusOnCursorOrViewport(editorView, cursorLocation, docLength);
            refocusOnCursorArea(refocusLocation, editorView);
            scrollStateManager.hasFocus = false;
        }
        // else if( editorHasBeenClickedBackInto(transaction, scrollStateManager, editorView) ){
        //  // TODO: Bug where clicking back into editor without selecting a new cursor location 
        //  // will cause editor to jump to top of doc. Do not have way to prevent this as of now.
        // 	console.log("Editor has been refocused with null cursor location.")
        // }
        else if (editorMouseState === "down" && mouseState === "up" &&
            transaction.state.selection.ranges &&
            transaction.state.selection.ranges.length > 0) {
            editorMouseState = mouseState;
            let refocusLocation = shouldRefocusOnCursorOrViewport(editorView, cursorLocation, docLength);
            refocusOnCursorArea(refocusLocation, editorView);
        }
        else {
            clearUnUsedEntries(transaction);
        }
        return builder.finish();
    },
    provide(field) {
        return view.EditorView.decorations.from(field);
    },
});
function getMainCursorLocation(transaction) {
    let cursorLocation = null;
    if (transaction.state.selection.ranges &&
        transaction.state.selection.ranges.length > 0) {
        cursorLocation = transaction.state.selection.ranges[0];
    }
    return cursorLocation;
}
function handleMouseDownEvent(transaction, editorView, cursorLocation) {
    let x = {
        effects: view.EditorView.scrollIntoView(cursorLocation, {
            y: "center"
        })
    };
    function delay() {
        return __awaiter(this, void 0, void 0, function* () {
            yield sleep(15);
            editorView.dispatch(x);
        });
    }
    let delayCallbackData = new EditorDelayCallback();
    delayCallbackData.callback = delay;
    clickDelayCallbacks.set(transaction.state.sliceDoc(), delayCallbackData);
    if (isRangedSelection([cursorLocation]) === false ||
        delayCallbackData.regainedFocus === true) {
        delay();
    }
}
function transactionIsValidMouseDownEvent(transaction, cursorLocation) {
    return transaction.isUserEvent("select.pointer") &&
        cursorLocation !== null;
}
function transactionIsMouseUpEvent(transaction) {
    if (transaction.docChanged === false &&
        clickDelayCallbacks.has(transaction.state.sliceDoc())) {
        editorMouseState = mouseState;
        return true;
    }
    return false;
}
function getScrollStateManager(editorView, transaction) {
    if (openEditorViews.has(editorView) === false) {
        let scrollStateManager = new EditorViewScrollStateManager(editorView);
        openEditorViews.set(editorView, scrollStateManager);
        return scrollStateManager;
    }
    let scrollStateManager = openEditorViews.get(editorView);
    if (transactionSwappedEditorFile(transaction, scrollStateManager)) {
        scrollStateManager = new EditorViewScrollStateManager(editorView);
        openEditorViews.set(editorView, scrollStateManager);
        return scrollStateManager;
    }
    scrollStateManager.hasBeenAccessed();
    return scrollStateManager;
}
function handleMouseUpEvent(transaction) {
    let delayCallbackData = clickDelayCallbacks.get(transaction.state.sliceDoc());
    delayCallbackData.callback();
    if (delayCallbackData.callbackShouldTimeout === true) {
        clickDelayCallbacks.delete(transaction.state.sliceDoc());
    }
}
function clearUnUsedEntries(transaction) {
    for (let [key, value] of clickDelayCallbacks) {
        if (value.callbackShouldTimeout === true) {
            clickDelayCallbacks.delete(transaction.state.sliceDoc());
        }
    }
}
function shouldRefocusOnCursorOrViewport(editorView, cursorLocation, docLength) {
    const VIEWPORT_CURSOR_REFOCUS_RANGE = 300;
    let viewportRange = editorView.viewport;
    if (viewportRange.from + VIEWPORT_CURSOR_REFOCUS_RANGE <= cursorLocation.from && cursorLocation.from <= viewportRange.to - VIEWPORT_CURSOR_REFOCUS_RANGE) {
        return cursorLocation;
    }
    if (viewportRange.from === 0) {
        return state.EditorSelection.cursor(0);
    }
    if (viewportRange.to >= docLength) {
        return state.EditorSelection.cursor(docLength);
    }
    let location = viewportRange.from + Math.floor((viewportRange.to - viewportRange.from) / 2);
    return state.EditorSelection.cursor(location);
}
function refocusOnCursorArea(cursorLocation, editorView) {
    let x = {
        effects: view.EditorView.scrollIntoView(cursorLocation, {
            y: "center"
        })
    };
    function delay() {
        return __awaiter(this, void 0, void 0, function* () {
            yield sleep(100);
            editorView.dispatch(x);
        });
    }
    delay();
}
function editorHasBeenClickedAwayFrom(transaction, editorView, scrollStateManager) {
    if (transaction.docChanged === false &&
        editorView.hasFocus === false &&
        editorView.inView === true &&
        scrollStateManager.hasFocus === true &&
        scrollStateManager.lostFocus === true) {
        return true;
    }
    return false;
}
function isRangedSelection(cursorLocations) {
    for (let range of cursorLocations) {
        if (range.to - range.from > 1) {
            return true;
        }
    }
    return false;
}
function isTransactionRangeSelection(transaction) {
    if (transaction.isUserEvent("select.pointer") &&
        transaction.state.selection.ranges &&
        transaction.state.selection.ranges.length > 0 &&
        isRangedSelection(transaction.state.selection.ranges.slice())) {
        return true;
    }
    return false;
}
function transactionSwappedEditorFile(transaction, scrollStateManager) {
    // If on this transaction there are multiple selection ranges we know
    // the user can not have swapped to a new file this transaction.
    if (transaction.state.selection.ranges.length !== 1) {
        return false;
    }
    // On new document load the cursor is placed at the beginning of the file.
    // If cursor is not at this location we know it isnt document load.
    if (transaction.state.selection.ranges[0].from !== 0 &&
        transaction.state.selection.ranges[0].to !== 0) {
        return false;
    }
    // Make sure transaction is not also a user event. At this point should we be fairly
    // certain that this is a document load?
    if (transaction.isUserEvent("input") ||
        transaction.isUserEvent("delete") ||
        transaction.isUserEvent("move") ||
        transaction.isUserEvent("select") ||
        transaction.isUserEvent("undo") ||
        transaction.isUserEvent("redo")) {
        return false;
    }
    if (scrollStateManager.lastDocState === transaction.newDoc) {
        return false;
    }
    return true;
}
function shouldRunGCOnEditorMap() {
    const GC_DELTA_TIMER = 30000; // 30s
    let delta = Date.now() - lastGCPass;
    if (delta > GC_DELTA_TIMER) {
        lastGCPass = Date.now();
        return true;
    }
    return false;
}
function attemptParseDocTitle(value) {
    for (let i = 0; i < 2; i++) {
        let result = /(.*) - .*/.exec(value);
        if (result !== null && result.length > 1) {
            value = result[1];
        }
        else {
            return "";
        }
    }
    return value;
}

/*
 * File: multi-column-markdown/src/main.ts
 * Created Date: Tuesday, October 5th 2021, 1:09 pm
 * Author: Cameron Robinson
 *
 * Copyright (c) 2022 Cameron Robinson
 */
const DEFAULT_SETTINGS = {
    renderOnMobile: true
};
const CODEBLOCK_START_STRS = [
    "start-multi-column",
    "multi-column-start"
];
class MultiColumnMarkdown extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
        this.globalManager = new GlobalDOMManager();
        //#endregion PDF Exporting.
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading multi-column markdown");
            yield this.loadSettings();
            this.globalManager = new GlobalDOMManager();
            this.registerEditorExtension(multiColumnMarkdown_StateField);
            this.registerEditorExtension(MultiColumnMarkdown_OnClickFix);
            for (let i = 0; i < CODEBLOCK_START_STRS.length; i++) {
                let startStr = CODEBLOCK_START_STRS[i];
                this.setupMarkdownCodeblockPostProcessor(startStr);
            }
            this.setupMarkdownPostProcessor();
            this.addCommand({
                id: `toggle-mobile-rendering-mcm`,
                name: `Toggle Mobile Rendering - Multi-Column Markdown`,
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    this.settings.renderOnMobile = !this.settings.renderOnMobile;
                    yield this.saveSettings();
                    let noticeString = `Toggled mobile rendering ${this.settings.renderOnMobile ? "on" : "off"}.`;
                    if (obsidian.Platform.isMobile === true) {
                        noticeString += ` Please reload any open files for change to take effect.`;
                    }
                    new obsidian.Notice(noticeString);
                })
            });
            //TODO: Set up this as a modal to set settings automatically
            this.addCommand({
                id: `insert-multi-column-region`,
                name: `Insert Multi-Column Region`,
                editorCallback: (editor, view) => {
                    try {
                        let cursorStartPosition = editor.getCursor("from");
                        editor.getDoc().replaceSelection(`
\`\`\`start-multi-column
ID: ID_${getUID(4)}
Number of Columns: 2
Largest Column: standard
\`\`\`



--- column-end ---



--- end-multi-column

${editor.getDoc().getSelection()}`);
                        cursorStartPosition.line = cursorStartPosition.line + 7;
                        cursorStartPosition.ch = 0;
                        editor.setCursor(cursorStartPosition);
                    }
                    catch (e) {
                        new obsidian.Notice("Encountered an error inserting a multi-column region. Please try again later.");
                    }
                }
            });
            this.addCommand({
                id: `add-IDs-To-multi-column-region`,
                name: `Fix Missing IDs for Multi-Column Regions`,
                editorCallback: (editor, view) => {
                    try {
                        /**
                         * Not sure if there is an easier way to do this.
                         *
                         * Get all of the lines of the document split by newlines.
                         */
                        let docText = editor.getRange({ line: 0, ch: 0 }, { line: editor.getDoc().lineCount(), ch: 0 });
                        let lines = docText.split("\n");
                        let startCodeblock = findStartCodeblock(docText);
                        let lineOffset = 0;
                        let numCodeblocksUpdated = 0;
                        while (startCodeblock.found === true) {
                            // Get the text of the settings block so we can check if it contains an ID,
                            // also so we can get the length of the first line, used to calculate where to append a new ID if needed
                            let settingsText = docText.slice(startCodeblock.startPosition, startCodeblock.endPosition);
                            let firstLineOfCodeblockLength = settingsText.split("\n")[0].length;
                            // We need the lines before the block to know where to start replacing text
                            // and the lines including the block to know where to set our offset to after this iteration.
                            let linesBefore = docText.slice(0, startCodeblock.startPosition);
                            let startReplacementLineIndex = (linesBefore.split("\n").length - 1) + lineOffset;
                            let linesOf = docText.slice(0, startCodeblock.endPosition);
                            let endReplacementLineIndex = (linesOf.split("\n").length - 1) + lineOffset;
                            let settingsID = parseStartRegionCodeBlockID(settingsText);
                            if (settingsID === "") {
                                // copy the first line of the codeblock and append a new ID, then replace the first line of the block
                                let replacementText = editor.getRange({ line: startReplacementLineIndex, ch: 0 }, { line: startReplacementLineIndex, ch: firstLineOfCodeblockLength }) + `\nID: ID_${getUID(4)}`;
                                editor.replaceRange(replacementText, { line: startReplacementLineIndex, ch: 0 }, { line: startReplacementLineIndex, ch: firstLineOfCodeblockLength });
                                endReplacementLineIndex += 1;
                                numCodeblocksUpdated += 1;
                            }
                            lineOffset = endReplacementLineIndex;
                            docText = docText.slice(startCodeblock.endPosition);
                            startCodeblock = findStartCodeblock(docText);
                        }
                        /**
                         * Loop through all of the lines checking if the line is a
                         * start tag and if so is it missing an ID.
                         */
                        let linesWithoutIDs = [];
                        let textWithoutIDs = [];
                        for (let i = 0; i < lines.length; i++) {
                            let data = isStartTagWithID(lines[i]);
                            if (data.isStartTag === true && data.hasKey === false) {
                                linesWithoutIDs.push(i);
                                textWithoutIDs.push(lines[i]);
                            }
                        }
                        if (linesWithoutIDs.length === 0 && numCodeblocksUpdated === 0) {
                            new obsidian.Notice("Found 0 missing IDs in the current document.");
                            return;
                        }
                        /**
                         * Now loop through each line that is missing an ID and
                         * generate a random ID and replace the original text.
                         */
                        for (let i = 0; i < linesWithoutIDs.length; i++) {
                            let originalText = textWithoutIDs[i];
                            let text = originalText;
                            text = text.trimEnd();
                            if (text.charAt(text.length - 1) === ":") {
                                text = text.slice(0, text.length - 1);
                            }
                            text = `${text}: ID_${getUID(4)}`;
                            editor.replaceRange(text, { line: linesWithoutIDs[i], ch: 0 }, { line: linesWithoutIDs[i], ch: originalText.length });
                        }
                        new obsidian.Notice(`Replaced ${linesWithoutIDs.length + numCodeblocksUpdated} missing ID(s) in the current document.`);
                    }
                    catch (e) {
                        new obsidian.Notice("Encountered an error addign IDs to multi-column regions. Please try again later.");
                    }
                }
            });
            this.addCommand({
                id: `mcm-Toggle-Document-Reflow`,
                name: `Setup Multi-Column Reflow - Multi-Column Markdown`,
                editorCallback: (editor, view) => {
                    app.fileManager.processFrontMatter(view.file, (frontmatter) => {
                        let isReflow = isMultiColumnReflow(frontmatter);
                        if (isReflow) {
                            return;
                        }
                        frontmatter["Multi-Column Markdown"] = [
                            { "Number of Columns": 2 },
                            { "Column Size": "Standard" }
                        ];
                        view.editor.refresh();
                    });
                }
            });
            this.registerInterval(window.setInterval(() => {
                this.UpdateOpenFilePreviews();
            }, 500));
        });
    }
    UpdateOpenFilePreviews() {
        let fileManagers = this.globalManager.getAllFileManagers();
        fileManagers.forEach(element => {
            let regionalManagers = element.getAllRegionalManagers();
            regionalManagers.forEach(regionManager => {
                regionManager.updateRenderedMarkdown();
            });
        });
    }
    setupMarkdownPostProcessor() {
        this.registerMarkdownPostProcessor((el, ctx) => __awaiter(this, void 0, void 0, function* () {
            if (this.settings.renderOnMobile === false &&
                obsidian.Platform.isMobile === true) {
                return;
            }
            const sourcePath = ctx.sourcePath;
            let fileDOMManager = this.globalManager.getFileManager(sourcePath);
            if (fileDOMManager === null) {
                console.warn("Found null DOM manager. Could not process multi-column markdown.");
                return;
            }
            /**
             * Here we check if the export "print" flag is in the DOM so we can determine if we
             * are exporting and handle that case.
             */
            if (this.checkExporting(el)) {
                this.exportDocumentToPDF(el, fileDOMManager, sourcePath);
            }
            // Get the info for our current context and then check
            // if the entire text contains a start tag. If there is
            // no start tag in the document we can just return and
            // ignore the rest of the parsing.
            let info = ctx.getSectionInfo(el);
            /**
             * We need the context info to properly parse so returning here
             * info is null. TODO: Set error in view if this occurs.
             */
            if (!info) {
                return;
            }
            let docString = info.text;
            let docLines = docString.split("\n");
            let reflowFrontmatter = isMultiColumnReflow(ctx.frontmatter);
            if (reflowFrontmatter === true) {
                this.renderDocReflow(el, ctx, sourcePath, fileDOMManager, docString, info);
                return;
            }
            else {
                fileDOMManager.removeRegion("Multi-Column Reflow Region");
            }
            /**
             * If we encounter a start tag on the document we set the flag to start
             * parsing the rest of the document.
             */
            if (containsRegionStart(docString)) {
                fileDOMManager.setHasStartTag();
            }
            /**
             * If the document does not contain any start tags we ignore the
             * rest of the parsing. This is only set to true once the first
             * start tag element is parsed above.
             */
            if (fileDOMManager.getHasStartTag() === false) {
                return;
            }
            /**
             * Take the info provided and generate the required variables from
             * the line start and end values.
             */
            let relativeTexts = extractElementRelativeLocationData(docLines, info);
            //#region Depreciated Start Tag
            /**
             * If the current line is a start tag we want to set up the
             * region manager. The regional manager takes care
             * of all items between it's start and end tags while the
             * file manager we got above above takes care of all regional
             * managers in each file.
             */
            if (containsStartTag(relativeTexts.textOfElement)) {
                createDepreciatedStartElement(el, relativeTexts.linesOfElement, ctx, fileDOMManager, docString);
                return;
            }
            //#endregion Depreciated Start Tag
            // Pandoc Start Region Tag.
            if (containsPandocStartTag(relativeTexts.textOfElement)) {
                createPandocStartElement(el, relativeTexts.textOfElement, ctx, fileDOMManager, docString);
                return;
            }
            /**
             * Check if any of the lines above us contain a start block, and if
             * so get the lines from our current element to the start block.
             */
            let startBockAbove = getStartDataAboveLine(relativeTexts.linesAboveArray);
            if (startBockAbove === null) {
                return;
            }
            /**
             * We now know we're within a multi-column region, so we update our
             * list of lines above to just be the items within this region.
             */
            relativeTexts.linesAboveArray = startBockAbove.linesAboveArray;
            /**
             * We use the start block's key to get our regional manager. If this
             * lookup fails we can not continue processing this element.
             */
            let regionalContainer = fileDOMManager.getRegionalContainer(startBockAbove.startBlockKey);
            if (regionalContainer === null) {
                return;
            }
            regionalContainer.getRegion();
            /**
             * To make sure we're placing the item in the right location (and
             * overwrite elements that are now gone) we now want all of the
             * lines after this element up to the end tag.
             */
            relativeTexts.linesBelowArray = getEndBlockBelow(relativeTexts.linesBelowArray);
            /**
             * Now we take the lines above our current element up until the
             * start region tag and render that into an HTML element. We will
             * use these elements to determine where to place our current element.
             */
            this.appendToRegionalManager(el, regionalContainer, ctx, relativeTexts, sourcePath, startBockAbove, (domObj) => {
                onUnloadElement(domObj, regionalContainer);
            });
            return;
        }));
    }
    appendToRegionalManager(el, regionalContainer, ctx, relativeLines, sourcePath, parentStartBlock, onUnloadCallback) {
        let { linesAboveArray, linesOfElement, linesBelowArray, textOfElement } = relativeLines;
        let siblingsAbove = renderMarkdownFromLines(linesAboveArray, sourcePath);
        let siblingsBelow = renderMarkdownFromLines(linesBelowArray, sourcePath);
        let regionalManager = regionalContainer.getRegion();
        /**
         * Set up our dom object to be added to the manager.
         */
        let currentObject = new DOMObject(el, linesOfElement);
        el.id = currentObject.UID;
        currentObject = TaskListDOMObject.checkForTaskListElement(currentObject);
        /**
         * Now we add the object to the manager and then setup the
         * callback for when the object is removed from view that will remove
         * the item from the manager.
         */
        regionalManager.addObject(siblingsAbove, siblingsBelow, currentObject);
        let elementMarkdownRenderer = new obsidian.MarkdownRenderChild(el);
        elementMarkdownRenderer.onunload = () => {
            onUnloadCallback(currentObject);
        };
        ctx.addChild(elementMarkdownRenderer);
        /**
         * Now we check if our current element is a special flag so we can
         * properly set the element tag within the regional manager.
         */
        if (containsEndTag(el.textContent) === true &&
            parentStartBlock.startBlockType !== "PADOC") {
            currentObject.elementType = "unRendered";
            regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.endRegion);
        }
        if (isValidPandocEndTag(linesAboveArray, el.textContent) === true &&
            parentStartBlock.startBlockType === "PADOC") {
            currentObject.elementType = "unRendered";
            regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.endRegion);
        }
        else if (containsColEndTag(textOfElement) === true) {
            currentObject.elementType = "unRendered";
            regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.columnBreak);
        }
        else if (containsColSettingsTag(textOfElement) === true) {
            currentObject.elementType = "unRendered";
            regionalManager = regionalContainer.setRegionSettings(textOfElement);
            regionalManager.updateElementTag(currentObject.UID, DOMObjectTag.regionSettings);
        }
        setElementCSS(currentObject, el);
        regionalManager.renderRegionElementsToScreen();
        return regionalManager;
    }
    setupMarkdownCodeblockPostProcessor(startStr) {
        this.registerMarkdownCodeBlockProcessor(startStr, (source, el, ctx) => {
            var _a;
            if (this.settings.renderOnMobile === false &&
                obsidian.Platform.isMobile === true) {
                return;
            }
            const sourcePath = ctx.sourcePath;
            // Set up our CSS so that the codeblock only renders this data in reading mode
            // source/live preview mode is handled by the CM6 implementation.
            (_a = el.parentElement) === null || _a === void 0 ? void 0 : _a.addClass("preivew-mcm-start-block");
            // To determine what kind of view we are rendering in we need a markdown leaf.
            // Really this should never return here since rendering is only done in markdown leaves.
            let markdownLeaves = app.workspace.getLeavesOfType("markdown");
            if (markdownLeaves.length === 0) {
                return;
            }
            if (this.globalManager === null || this.globalManager === undefined) {
                // console.log("Global manager is undefined?");
                return;
            }
            let fileDOMManager = this.globalManager.getFileManager(sourcePath);
            if (fileDOMManager === null) {
                return;
            }
            if (ctx.frontmatter &&
                ctx.frontmatter["Multi-Column Reflow"] !== undefined) {
                return;
            }
            else {
                fileDOMManager.removeRegion("Multi-Column Reflow Region");
            }
            // Set file to have start tag.
            fileDOMManager.setHasStartTag();
            // Get the info for our current context and then check
            // if the entire text contains a start tag. If there is
            // no start tag in the document we can just return and
            // ignore the rest of the parsing.
            let info = ctx.getSectionInfo(el);
            /**
             * We need the context info to properly parse so returning here
             * info is null. TODO: Set error in view if this occurs.
             */
            if (!info) {
                return;
            }
            /**
             * Set up the current element to act as the parent for the
             * multi-column region.
             */
            el.classList.add(MultiColumnLayoutCSS.RegionRootContainerDiv);
            let renderErrorRegion = el.createDiv({
                cls: `${MultiColumnLayoutCSS.RegionErrorContainerDiv} ${MultiColumnStyleCSS.RegionErrorMessage}`,
            });
            let renderColumnRegion = el.createDiv({
                cls: MultiColumnLayoutCSS.RegionContentContainerDiv
            });
            let regionKey = parseStartRegionCodeBlockID(source);
            let createNewRegionManager = true;
            if (fileDOMManager.checkKeyExists(regionKey) === true) {
                createNewRegionManager = false;
                let { numberOfTags, keys } = countStartTags(info.text);
                let numMatches = 0;
                for (let i = 0; i < numberOfTags; i++) {
                    // Because we checked if key exists one of these has to match.
                    if (keys[i] === regionKey) {
                        numMatches++;
                    }
                }
                // We only want to display an error if there are more than 2 of the same id across
                // the whole document. This prevents erros when obsidian reloads the whole document
                // and there are two of the same key in the map.
                if (numMatches >= 2) {
                    if (regionKey === "") {
                        renderErrorRegion.innerText = "Found multiple regions with empty IDs. Please set a unique ID after each start tag.\nEG: '=== multi-column-start: randomID'\nOr use 'Fix Missing IDs' in the command palette and reload the document.";
                    }
                    else {
                        renderErrorRegion.innerText = "Region ID already exists in document, please set a unique ID.\nEG: '=== multi-column-start: randomID'";
                    }
                    return;
                }
            }
            el.id = `MultiColumnID:${regionKey}`;
            // If something changes in the codeblock we dont necessarily want to update our
            // old reference to the region manager. This could be a potential bug area.
            if (createNewRegionManager === true) {
                // Create a new regional manager.
                let elementMarkdownRenderer = new obsidian.MarkdownRenderChild(el);
                fileDOMManager.createRegionalManager(regionKey, el, renderErrorRegion, renderColumnRegion);
                // Set up the on unload callback. This can be called if the user changes
                // the start/settings codeblock in any way. We only want to unload
                // if the file is being removed from view.
                elementMarkdownRenderer.onunload = () => {
                    if (fileDOMManager && fileStillInView(sourcePath) === false) {
                        // console.debug("File not in any markdown leaf. Removing region from dom manager.")
                        fileDOMManager.removeRegion(regionKey);
                    }
                };
                ctx.addChild(elementMarkdownRenderer);
            }
            let regionalManagerContainer = fileDOMManager.getRegionalContainer(regionKey);
            if (regionalManagerContainer !== null) {
                let regionalManager = regionalManagerContainer.setRegionSettings(source);
                regionalManager.regionParent = el;
            }
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    renderDocReflow(el, ctx, sourcePath, fileDOMManager, docString, info) {
        let regionalContainer = null;
        if (fileDOMManager.checkKeyExists("Multi-Column Reflow Region") === true &&
            el.getElementsByClassName("frontmatter").length === 0) {
            regionalContainer = fileDOMManager.getRegionalContainer("Multi-Column Reflow Region");
        }
        else if (fileDOMManager.checkKeyExists("Multi-Column Reflow Region") === true &&
            el.getElementsByClassName("frontmatter").length === 1) {
            let parentEl = createDiv();
            el.appendChild(parentEl);
            // Get current data, remove old region.
            regionalContainer = fileDOMManager.getRegionalContainer("Multi-Column Reflow Region");
            let domList = regionalContainer.getRegion().getRegionData().domList.slice();
            fileDOMManager.removeRegion("Multi-Column Reflow Region");
            // Create new region.
            setupStartTag(parentEl, ctx, fileDOMManager, docString, "Multi-Column Reflow Region");
            regionalContainer = fileDOMManager.getRegionalContainer("Multi-Column Reflow Region");
            let settings = getMultiColumnSettingsFromFrontmatter(ctx);
            let leaf = getLeafFromFilePath(this.app.workspace, ctx.sourcePath);
            let clientHeight = calcVisibleClietHeight(leaf, this.app.workspace);
            if (settings.columnHeight === null) {
                settings.columnHeight = HTMLSizing.create().setWidth(clientHeight).setUnits("px");
            }
            else {
                settings.columnHeight = settings.columnHeight.convertToPX(this.app.workspace.containerEl);
            }
            regionalContainer.setRegionParsedSettings(settings);
            // Re-Render after small delay.
            // Delay is so the auto layout check can properly read the client height.
            function delayRender() {
                return __awaiter(this, void 0, void 0, function* () {
                    setTimeout(() => {
                        // Append all items to region.
                        let regionalManager = regionalContainer.getRegion();
                        let listLength = domList.length;
                        for (let i = 0; i < listLength; i++) {
                            let domObj = domList.shift();
                            regionalManager.addObjectAtIndex(domObj, i);
                            setElementCSS(domObj, domObj.originalElement);
                        }
                        regionalContainer.getRegion().renderRegionElementsToScreen();
                    }, 50);
                });
            }
            delayRender();
            return;
        }
        else {
            // The first element to hit this point appears to be the yaml information which we can use
            // as our root div since the whole doc is going to be re-formatted.
            let parentEl = createDiv();
            el.appendChild(parentEl);
            setupStartTag(parentEl, ctx, fileDOMManager, docString, "Multi-Column Reflow Region");
            regionalContainer = fileDOMManager.getRegionalContainer("Multi-Column Reflow Region");
            let settings = getMultiColumnSettingsFromFrontmatter(ctx);
            let leaf = getLeafFromFilePath(this.app.workspace, ctx.sourcePath);
            let clientHeight = calcVisibleClietHeight(leaf, this.app.workspace);
            if (settings.columnHeight === null) {
                settings.columnHeight = HTMLSizing.create().setWidth(clientHeight).setUnits("px");
            }
            else {
                settings.columnHeight = settings.columnHeight.convertToPX(this.app.workspace.containerEl);
            }
            regionalContainer.setRegionParsedSettings(settings);
            return;
        }
        if (regionalContainer === null) {
            return;
        }
        let docLines = docString.split("\n");
        let relativeTexts = extractElementRelativeLocationData(docLines, info);
        relativeTexts.linesBelowArray = getEndBlockBelow(relativeTexts.linesBelowArray);
        if (containsStartTag(relativeTexts.textOfElement) ||
            containsColSettingsTag(relativeTexts.textOfElement)) {
            if (containsStartTag(relativeTexts.textOfElement)) {
                setElementCSSByTag(DOMObjectTag.startRegion, el);
            }
            else if (containsColSettingsTag(relativeTexts.textOfElement)) {
                setElementCSSByTag(DOMObjectTag.regionSettings, el);
            }
            return;
        }
        let startBockAbove = {
            linesAboveArray: relativeTexts.linesAboveArray,
            startBlockKey: "Multi-Column Reflow Region",
            startBlockType: "DEPRECIATED"
        };
        this.appendToRegionalManager(el, regionalContainer, ctx, relativeTexts, sourcePath, startBockAbove, (domObj) => {
            onUnloadElement(domObj, regionalContainer);
        });
    }
    //#region PDF Exporting.
    isStartCodeblockInExport(node) {
        for (let i = 0; i < CODEBLOCK_START_STRS.length; i++) {
            if (node.hasClass(`block-language-${CODEBLOCK_START_STRS[i]}`)) {
                return true;
            }
        }
        return false;
    }
    exportDocumentToPDF(el, fileDOMManager, sourcePath) {
        return __awaiter(this, void 0, void 0, function* () {
            // A true export will be passed an element with all other items in the doc as children. 
            // So if there are no children we can just return
            let docChildren = Array.from(el.childNodes);
            if (docChildren.length === 0) {
                return;
            }
            let childrenToRemove = [];
            // To export codeblocks we need to get the IDs so we can get the data from our managers.
            // however since the ID isnt being stored in the element yet this means we need to read
            // all of the IDs out of the full document.
            let codeblockStartBlocks = [];
            let aFile = this.app.vault.getAbstractFileByPath(sourcePath);
            if (aFile instanceof obsidian.TFile) {
                let file = aFile;
                let fileText = yield this.app.vault.cachedRead(file); // Is cached read Ok here? It should be.
                // Once we have our data we search the text for all codeblock start values.
                // storing them into our queue.
                let codeBlockData = findStartCodeblock(fileText);
                while (codeBlockData.found === true) {
                    let codeblockText = fileText.slice(codeBlockData.startPosition, codeBlockData.endPosition);
                    fileText = fileText.slice(codeBlockData.endPosition);
                    codeblockStartBlocks.push(codeblockText);
                    codeBlockData = findStartCodeblock(fileText);
                }
            }
            else {
                console.error(`Error getting file from source path: ${sourcePath}`);
            }
            let inBlock = false;
            for (let i = 0; i < docChildren.length; i++) {
                let child = docChildren[i];
                if (child instanceof HTMLElement) {
                    if (inBlock === false) {
                        let foundBlockData = false;
                        let regionKey = "";
                        let blockData = isStartTagWithID(child.textContent);
                        let pandocData = getPandocStartData(child.textContent);
                        if (blockData.isStartTag === true) {
                            // If an old-style start tag.
                            foundBlockData = true;
                            if (blockData.hasKey === true) {
                                let foundKey = getStartTagKey(child.textContent);
                                if (foundKey !== null) {
                                    regionKey = foundKey;
                                }
                            }
                        }
                        else if (blockData.isStartTag === false && this.isStartCodeblockInExport(child)) {
                            // If the start tag from the old version is null we then check to see if the element is
                            // a codeblock start. If it is we use the next available codeblock data to retrieve our ID.
                            let codeblockText = codeblockStartBlocks.shift();
                            if (codeblockText === undefined) {
                                console.error("Found undefined codeblock data when exporting.");
                                return;
                            }
                            let id = parseStartRegionCodeBlockID(codeblockText);
                            if (id !== "") {
                                foundBlockData = true;
                                regionKey = id;
                            }
                        }
                        else if (pandocData.found) {
                            foundBlockData = true;
                            regionKey = pandocData.userSettings.columnID;
                        }
                        if (foundBlockData === true && regionKey !== "") {
                            inBlock = true;
                            for (let i = child.children.length - 1; i >= 0; i--) {
                                child.children[i].detach();
                            }
                            child.innerText = "";
                            child.classList.add(MultiColumnLayoutCSS.RegionRootContainerDiv);
                            let renderErrorRegion = child.createDiv({
                                cls: `${MultiColumnLayoutCSS.RegionErrorContainerDiv}, ${MultiColumnStyleCSS.RegionErrorMessage}`,
                            });
                            let renderColumnRegion = child.createDiv({
                                cls: MultiColumnLayoutCSS.RegionContentContainerDiv
                            });
                            let regionalContainer = fileDOMManager.getRegionalContainer(regionKey);
                            if (regionalContainer === null || regionalContainer.getRegion().numberOfChildren === 0) {
                                // If the number of children is 0, we are probably in LivePreview, where the codeblock start regions have been processed by native obsidian live preview but do not have any children linked to them.
                                renderErrorRegion.innerText = "Error rendering multi-column region.\nPlease close and reopen the file, then make sure you are in reading mode before exporting.";
                            }
                            else {
                                let regionalManager = regionalContainer.getRegion();
                                regionalManager.exportRegionElementsToPDF(renderColumnRegion);
                            }
                        }
                    }
                    else {
                        if (containsEndTag(child.textContent) === true ||
                            containsPandocEndTag(child.textContent) === true) {
                            inBlock = false;
                        }
                        childrenToRemove.push(child);
                    }
                }
            }
            childrenToRemove.forEach(child => {
                if (child.parentElement === el) {
                    el.removeChild(child);
                }
            });
        });
    }
    checkExporting(element) {
        if (element === null) {
            return false;
        }
        if (element.classList.contains("print")) {
            return true;
        }
        if (element.parentNode !== null) {
            return this.checkExporting(element.parentElement);
        }
        return false;
    }
}
function setElementCSS(currentObject, el) {
    setElementCSSByTag(currentObject.tag, el);
}
function setElementCSSByTag(tag, el) {
    if (tag === DOMObjectTag.endRegion) {
        el.addClass(MultiColumnStyleCSS.RegionEndTag);
    }
    else if (tag === DOMObjectTag.columnBreak) {
        el.addClass(MultiColumnStyleCSS.ColumnEndTag);
    }
    else if (tag === DOMObjectTag.regionSettings) {
        el.addClass(MultiColumnStyleCSS.RegionSettings);
    }
    else {
        el.addClass(MultiColumnStyleCSS.RegionContent);
    }
}
function onUnloadElement(currentObject, regionalContainer) {
    if (regionalContainer === null) {
        return;
    }
    let regionalManager = regionalContainer.getRegion();
    if (regionalManager) {
        // We can attempt to update the view here after the item is removed
        // but need to get the item's parent element before removing object from manager.
        let regionRenderData = regionalManager.getRegionRenderData();
        regionalManager.removeObject(currentObject.UID);
        /**
         * Need to check here if element is null as this closure will be called
         * repeatedly on file change.
         */
        if (regionRenderData.parentRenderElement === null) {
            return;
        }
        regionalManager.renderRegionElementsToScreen();
    }
}
function extractElementRelativeLocationData(docLines, info) {
    let linesAboveArray = docLines.slice(0, info.lineStart);
    let linesOfElement = docLines.slice(info.lineStart, info.lineEnd + 1);
    let textOfElement = linesOfElement.join("\n");
    let linesBelowArray = docLines.slice(info.lineEnd + 1);
    return {
        linesAboveArray,
        linesOfElement,
        linesBelowArray,
        textOfElement
    };
}
function createDepreciatedStartElement(el, linesOfElement, ctx, fileDOMManager, docString) {
    el.children[0].detach();
    let startBlockData = getStartBlockAboveLine(linesOfElement);
    if (startBlockData === null) {
        return;
    }
    let regionID = startBlockData.startBlockKey;
    setupStartTag(el, ctx, fileDOMManager, docString, regionID);
    return;
}
function createPandocStartElement(el, textOfElement, ctx, fileDOMManager, docString) {
    el.children[0].detach();
    let pandocData = getPandocStartData(textOfElement);
    let settings = pandocData.userSettings;
    let regionManager = setupStartTag(el, ctx, fileDOMManager, docString, settings.columnID);
    regionManager.setRegionalSettings(settings);
    return;
}
function renderMarkdownFromLines(mdLines, sourcePath) {
    /**
     * We re-render all of the items above our element, until the start tag,
     * so we can determine where to place the new item in the manager.
     *
     * TODO: Can reduce the amount needing to be rendered by only rendering to
     * the start tag or a column-break whichever is closer.
     */
    let siblings = createDiv();
    let markdownRenderChild = new obsidian.MarkdownRenderChild(siblings);
    obsidian.MarkdownRenderer.renderMarkdown(mdLines.reduce((prev, current) => {
        return prev + "\n" + current;
    }, ""), siblings, sourcePath, markdownRenderChild);
    return siblings;
}
function setupStartTag(el, ctx, fileDOMManager, docString, regionID) {
    /**
     * Set up the current element to act as the parent for the
     * multi-column region.
     */
    el.classList.add(MultiColumnLayoutCSS.RegionRootContainerDiv);
    let renderErrorRegion = el.createDiv({
        cls: `${MultiColumnLayoutCSS.RegionErrorContainerDiv} ${MultiColumnStyleCSS.RegionErrorMessage}`,
    });
    let renderColumnRegion = el.createDiv({
        cls: MultiColumnLayoutCSS.RegionContentContainerDiv
    });
    if (fileDOMManager.checkKeyExists(regionID) === true) {
        let { numberOfTags, keys } = countStartTags(docString);
        let numMatches = 0;
        for (let i = 0; i < numberOfTags; i++) {
            // Because we checked if key exists one of these has to match.
            if (keys[i] === regionID) {
                numMatches++;
            }
        }
        // We only want to display an error if there are more than 2 of the same id across
        // the whole document. This prevents erros when obsidian reloads the whole document
        // and there are two of the same key in the map.
        if (numMatches >= 2) {
            if (regionID === "") {
                renderErrorRegion.innerText = "Found multiple regions with empty IDs. Please set a unique ID after each start tag.\nEG: '=== multi-column-start: randomID'\nOr use 'Fix Missing IDs' in the command palette and reload the document.";
            }
            else {
                renderErrorRegion.innerText = "Region ID already exists in document, please set a unique ID.\nEG: '=== multi-column-start: randomID'";
            }
            return;
        }
    }
    el.id = `MultiColumnID:${regionID}`;
    let elementMarkdownRenderer = new obsidian.MarkdownRenderChild(el);
    let regionManager = fileDOMManager.createRegionalManager(regionID, el, renderErrorRegion, renderColumnRegion);
    elementMarkdownRenderer.onunload = () => {
        if (fileDOMManager) {
            fileDOMManager.removeRegion(regionID);
        }
    };
    ctx.addChild(elementMarkdownRenderer);
    return regionManager;
}
const FRONTMATTER_REGEX = [
    /Multi[- ]*Column *Markdown/i,
    /Multi[- ]*Column *Reflow/i
];
function isMultiColumnReflow(frontmatter) {
    if (frontmatter === null ||
        frontmatter === undefined) {
        return false;
    }
    for (let regex of FRONTMATTER_REGEX) {
        let frontmatterReflowData = obsidian.parseFrontMatterEntry(frontmatter, regex);
        if (frontmatterReflowData !== null) {
            return true;
        }
    }
    let [keys, values] = Object.entries(frontmatter);
    if (keys === undefined) {
        return false;
    }
    for (let key of keys) {
        if (typeof key !== "string") {
            continue;
        }
        for (let regex of FRONTMATTER_REGEX) {
            let regexResult = regex.exec(key);
            if (regexResult !== null) {
                return true;
            }
        }
    }
    return false;
}
function getMultiColumnSettingsFromFrontmatter(ctx) {
    let settings = getDefaultMultiColumnSettings();
    settings.fullDocReflow = true;
    if (ctx.frontmatter === null ||
        ctx.frontmatter === undefined) {
        return settings;
    }
    for (let regex of FRONTMATTER_REGEX) {
        let frontmatterReflowData = obsidian.parseFrontMatterEntry(ctx.frontmatter, regex);
        if (frontmatterReflowData !== null &&
            Array.isArray(frontmatterReflowData)) {
            settings = parseFrontmatterSettings(frontmatterReflowData);
            settings.fullDocReflow = true;
            break;
        }
    }
    return settings;
}
function parseFrontmatterSettings(frontmatterReflowData) {
    let str = "";
    for (let obj of frontmatterReflowData) {
        let [key, value] = Object.entries(obj)[0];
        str += `${key}: [${value}]\n`;
    }
    let settings = parseColumnSettings(str);
    return settings;
}
function getLeafFromFilePath(workspace, filePath) {
    function checkState(state) {
        if (state["type"] === undefined ||
            state["type"] !== "markdown") {
            return false;
        }
        if (state["state"] === undefined) {
            return false;
        }
        if (state["state"]["file"] === undefined) {
            return false;
        }
        let stateFilePath = state["state"]["file"];
        return stateFilePath === filePath;
    }
    let entries = Object.entries(workspace.getLayout());
    let items = Array.from(entries).map((val) => {
        return val[1];
    });
    while (items.length > 0) {
        let entryObj = items.shift();
        if (entryObj["id"] !== undefined && entryObj["type"] !== undefined) {
            if (entryObj["type"] === "split" ||
                entryObj["type"] === "tabs") {
                items = items.concat(entryObj['children']);
                continue;
            }
            if (entryObj["type"] === "leaf" &&
                entryObj["id"] !== undefined &&
                entryObj["state"] !== undefined) {
                let id = entryObj["id"];
                let state = entryObj["state"];
                let valid = checkState(state);
                if (valid) {
                    return workspace.getLeafById(id);
                }
            }
        }
    }
    return null;
}
function getContentHeightFromLeaf(leaf) {
    let contentEl = leaf.view["contentEl"];
    if (contentEl !== undefined &&
        contentEl.clientHeight > 0) {
        return contentEl.clientHeight;
    }
    let clientHeight = leaf.view.containerEl.clientHeight;
    let titleContainer = leaf.view["titleContainerEl"];
    if (titleContainer !== undefined &&
        titleContainer.clientHeight > 0) {
        return clientHeight - titleContainer.clientHeight;
    }
    return clientHeight - 50;
}
function calcVisibleClietHeight(leaf, workspace) {
    let clientHeight = 0;
    if (leaf) {
        clientHeight = getContentHeightFromLeaf(leaf);
    }
    else if ((workspace !== null && workspace !== undefined) &&
        (workspace.containerEl !== null && workspace.containerEl !== undefined) &&
        workspace.containerEl.clientHeight > 0) {
        clientHeight = workspace.containerEl.clientHeight - 100;
    }
    else {
        clientHeight = 1000;
    }
    return clientHeight;
}

module.exports = MultiColumnMarkdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9AcGFjb3RlL2dldC1zdHlsZS9saWIvZXNtL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BwYWNvdGUvcGl4ZWxzL2xpYi9lc20vaW5kZXguanMiLCJzcmMvdXRpbGl0aWVzL2ludGVyZmFjZXMudHMiLCJzcmMvcmVnaW9uU2V0dGluZ3MudHMiLCJzcmMvdXRpbGl0aWVzL3NldHRpbmdzUGFyc2VyLnRzIiwic3JjL3V0aWxpdGllcy9wYW5kb2NQYXJzZXIudHMiLCJzcmMvdXRpbGl0aWVzL3RleHRQYXJzZXIudHMiLCJzcmMvdXRpbGl0aWVzL3V0aWxzLnRzIiwic3JjL2RvbV9tYW5hZ2VyL2RvbU9iamVjdC50cyIsInNyYy91dGlsaXRpZXMvY3NzRGVmaW5pdGlvbnMudHMiLCJzcmMvdXRpbGl0aWVzL2VsZW1lbnRSZW5kZXJUeXBlUGFyc2VyLnRzIiwic3JjL2RvbV9tYW5hZ2VyL3JlZ2lvbmFsX21hbmFnZXJzL3JlZ2lvbk1hbmFnZXIudHMiLCJzcmMvZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvc3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXIudHMiLCJzcmMvZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvc2luZ2xlQ29sdW1uUmVnaW9uTWFuYWdlci50cyIsInNyYy9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9hdXRvTGF5b3V0UmVnaW9uTWFuYWdlci50cyIsInNyYy9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9yZWZsb3dSZWdpb25NYW5hZ2VyLnRzIiwic3JjL2RvbV9tYW5hZ2VyL3JlZ2lvbmFsX21hbmFnZXJzL3JlZ2lvbk1hbmFnZXJDb250YWluZXIudHMiLCJzcmMvZG9tX21hbmFnZXIvZG9tTWFuYWdlci50cyIsInNyYy9saXZlX3ByZXZpZXcvbWNtX2xpdmVQcmV2aWV3X3dpZGdldC50cyIsInNyYy9saXZlX3ByZXZpZXcvY202X2xpdmVQcmV2aWV3LnRzIiwic3JjL2xpdmVfcHJldmlldy9jbTZfbGl2ZVByZWl2ZXdfb25DbGlja0ZpeC50cyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XHJcbiAgICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cclxuICAgIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XHJcbiAgICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xyXG4gICAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcclxuICAgICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xyXG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnB1c2goXyk7XHJcbiAgICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XHJcbiAgICBkb25lID0gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XHJcbiAgICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcclxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcclxuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHZpZXcgPSAoKF9hID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVmYXVsdFZpZXcpIHx8IHdpbmRvdztcbiAgICBjb25zdCBzdHlsZSA9IHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICByZXR1cm4gKHN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8IHN0eWxlW3Byb3BlcnR5XSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBnZXRTdHlsZSB9IGZyb20gJ0BwYWNvdGUvZ2V0LXN0eWxlJztcbmNvbnN0IFBJWEVMU19QRVJfSU5DSCA9IDk2O1xuY29uc3QgTUlMTElNRVRSRVNfUEVSX0lOQ0ggPSAyNS40O1xuY29uc3QgUE9JTlRTX1BFUl9JTkNIID0gNzI7XG5jb25zdCBQSUNBU19QRVJfSU5DSCA9IDY7XG5mdW5jdGlvbiBmb250U2l6ZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgICAgICAgPyBnZXRTdHlsZShlbGVtZW50LCAnZm9udFNpemUnKSB8fCBmb250U2l6ZShlbGVtZW50LnBhcmVudEVsZW1lbnQpXG4gICAgICAgIDogZ2V0U3R5bGUod2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJ2ZvbnRTaXplJyk7XG59XG5mdW5jdGlvbiBwYXJzZShwcm92aWRlZExlbmd0aCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBsZW5ndGggPSBwcm92aWRlZExlbmd0aCB8fCAnMCc7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KGxlbmd0aCk7XG4gICAgY29uc3QgbWF0Y2ggPSBsZW5ndGgubWF0Y2goL1tcXGQtLl0rKFxcdyspJC8pO1xuICAgIGNvbnN0IHVuaXQgPSAoX2EgPSBtYXRjaCA9PT0gbnVsbCB8fCBtYXRjaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF0Y2hbMV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIHJldHVybiBbdmFsdWUsIHVuaXQudG9Mb3dlckNhc2UoKV07XG59XG5leHBvcnQgZnVuY3Rpb24gcGl4ZWxzKGxlbmd0aCwgZWxlbWVudCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdmlldyA9IChfYiA9IChfYSA9IGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWxlbWVudC5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVmYXVsdFZpZXcpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHdpbmRvdztcbiAgICBjb25zdCByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgdmlldy5kb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IFt2YWx1ZSwgdW5pdF0gPSBwYXJzZShsZW5ndGgpO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICBjYXNlICdyZW0nOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICogcGl4ZWxzKGZvbnRTaXplKHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKTtcbiAgICAgICAgY2FzZSAnZW0nOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICogcGl4ZWxzKGZvbnRTaXplKGVsZW1lbnQpLCBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQucGFyZW50RWxlbWVudCk7XG4gICAgICAgIGNhc2UgJ2luJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIFBJWEVMU19QRVJfSU5DSDtcbiAgICAgICAgY2FzZSAncSc6XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlICogUElYRUxTX1BFUl9JTkNIKSAvIE1JTExJTUVUUkVTX1BFUl9JTkNIIC8gNDtcbiAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAqIFBJWEVMU19QRVJfSU5DSCkgLyBNSUxMSU1FVFJFU19QRVJfSU5DSDtcbiAgICAgICAgY2FzZSAnY20nOlxuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAqIFBJWEVMU19QRVJfSU5DSCAqIDEwKSAvIE1JTExJTUVUUkVTX1BFUl9JTkNIO1xuICAgICAgICBjYXNlICdwdCc6XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlICogUElYRUxTX1BFUl9JTkNIKSAvIFBPSU5UU19QRVJfSU5DSDtcbiAgICAgICAgY2FzZSAncGMnOlxuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAqIFBJWEVMU19QRVJfSU5DSCkgLyBQSUNBU19QRVJfSU5DSDtcbiAgICAgICAgY2FzZSAndmgnOlxuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAqIHZpZXcuaW5uZXJIZWlnaHQgfHwgcm9vdC5jbGllbnRXaWR0aCkgLyAxMDA7XG4gICAgICAgIGNhc2UgJ3Z3JzpcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgKiB2aWV3LmlubmVyV2lkdGggfHwgcm9vdC5jbGllbnRIZWlnaHQpIC8gMTAwO1xuICAgICAgICBjYXNlICd2bWluJzpcbiAgICAgICAgICAgIHJldHVybiAoKHZhbHVlICpcbiAgICAgICAgICAgICAgICBNYXRoLm1pbih2aWV3LmlubmVyV2lkdGggfHwgcm9vdC5jbGllbnRXaWR0aCwgdmlldy5pbm5lckhlaWdodCB8fCByb290LmNsaWVudEhlaWdodCkpIC9cbiAgICAgICAgICAgICAgICAxMDApO1xuICAgICAgICBjYXNlICd2bWF4JzpcbiAgICAgICAgICAgIHJldHVybiAoKHZhbHVlICpcbiAgICAgICAgICAgICAgICBNYXRoLm1heCh2aWV3LmlubmVyV2lkdGggfHwgcm9vdC5jbGllbnRXaWR0aCwgdmlldy5pbm5lckhlaWdodCB8fCByb290LmNsaWVudEhlaWdodCkpIC9cbiAgICAgICAgICAgICAgICAxMDApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIi8qKlxuICogRmlsZTogL3NyYy91dGlsaXRpZXMvaW50ZXJmYWNlcy50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDIzIENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqL1xuaW1wb3J0IHsgcGl4ZWxzIH0gZnJvbSAnQHBhY290ZS9waXhlbHMnXG5cbmV4cG9ydCBjbGFzcyBIVE1MU2l6aW5nIHtcblxuICAgIHByaXZhdGUgX3NpemVWYWx1ZTogbnVtYmVyID0gMDtcbiAgICBwdWJsaWMgZ2V0IHNpemVWYWx1ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZVZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHNpemVWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3NpemVWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBwcml2YXRlIHdpZHRoU2V0OiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBzaXplVW5pdHM6IHN0cmluZyA9IFwicHhcIjtcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHZhbHVlOiBudW1iZXIsIHVuaXRzOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zaXplVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zaXplVW5pdHMgPSB1bml0cztcbiAgICB9XG4gICAgcHVibGljIHNldFdpZHRoKHZhbHVlOiBudW1iZXIpOiBIVE1MU2l6aW5nIHtcbiAgICAgICAgdGhpcy53aWR0aFNldCA9IHRydWU7XG4gICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZyh2YWx1ZSwgdGhpcy5zaXplVW5pdHMpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0VW5pdHModW5pdHM6IHN0cmluZyk6IEhUTUxTaXppbmcge1xuICAgICAgICByZXR1cm4gbmV3IEhUTUxTaXppbmcodGhpcy5zaXplVmFsdWUsIHVuaXRzKTtcbiAgICB9XG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnNpemVWYWx1ZX0ke3RoaXMuc2l6ZVVuaXRzfWA7XG4gICAgfVxuXG4gICAgY29udmVydFRvUFgocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgaWYodGhpcy5zaXplVW5pdHMgPT09IFwicHhcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2godGhpcy5zaXplVW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjbVwiOlxuICAgICAgICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgICAgICBjYXNlIFwiaW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJwdFwiOlxuICAgICAgICAgICAgY2FzZSBcInBjXCI6XG4gICAgICAgICAgICAgICAgbGV0IGFic1VuaXRzUmVzdWx0ID0gcGl4ZWxzKGAke3RoaXMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEhUTUxTaXppbmcoYWJzVW5pdHNSZXN1bHQsIFwicHhcIik7XG4gICAgICAgICAgICBjYXNlIFwidndcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ2aFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVWaWV3cG9ydFNpemluZygpO1xuICAgICAgICAgICAgY2FzZSBcImVtXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEZvbnRTaXplRnJvbUVsKCk7XG4gICAgICAgICAgICBjYXNlIFwiY2hcIjpcbiAgICAgICAgICAgICAgICBsZXQgY2ggPSBjcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgICAgICAgICBcImF0dHJcIjogeyBcInN0eWxlXCI6IFwid2lkdGg6IDFjaDtcIiB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0U2l6ZUZyb21TdHlsZVdpZHRoKGNoKTtcblxuICAgICAgICAgICAgY2FzZSBcImV4XCI6XG4gICAgICAgICAgICAgICAgbGV0IGV4ID0gY3JlYXRlRWwoXCJwXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJhdHRyXCI6IHsgXCJzdHlsZVwiOiBcIndpZHRoOiAxZXg7XCIgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNpemVGcm9tU3R5bGVXaWR0aChleCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTaXplRnJvbVN0eWxlV2lkdGgoZWw6IEhUTUxQYXJhZ3JhcGhFbGVtZW50KSB7XG5cbiAgICAgICAgICAgIGNvbnN0IERFRkFVTFRfU0laRSA9IDE2O1xuICAgICAgICAgICAgaWYocGFyZW50RWxlbWVudCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIVE1MU2l6aW5nKHRoaXMuc2l6ZVZhbHVlICogREVGQVVMVF9TSVpFLCBcInB4XCIpO1xuICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBsZXQgZXhUb1B4UmVzdWx0ID0gdGhpcy5zaXplVmFsdWUgKiBlbC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGlmKGVsLmNsaWVudFdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZXhUb1B4UmVzdWx0ID0gdGhpcy5zaXplVmFsdWUgKiBERUZBVUxUX1NJWkU7XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZyhleFRvUHhSZXN1bHQsIFwicHhcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRGb250U2l6ZUZyb21FbCgpIHtcblxuICAgICAgICAgICAgY29uc3QgREVGQVVMVF9TSVpFID0gMTY7XG4gICAgICAgICAgICBsZXQgZm9udFNpemUgPSBERUZBVUxUX1NJWkU7XG4gICAgICAgICAgICBsZXQgZW1Ub1B4UmVzdWx0ID0gZm9udFNpemUgKiB0aGlzLnNpemVWYWx1ZTtcblxuICAgICAgICAgICAgaWYocGFyZW50RWxlbWVudCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIVE1MU2l6aW5nKGVtVG9QeFJlc3VsdCwgXCJweFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHNpemluZyA9IEhUTUxTaXppbmcucGFyc2VUb1NpemluZyhwYXJlbnRFbGVtZW50LmdldENzc1Byb3BlcnR5VmFsdWUoXCJmb250LXNpemVcIikpO1xuICAgICAgICAgICAgaWYgKHNpemluZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gc2l6aW5nLnNpemVWYWx1ZTtcbiAgICAgICAgICAgICAgICBlbVRvUHhSZXN1bHQgPSBmb250U2l6ZSAqIHRoaXMuc2l6ZVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IEhUTUxTaXppbmcoZW1Ub1B4UmVzdWx0LCBcInB4XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVmlld3BvcnRTaXppbmcoKSB7XG5cbiAgICAgICAgICAgIGxldCBzY2FsZSA9IHRoaXMuc2l6ZVZhbHVlIC8gMTAwO1xuICAgICAgICAgICAgaWYocGFyZW50RWxlbWVudCA9PT0gbnVsbCB8fCBwYXJlbnRFbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGb3VuZCB1bmRlZmluZWQgcm9vdCBlbGVtZW50LiBVc2luZyBkZWZhdWx0IGNsaWVudCBzaXplLiBSZXN1bHQgbWF5IG5vdCBhcHBlYXIgYXMgaW50ZW5kZWQuXCIpO1xuICAgICAgICAgICAgICAgIGxldCBkZWZhdWx0U2l6aW5nID0gc2NhbGUgKiAxMjAwO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZyhkZWZhdWx0U2l6aW5nLCBcInB4XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmlld1dpZHRoID0gcGFyZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGxldCB2aWV3SGVpZ2h0ID0gcGFyZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBzd2l0Y2godGhpcy5zaXplVW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidndcIjpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdUb1B4UmVzdWx0ID0gc2NhbGUgKiB2aWV3V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZyh3VG9QeFJlc3VsdCwgXCJweFwiKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwidmhcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiJVwiOlxuICAgICAgICAgICAgICAgICAgICBsZXQgaFRvUHhSZXN1bHQgPSBzY2FsZSAqIHZpZXdIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZyhoVG9QeFJlc3VsdCwgXCJweFwiKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogSFRNTFNpemluZyB7XG4gICAgICAgIHJldHVybiBuZXcgSFRNTFNpemluZygwLCBcInB4XCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcGFyc2VUb1NpemluZyhzaXppbmdUZXh0OiBzdHJpbmcpOiBIVE1MU2l6aW5nIHwgbnVsbCB7XG5cbiAgICAgICAgaWYoc2l6aW5nVGV4dCA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdW5pdERhdGEgPSBIVE1MU2l6aW5nLmdldExlbmd0aFVuaXQoc2l6aW5nVGV4dCk7XG4gICAgICAgIGlmKHVuaXREYXRhLmlzVmFsaWQgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgbGV0IHVuaXRzOiBzdHJpbmcgPSB1bml0RGF0YS51bml0U3RyXG4gICAgICAgICAgICBsZXQgc2l6ZVRleHQ6IHN0cmluZyA9IHNpemluZ1RleHQucmVwbGFjZSh1bml0cywgXCJcIikudHJpbSgpO1xuICAgICAgICAgICAgbGV0IHNpemU6IG51bWJlciA9IHBhcnNlSW50KHNpemVUZXh0KTtcbiAgICAgICAgICAgIGlmKGlzTmFOKHNpemUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKHNpemUpLnNldFVuaXRzKHVuaXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljICBnZXRMZW5ndGhVbml0KGxlbmd0aFN0cjogc3RyaW5nKTogeyBpc1ZhbGlkOiBib29sZWFuLCB1bml0U3RyOiBzdHJpbmcgfSB7XG5cbiAgICAgICAgbGV0IGxhc3RDaGFyID0gbGVuZ3RoU3RyLnNsaWNlKGxlbmd0aFN0ci5sZW5ndGggLSAxKTtcbiAgICAgICAgbGV0IGxhc3RUd29DaGFycyA9IGxlbmd0aFN0ci5zbGljZShsZW5ndGhTdHIubGVuZ3RoIC0gMik7XG4gICAgXG4gICAgICAgIGxldCB1bml0U3RyID0gXCJcIlxuICAgICAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICBpZihsYXN0Q2hhciA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgIHVuaXRTdHIgPSBsYXN0Q2hhcjtcbiAgICAgICAgICAgIGlzVmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYobGFzdFR3b0NoYXJzID09PSBcImNtXCIgfHxcbiAgICAgICAgICAgICAgICBsYXN0VHdvQ2hhcnMgPT09IFwibW1cIiB8fFxuICAgICAgICAgICAgICAgIGxhc3RUd29DaGFycyA9PT0gXCJpblwiIHx8XG4gICAgICAgICAgICAgICAgbGFzdFR3b0NoYXJzID09PSBcInB4XCIgfHxcbiAgICAgICAgICAgICAgICBsYXN0VHdvQ2hhcnMgPT09IFwicHRcIiB8fFxuICAgICAgICAgICAgICAgIGxhc3RUd29DaGFycyA9PT0gXCJwY1wiIHx8XG4gICAgICAgICAgICAgICAgbGFzdFR3b0NoYXJzID09PSBcImVtXCIgfHxcbiAgICAgICAgICAgICAgICBsYXN0VHdvQ2hhcnMgPT09IFwiZXhcIiB8fFxuICAgICAgICAgICAgICAgIGxhc3RUd29DaGFycyA9PT0gXCJjaFwiIHx8XG4gICAgICAgICAgICAgICAgbGFzdFR3b0NoYXJzID09PSBcInZ3XCIgfHxcbiAgICAgICAgICAgICAgICBsYXN0VHdvQ2hhcnMgPT09IFwidmhcIiApIHtcbiAgICAgICAgICAgIHVuaXRTdHIgPSBsYXN0VHdvQ2hhcnM7XG4gICAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBpc1ZhbGlkLCB1bml0U3RyOiB1bml0U3RyIH1cbiAgICB9XG59XG5cbmNvbnN0IEFMTF9NT1VTRV9TVEFURVMgPSBbXG4gICAgXCJ1cFwiLFxuICAgIFwiZG93blwiLCBcbl0gYXMgY29uc3Q7XG50eXBlIE1vdXNlU3RhdGVUdXBsZSA9IHR5cGVvZiBBTExfTU9VU0VfU1RBVEVTO1xuZXhwb3J0IHR5cGUgTW91c2VTdGF0ZSA9IE1vdXNlU3RhdGVUdXBsZVtudW1iZXJdO1xuZXhwb3J0IGxldCBtb3VzZVN0YXRlOiBNb3VzZVN0YXRlID0gXCJ1cFwiOyBcbmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKCkgPT4ge1xuXHRtb3VzZVN0YXRlID0gXCJkb3duXCJcbn0pXG5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCAoKSA9PiB7XG5cdG1vdXNlU3RhdGUgPSBcInVwXCJcbn0pXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhcnRUYWdSZWdleE1hdGNoIHtcbiAgICBmb3VuZDogYm9vbGVhbjtcbiAgICBzdGFydFBvc2l0aW9uOiBudW1iZXI7XG4gICAgZW5kUG9zaXRpb246IG51bWJlcjtcbiAgICBtYXRjaExlbmd0aDogbnVtYmVyO1xuICAgIHJlZ2lvblR5cGU6IFJlZ2lvblR5cGU7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFN0YXJ0UmVnaW9uRGF0YSgpOiBTdGFydFRhZ1JlZ2V4TWF0Y2gge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm91bmQ6IGZhbHNlLFxuICAgICAgICBzdGFydFBvc2l0aW9uOiAtMSxcbiAgICAgICAgZW5kUG9zaXRpb246IC0xLFxuICAgICAgICBtYXRjaExlbmd0aDogMCxcbiAgICAgICAgcmVnaW9uVHlwZTogXCJDT0RFQkxPQ0tcIlxuICAgIH1cbn1cblxuY29uc3QgQUxMX1JFR0lPTl9UWVBFUz0gW1xuICAgIFwiQ09ERUJMT0NLXCIsXG4gICAgXCJERVBSRUNJQVRFRFwiLCBcbiAgICBcIlBBRE9DXCJcbl0gYXMgY29uc3Q7XG50eXBlIFJlZ2lvblR5cGVUdXBsZSA9IHR5cGVvZiBBTExfUkVHSU9OX1RZUEVTO1xuZXhwb3J0IHR5cGUgUmVnaW9uVHlwZSA9IFJlZ2lvblR5cGVUdXBsZVtudW1iZXJdOyIsIi8qXG4gKiBGaWxlbmFtZTogbXVsdGktY29sdW1uLW1hcmtkb3duL3NyYy9yZWdpb25TZXR0aW5ncy50c1xuICogQ3JlYXRlZCBEYXRlOiBUdWVzZGF5LCBGZWJydWFyeSAxc3QgMjAyMiwgMTI6MjM6NTMgcG1cbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvblxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvblxuICovXG5cbmltcG9ydCB7IEhUTUxTaXppbmcgfSBmcm9tIFwiLi91dGlsaXRpZXMvaW50ZXJmYWNlc1wiXG5cbmV4cG9ydCBlbnVtIEJvcmRlck9wdGlvbiB7XG4gICAgZW5hYmxlZCxcbiAgICBvbixcbiAgICB0cnVlLFxuICAgIGRpc2FibGVkLFxuICAgIG9mZixcbiAgICBmYWxzZVxufVxuXG5leHBvcnQgZW51bSBTaGFkb3dPcHRpb24ge1xuICAgIGVuYWJsZWQsXG4gICAgb24sXG4gICAgdHJ1ZSxcbiAgICBkaXNhYmxlZCxcbiAgICBvZmYsXG4gICAgZmFsc2Vcbn1cblxuY29uc3QgQUxMX0xBWU9VVFMgPSBbXG4gICAgXCJzdGFuZGFyZFwiLFxuICAgIFwibGVmdFwiLCBcbiAgICBcImZpcnN0XCIsIFxuICAgIFwiY2VudGVyXCIsXG4gICAgXCJtaWRkbGVcIixcbiAgICBcInNlY29uZFwiLFxuICAgIFwicmlnaHRcIixcbiAgICBcInRoaXJkXCIsXG4gICAgXCJsYXN0XCJcbl0gYXMgY29uc3Q7XG50eXBlIENvbHVtbkxheW91dFR1cGxlID0gdHlwZW9mIEFMTF9MQVlPVVRTO1xuZXhwb3J0IHR5cGUgQ29sdW1uTGF5b3V0ID0gQ29sdW1uTGF5b3V0VHVwbGVbbnVtYmVyXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29sdW1uTGF5b3V0KHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyBDb2x1bW5MYXlvdXQge1xuICByZXR1cm4gQUxMX0xBWU9VVFMuaW5jbHVkZXModmFsdWUudG9Mb3dlckNhc2UoKSBhcyBDb2x1bW5MYXlvdXQpXG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDb2x1bW5MYXlvdXQodmFsdWU6IHN0cmluZyB8IENvbHVtbkxheW91dCk6IENvbHVtbkxheW91dCB7XG4gICAgcmV0dXJuICh2YWx1ZS50b0xvd2VyQ2FzZSgpIGFzIENvbHVtbkxheW91dClcbn1cblxuY29uc3QgQUxMX1NJTkdMRV9DT0xVTU5fU0laRVMgPSBbXG4gICAgXCJzbWFsbFwiLFxuICAgIFwibWVkaXVtXCIsXG4gICAgXCJsYXJnZVwiLFxuICAgIFwiZnVsbFwiXG5dXG50eXBlIFNpbmdsZUNvbHVtblNpemVUdXBsZSA9IHR5cGVvZiBBTExfU0lOR0xFX0NPTFVNTl9TSVpFUztcbmV4cG9ydCB0eXBlIFNpbmdsZUNvbHVtblNpemUgPSBTaW5nbGVDb2x1bW5TaXplVHVwbGVbbnVtYmVyXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1NpbmdsZUNvbHVtblNpemUodmFsdWU6IHN0cmluZyk6IHZhbHVlIGlzIFNpbmdsZUNvbHVtblNpemUge1xuICAgIHJldHVybiBBTExfU0lOR0xFX0NPTFVNTl9TSVpFUy5pbmNsdWRlcyh2YWx1ZS50b0xvd2VyQ2FzZSgpIGFzIFNpbmdsZUNvbHVtblNpemUpXG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTaW5nbGVDb2x1bW5TaXplKHZhbHVlOiBzdHJpbmcgfCBTaW5nbGVDb2x1bW5TaXplKTogU2luZ2xlQ29sdW1uU2l6ZSB7XG4gICAgcmV0dXJuICh2YWx1ZS50b0xvd2VyQ2FzZSgpIGFzIFNpbmdsZUNvbHVtblNpemUpXG59XG5cbmV4cG9ydCBlbnVtIENvbnRlbnRPdmVyZmxvd1R5cGUge1xuICAgIHNjcm9sbCxcbiAgICBoaWRkZW5cbn1cblxuZXhwb3J0IGVudW0gQWxpZ25tZW50VHlwZSB7XG4gICAgbGVmdCxcbiAgICBjZW50ZXIsXG4gICAgcmlnaHRcbn1cblxuZXhwb3J0IHR5cGUgTXVsdGlDb2x1bW5TZXR0aW5ncyA9IHtcbiAgICBjb2x1bW5JRDogc3RyaW5nLFxuICAgIG51bWJlck9mQ29sdW1uczogbnVtYmVyLFxuICAgIGRyYXdCb3JkZXI6IGJvb2xlYW5bXSxcbiAgICBkcmF3U2hhZG93OiBib29sZWFuLFxuICAgIGF1dG9MYXlvdXQ6IGJvb2xlYW5cbiAgICBjb2x1bW5TaXplOiBTaW5nbGVDb2x1bW5TaXplIHwgQ29sdW1uTGF5b3V0IHwgSFRNTFNpemluZ1tdLFxuICAgIGNvbHVtblBvc2l0aW9uOiBDb2x1bW5MYXlvdXQsXG4gICAgY29sdW1uU3BhY2luZzogc3RyaW5nW10sXG4gICAgY29udGVudE92ZXJmbG93OiBDb250ZW50T3ZlcmZsb3dUeXBlW10sXG4gICAgYWxpZ25tZW50OiBBbGlnbm1lbnRUeXBlW10sXG4gICAgY29sdW1uSGVpZ2h0OiBIVE1MU2l6aW5nIHwgbnVsbCxcbiAgICBmdWxsRG9jUmVmbG93OiBib29sZWFuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TXVsdGlDb2x1bW5TZXR0aW5ncygpOiBNdWx0aUNvbHVtblNldHRpbmdzIHtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNvbHVtbklEOiBcIlwiLFxuICAgICAgICBudW1iZXJPZkNvbHVtbnM6IDIsXG4gICAgICAgIGRyYXdCb3JkZXI6IFt0cnVlXSxcbiAgICAgICAgZHJhd1NoYWRvdzogdHJ1ZSxcbiAgICAgICAgYXV0b0xheW91dDogZmFsc2UsXG4gICAgICAgIGNvbHVtblNpemU6IFwic3RhbmRhcmRcIixcbiAgICAgICAgY29sdW1uUG9zaXRpb246IFwic3RhbmRhcmRcIixcbiAgICAgICAgY29sdW1uU3BhY2luZzogW1wiXCJdLFxuICAgICAgICBjb250ZW50T3ZlcmZsb3c6IFtDb250ZW50T3ZlcmZsb3dUeXBlLnNjcm9sbF0sXG4gICAgICAgIGFsaWdubWVudDogW0FsaWdubWVudFR5cGUubGVmdF0sXG4gICAgICAgIGNvbHVtbkhlaWdodDogbnVsbCxcbiAgICAgICAgZnVsbERvY1JlZmxvdzogZmFsc2VcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGREcmF3Q29sdW1uQm9yZGVyKGluZGV4OiBudW1iZXIsIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKTogYm9vbGVhbiB7XG5cbiAgICBpZihzZXR0aW5ncy5kcmF3Qm9yZGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SW5kZXhlZENsYW1wZWRBcnJheVZhbHVlKGluZGV4LCBzZXR0aW5ncy5kcmF3Qm9yZGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbHVtbk92ZXJmbG93U3RhdGUoaW5kZXg6IG51bWJlciwgc2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpOiBDb250ZW50T3ZlcmZsb3dUeXBlIHtcblxuICAgIGlmKHNldHRpbmdzLmNvbnRlbnRPdmVyZmxvdy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIENvbnRlbnRPdmVyZmxvd1R5cGUuc2Nyb2xsXG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEluZGV4ZWRDbGFtcGVkQXJyYXlWYWx1ZShpbmRleCwgc2V0dGluZ3MuY29udGVudE92ZXJmbG93KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbHVtbkFsaWdubWVudFN0YXRlKGluZGV4OiBudW1iZXIsIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKTogQWxpZ25tZW50VHlwZSB7XG5cbiAgICBpZihzZXR0aW5ncy5hbGlnbm1lbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBBbGlnbm1lbnRUeXBlLmxlZnRcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SW5kZXhlZENsYW1wZWRBcnJheVZhbHVlKGluZGV4LCBzZXR0aW5ncy5hbGlnbm1lbnQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2x1bW5TcGFjaW5nU3RhdGUoaW5kZXg6IG51bWJlciwgc2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpOiBzdHJpbmcge1xuXG4gICAgaWYoc2V0dGluZ3MuY29sdW1uU3BhY2luZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBtYXJnaW4taW5saW5lOiAke2dldEluZGV4ZWRDbGFtcGVkQXJyYXlWYWx1ZShpbmRleCwgc2V0dGluZ3MuY29sdW1uU3BhY2luZyl9O2A7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleGVkQ2xhbXBlZEFycmF5VmFsdWU8VD4oaW5kZXg6IG51bWJlciwgYXJyOiBUW10pIHtcblxuICAgIGlmKGFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3coXCJFcnJvciBnZXR0aW5nIHZhbHVlIGZyb20gZW1wdHkgYXJyYXkuXCIpXG4gICAgfVxuXG4gICAgaWYoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBhcnJbMF07XG4gICAgfVxuXG4gICAgaWYoaW5kZXggPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBhcnJbaW5kZXhdO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIubGFzdCgpO1xufSIsIi8qKlxuICogRmlsZTogL3NyYy91dGlsaXRpZXMvc2V0dGluZ3NQYXJzZXIudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICogQ3JlYXRlZCBEYXRlOiBGcmlkYXksIEp1bmUgM3JkIDIwMjIsIDg6MTYgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICogQXV0aG9yOiBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICogQ29weXJpZ2h0IChjKSAyMDIyIENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICovXG5cbmltcG9ydCB7IEhUTUxTaXppbmcgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtblNldHRpbmdzLCBDb2x1bW5MYXlvdXQsIEJvcmRlck9wdGlvbiwgU2hhZG93T3B0aW9uLCBnZXREZWZhdWx0TXVsdGlDb2x1bW5TZXR0aW5ncywgU2luZ2xlQ29sdW1uU2l6ZSwgQ29udGVudE92ZXJmbG93VHlwZSwgQWxpZ25tZW50VHlwZSwgaXNDb2x1bW5MYXlvdXQsIHZhbGlkYXRlQ29sdW1uTGF5b3V0IH0gZnJvbSBcIi4uL3JlZ2lvblNldHRpbmdzXCI7XG5cbi8qKlxuICogSGVyZSB3ZSBkZWZpbmUgYWxsIG9mIHRoZSB2YWxpZCBzZXR0aW5ncyBzdHJpbmdzIHRoYXQgdGhlIHVzZXIgY2FuIGVudGVyIGZvciBlYWNoIHNldHRpbmcgdHlwZS5cbiAqIFRoZSBzdHJpbmdzIGFyZSB0aGVuIG1hcHBlZCB0d2ljZSwgZmlyc3QgdG8gYSB2YWxpZCByZWdleCBzdHJpbmcgdGhhdCBzZWFyY2hlcyBmb3IgdGhlIHNldHRpbmdcbiAqIG5hbWUsIGlnbm9yaW5nIGFsbCBleHRyYSBzcGFjZXMgYW5kIGxldHRlciBjYXNlLCBhbmQgdGhlbiBtYXBlZCB0byBhIFJlZ0V4IG9iamVjdCB0byBiZSB1c2VkIFxuICogd2hlbiBwYXJzaW5nLlxuICovXG5jb25zdCBDT0xfUE9TSVRJT05fT1BUSU9OX1NUUlM6IHN0cmluZ1tdID0gW1xuICAgIFwiY29sdW1uIHBvc2l0aW9uXCIsXG4gICAgXCJjb2wgcG9zaXRpb25cIixcbiAgICBcImNvbHVtbiBsb2NhdGlvblwiLFxuICAgIFwiY29sIGxvY2F0aW9uXCIsXG4gICAgXCJzaW5nbGUgY29sdW1uIGxvY2F0aW9uXCIsXG4gICAgXCJzaW5nbGUgY29sdW1uIHBvc2l0aW9uXCIsXG5dO1xuY29uc3QgQ09MX1BPU0lUSU9OX1JFR0VYX0FSUjogUmVnRXhwW10gPSBDT0xfUE9TSVRJT05fT1BUSU9OX1NUUlMubWFwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgpLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xufSk7XG5cbmNvbnN0IENPTF9TSVpFX09QVElPTl9TVFJTOiBzdHJpbmdbXSA9IFtcbiAgICBcImNvbHVtbiBzaXplXCIsXG4gICAgXCJjb2x1bW4gd2lkdGhcIixcbiAgICBcImNvbCBzaXplXCIsXG4gICAgXCJjb2wgd2lkdGhcIixcbiAgICBcInNpbmdsZSBjb2x1bW4gc2l6ZVwiLFxuICAgIFwic2luZ2xlIGNvbCBzaXplXCIsXG4gICAgXCJzaW5nbGUgY29sdW1uIHdpZHRoXCIsXG4gICAgXCJzaW5nbGUgY29sIHdpZHRoXCIsXG4gICAgXCJsYXJnZXN0IGNvbHVtblwiXG5dO1xuY29uc3QgQ09MX1NJWkVfT1BUSU9OX1JFR0VYX0FSUjogUmVnRXhwW10gPSBDT0xfU0laRV9PUFRJT05fU1RSUy5tYXAoY29udmVydFN0cmluZ1RvU2V0dGluZ3NSZWdleCkubWFwKCh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHZhbHVlLCBcImlcIik7XG59KTtcblxuY29uc3QgTlVNQkVSX09GX0NPTFVNTlNfU1RSUyA9IFtcbiAgICBcIm51bWJlciBvZiBjb2x1bW5zXCIsXG4gICAgXCJudW0gb2YgY29sc1wiLFxuICAgIFwiY29sIGNvdW50XCIsXG4gICAgXCJjb2x1bW4gY291bnRcIlxuXVxuY29uc3QgTlVNQkVSX09GX0NPTFVNTlNfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IE5VTUJFUl9PRl9DT0xVTU5TX1NUUlMubWFwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgpLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xufSk7XG5cbmNvbnN0IERSQVdfQk9SREVSX1NUUlMgPSBbXG4gICAgXCJib3JkZXJcIlxuXVxuY29uc3QgRFJBV19CT1JERVJfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IERSQVdfQk9SREVSX1NUUlMubWFwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgpLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xufSk7XG5cbmNvbnN0IERSQVdfU0hBRE9XX1NUUlMgPSBbXG4gICAgXCJzaGFkb3dcIlxuXVxuY29uc3QgRFJBV19TSEFET1dfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IERSQVdfU0hBRE9XX1NUUlMubWFwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgpLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xufSk7XG5cbmNvbnN0IEFVVE9fTEFZT1VUX1NFVFRJTkdfU1RSUyA9IFtcbiAgICBcImF1dG8gbGF5b3V0XCIsXG4gICAgXCJmbHVpZCBkaXZcIixcbiAgICBcImZsdWlkIGRpdnNcIixcbiAgICBcImZsdWlkIGNvbHVtbnNcIixcbiAgICBcImZsdWlkIGNvbHNcIixcbiAgICBcImZsdWlkIGNvbFwiXG5dXG5jb25zdCBBVVRPX0xBWU9VVF9SRUdFWF9BUlI6IFJlZ0V4cFtdID0gQVVUT19MQVlPVVRfU0VUVElOR19TVFJTLm1hcChjb252ZXJ0U3RyaW5nVG9TZXR0aW5nc1JlZ2V4KS5tYXAoKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAodmFsdWUsIFwiaVwiKTtcbn0pO1xuXG5jb25zdCBDT0xVTU5fU1BBQ0lOR19SRUdFWF9BUlI6IFJlZ0V4cFtdID0gW1xuICAgIFwiY29sdW1uIHNwYWNpbmdcIixcbiAgICBcImNvbHVtbiBnYXBcIixcbiAgICBcImNvbHVtbiBzZXBcIlxuXS5tYXAoKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoY29udmVydFN0cmluZ1RvU2V0dGluZ3NSZWdleCh2YWx1ZSksIFwiaVwiKTtcbn0pO1xuXG5jb25zdCBDT0xVTU5fSEVJR0hUX1JFR0VYX0FSUjogUmVnRXhwW10gPSBbXG4gICAgXCJjb2x1bW4gaGVpZ2h0XCIsXG4gICAgXCJjb2wgaGVpZ2h0XCIsXG4gICAgXCJjb2x1bW4gbWF4IGhlaWdodFwiLFxuICAgIFwiY29sIG1heCBoZWlnaHRcIixcbiAgICBcIm1heCBjb2x1bW4gaGVpZ2h0XCIsXG4gICAgXCJtYXggY29sIGhlaWdodFwiXG5dLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChjb252ZXJ0U3RyaW5nVG9TZXR0aW5nc1JlZ2V4KHZhbHVlKSwgXCJpXCIpO1xufSk7XG5cbmNvbnN0IENPTlRFTlRfT1ZFUkZMT1dfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IFtcbiAgICBcIm92ZXJmbG93XCIsXG4gICAgXCJjb250ZW50IG92ZXJmbG93XCJcbl0ubWFwKCh2YWx1ZSkgPT4ge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgodmFsdWUpLCBcImlcIilcbn0pO1xuXG5jb25zdCBBTElHTk1FTlRfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IFtcbiAgICBcImFsaWdubWVudFwiLFxuICAgIFwiY29udGVudCBhbGlnbm1lbnRcIixcbiAgICBcImFsaWduXCIsXG4gICAgXCJjb250ZW50IGFsaWduXCIsXG4gICAgXCJhbGlnbiBjb250ZW50XCIsXG4gICAgXCJ0ZXh0IGFsaWduXCIsXG4gICAgXCJhbGlnbiB0ZXh0XCIsXG4gICAgXCJUZXh0IEFsaWdubWVudFwiXG5dLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChjb252ZXJ0U3RyaW5nVG9TZXR0aW5nc1JlZ2V4KHZhbHVlKSwgXCJpXCIpO1xufSk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzZWFyY2hlcyB0aGUgc2V0dGluZ3Mgc3RyaW5nIHRocm91Z2ggZWFjaCByZWdleCBvcHRpb24uIElmIG9uZSBvZiB0aGUgcmVnZXhcbiAqIHZhbHVlcyBtYXRjaCwgaXQgcmV0dXJucyB0aGUgZmlyc3QgZ3JvdXAgZm91bmQgYnkgdGhlIHJlZ2V4LiBUaGlzIGlzIGRlcGVuZGVkIG9uIHByb3BlclxuICogcmVnZXggZm9ybWF0dGluZyB3aGljaCBpcyBkb25lIGJ5IHRoZSBjb252ZXJ0U3RyaW5nVG9TZXR0aW5nc1JlZ2V4IGZ1bmN0aW9uIGRlZmluZWQgYmVsb3cuXG4gKiBcbiAqIEBwYXJhbSBzZXR0aW5nc1N0cmluZyBUaGUgdmFsdWUgdGhhdCBtYXkgbWF0Y2ggb25lIG9mIHRoZSBzZXR0aW5nIG9wdGlvbnMuXG4gKiBAcGFyYW0gdmFsaWRTZXR0aW5nRm9ybWF0UmVnRXggVGhlIHNldHRpbmdzIG9wdGlvbnMgdGhyb3VnaCB3aGljaCB0byBjaGVjayBhbGwgb3B0aW9ucy4gSWYgb25lIG9mIHRoZXNlIHJlZ2V4IFxuICogdmFsdWVzIG1hdGNoIG9uIHRoZSBzdHJpbmcgd2UgYnJlYWsgZnJvbSB0aGUgbG9vcCByZXR1cm5pbmcgdGhlIGZvdW5kIHZhbHVlLlxuICogXG4gKiBAcmV0dXJucyB0aGUgdXNlciBlbnRlcmVkIGRhdGEgaWYgdGhlIHNldHRpbmcgaXMgYSBtYXRjaCwgb3IgbnVsbCBpZiBub24gb2YgdGhlIG9wdGlvbnMgbWF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0U2V0dGluZ3NEYXRhRnJvbUtleXMoc2V0dGluZ3NTdHJpbmc6IHN0cmluZywgdmFsaWRTZXR0aW5nRm9ybWF0UmVnRXg6IFJlZ0V4cFtdKTogc3RyaW5nIHwgbnVsbCB7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkU2V0dGluZ0Zvcm1hdFJlZ0V4Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgbGV0IHJlZ2V4U2VhcmNoRGF0YSA9IHZhbGlkU2V0dGluZ0Zvcm1hdFJlZ0V4W2ldLmV4ZWMoc2V0dGluZ3NTdHJpbmcpXG4gICAgICAgIGlmKHJlZ2V4U2VhcmNoRGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2V4U2VhcmNoRGF0YVsxXS50cmltKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTaW5nbGVDb2x1bW5TZXR0aW5ncyhzZXR0aW5nc1N0cjogc3RyaW5nLCBvcmlnaW5hbFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKTogTXVsdGlDb2x1bW5TZXR0aW5ncyB7XG5cbiAgICBvcmlnaW5hbFNldHRpbmdzLmNvbHVtblNpemUgPSBcIm1lZGl1bVwiO1xuICAgIGxldCBzZXR0aW5nc0xpbmVzID0gc2V0dGluZ3NTdHIuc3BsaXQoXCJcXG5cIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXR0aW5nc0xpbmVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgbGV0IHNldHRpbmdzTGluZSA9IHNldHRpbmdzTGluZXNbaV07XG4gICAgICAgIGxldCBzZXR0aW5nc0RhdGEgPSBnZXRTZXR0aW5nc0RhdGFGcm9tS2V5cyhzZXR0aW5nc0xpbmUsIENPTF9QT1NJVElPTl9SRUdFWF9BUlIpO1xuICAgICAgICBpZiAoc2V0dGluZ3NEYXRhICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIG9yaWdpbmFsU2V0dGluZ3MuY29sdW1uUG9zaXRpb24gPSBwYXJzZUZvclNpbmdsZUNvbHVtbkxvY2F0aW9uKHNldHRpbmdzRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXR0aW5nc0RhdGEgPSBnZXRTZXR0aW5nc0RhdGFGcm9tS2V5cyhzZXR0aW5nc0xpbmUsIENPTF9TSVpFX09QVElPTl9SRUdFWF9BUlIpO1xuICAgICAgICBpZiAoc2V0dGluZ3NEYXRhICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIG9yaWdpbmFsU2V0dGluZ3MuY29sdW1uU2l6ZSA9IHBhcnNlRm9yU2luZ2xlQ29sdW1uU2l6ZShzZXR0aW5nc0RhdGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3JpZ2luYWxTZXR0aW5ncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29sdW1uU2V0dGluZ3Moc2V0dGluZ3NTdHI6IHN0cmluZyk6IE11bHRpQ29sdW1uU2V0dGluZ3Mge1xuXG4gICAgbGV0IHBhcnNlZFNldHRpbmdzID0gZ2V0RGVmYXVsdE11bHRpQ29sdW1uU2V0dGluZ3MoKTtcblxuICAgIGxldCBzZXR0aW5nc0xpbmVzID0gc2V0dGluZ3NTdHIuc3BsaXQoXCJcXG5cIik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldHRpbmdzTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNldHRpbmdzTGluZSA9IHNldHRpbmdzTGluZXNbaV07XG5cbiAgICAgICAgY2hlY2tTZXR0aW5nSXNSZWdpb25JRChzZXR0aW5nc0xpbmUsIHBhcnNlZFNldHRpbmdzKTtcbiAgICAgICAgY2hlY2tTZXR0aW5nSXNOdW1iZXJPZkNvbHVtbnMoc2V0dGluZ3NMaW5lLCBwYXJzZWRTZXR0aW5ncyk7XG4gICAgICAgIGNoZWNrU2V0dGluZ0RlZmluZXNDb2x1bW5TaXplKHNldHRpbmdzTGluZSwgcGFyc2VkU2V0dGluZ3MpO1xuICAgICAgICBjaGVja1NldHRpbmdJc0RyYXdCb3JkZXIoc2V0dGluZ3NMaW5lLCBwYXJzZWRTZXR0aW5ncyk7XG4gICAgICAgIGNoZWNrU2V0dGluZ0lzRHJhd1NoYWRvdyhzZXR0aW5nc0xpbmUsIHBhcnNlZFNldHRpbmdzKTtcbiAgICAgICAgY2hlY2tTZXR0aW5nSXNBdXRvTGF5b3V0KHNldHRpbmdzTGluZSwgcGFyc2VkU2V0dGluZ3MpO1xuICAgICAgICBjaGVja1NldHRpbmdJc0NvbHVtblNwYWNpbmcoc2V0dGluZ3NMaW5lLCBwYXJzZWRTZXR0aW5ncyk7XG4gICAgICAgIGNoZWNrU2V0dGluZ0lzQ29udGVudE92ZXJmbG93KHNldHRpbmdzTGluZSwgcGFyc2VkU2V0dGluZ3MpO1xuICAgICAgICBjaGVja1NldHRpbmdJc0NvbHVtbkFsaWdubWVudChzZXR0aW5nc0xpbmUsIHBhcnNlZFNldHRpbmdzKTtcbiAgICAgICAgY2hlY2tTZXR0aW5nSXNDb2x1bW5IZWlnaHQoc2V0dGluZ3NMaW5lLCBwYXJzZWRTZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlZFNldHRpbmdzO1xufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc051bWJlck9mQ29sdW1ucyhzZXR0aW5nc0xpbmU6IHN0cmluZywgcGFyc2VkU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcblxuICAgIGxldCBzZXR0aW5nc0RhdGEgPSBnZXRTZXR0aW5nc0RhdGFGcm9tS2V5cyhzZXR0aW5nc0xpbmUsIE5VTUJFUl9PRl9DT0xVTU5TX1JFR0VYX0FSUik7XG4gICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNldHRpbmdWYWx1ZXMgPSBwYXJzZUZvck11bHRpU2V0dGluZ3Moc2V0dGluZ3NEYXRhKTtcbiAgICBzZXR0aW5nc0RhdGEgPSBzZXR0aW5nVmFsdWVzWzBdO1xuXG4gICAgbGV0IG51bU9mQ29scyA9IHBhcnNlSW50KHNldHRpbmdzRGF0YSk7XG4gICAgaWYgKE51bWJlci5pc05hTihudW1PZkNvbHMpID09PSBmYWxzZSkge1xuICAgICAgICBpZiAobnVtT2ZDb2xzID49IDEpIHtcbiAgICAgICAgICAgIHBhcnNlZFNldHRpbmdzLm51bWJlck9mQ29sdW1ucyA9IG51bU9mQ29scztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tTZXR0aW5nSXNSZWdpb25JRChzZXR0aW5nc0xpbmU6IHN0cmluZywgcGFyc2VkU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcbiAgICBsZXQgc2V0dGluZ3NEYXRhID0gZ2V0U2V0dGluZ3NEYXRhRnJvbUtleXMoc2V0dGluZ3NMaW5lLCBDT0RFQkxPQ0tfUkVHSU9OX0lEX1JFR0VYX0FSUik7XG4gICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGFyc2VkU2V0dGluZ3MuY29sdW1uSUQgPSBzZXR0aW5nc0RhdGE7XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2V0dGluZ0RlZmluZXNDb2x1bW5TaXplKHNldHRpbmdzTGluZTogc3RyaW5nLCBwYXJzZWRTZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncykge1xuXG4gICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgQ09MX1NJWkVfT1BUSU9OX1JFR0VYX0FSUik7XG4gICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNldHRpbmdWYWx1ZXMgPSBwYXJzZUZvck11bHRpU2V0dGluZ3Moc2V0dGluZ3NEYXRhKTtcbiAgICBpZihzZXR0aW5nVmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBvbmx5IDEgaXRlbSB3ZSBhdHRlbXB0IHRvIHBhcnNlIG91dCBhIGxheW91dCB0eXBlLiBJZiB3ZSBnZXQgYSB2YWxpZCBpdGVtIHdlIFxuICAgICAgICAvLyByZXR1cm4gaGVyZS5cbiAgICAgICAgaWYgKGlzQ29sdW1uTGF5b3V0KHNldHRpbmdWYWx1ZXNbMF0pKSB7XG4gICAgICAgICAgICBwYXJzZWRTZXR0aW5ncy5jb2x1bW5TaXplID0gdmFsaWRhdGVDb2x1bW5MYXlvdXQoc2V0dGluZ1ZhbHVlc1swXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgd2lkdGhzOiBIVE1MU2l6aW5nW10gPSBbXVxuICAgIGZvcihsZXQgc2V0dGluZyBvZiBzZXR0aW5nVmFsdWVzKSB7XG5cbiAgICAgICAgbGV0IHBhcnNlZCA9IEhUTUxTaXppbmcucGFyc2VUb1NpemluZyhzZXR0aW5nLnRyaW0oKSk7XG4gICAgICAgIGlmKHBhcnNlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2lkdGhzLnB1c2gocGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vbmUgYXJlIHBhcnNlZCBwcm9wZXJseSB0byBhIHdpZHRoIHRoZW4gd2UgcmV0dXJuIGEgZGVmYXVsdC5cbiAgICBpZih3aWR0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkVycm9yIHBhcnNpbmcgY29sdW1uIGxheW91dCBvciB3aWR0aCwgZGVmYXVsdGluZyB0byBzdGFuZGFyZCBsYXlvdXQuXCIpXG4gICAgICAgIHBhcnNlZFNldHRpbmdzLmNvbHVtblNpemUgPSBcInN0YW5kYXJkXCI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBwYXJzZWQgc29tZSBsZW5ndGhzIGFuZCBzb21lIGRpZCBub3QgcGFyc2UgcHJvcGVybHksIHRoZSB1c2VyIGhhcyBlaXRoZXJcbiAgICAvLyBwb29ybHkgZGVmaW5lZCB0aGVpciBzZXR0aW5ncyBvciBpcyBhdHRlbXB0aW5nIHRvIGJyZWFrIHVzLiBUYWtlIHRoZSBmaXJzdCB2YWxpZCBvcHRpb25cbiAgICAvLyBiZXR3ZWVuIHRoZSB0d28gYXJyYXlzLlxuICAgIGlmKHdpZHRocy5sZW5ndGggIT09IHNldHRpbmdWYWx1ZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgZm9yKGxldCBzZXR0aW5nIG9mIHNldHRpbmdWYWx1ZXMpIHtcblxuICAgICAgICAgICAgbGV0IHVuaXREYXRhID0gSFRNTFNpemluZy5nZXRMZW5ndGhVbml0KHNldHRpbmcpO1xuICAgICAgICAgICAgaWYodW5pdERhdGEuaXNWYWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZFNldHRpbmdzLmNvbHVtblNpemUgPSB3aWR0aHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNDb2x1bW5MYXlvdXQoc2V0dGluZ1ZhbHVlc1swXSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRTZXR0aW5ncy5jb2x1bW5TaXplID0gdmFsaWRhdGVDb2x1bW5MYXlvdXQoc2V0dGluZ1ZhbHVlc1swXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VkU2V0dGluZ3MuY29sdW1uU2l6ZSA9IHdpZHRocztcbn1cblxuZnVuY3Rpb24gY2hlY2tTZXR0aW5nSXNEcmF3Qm9yZGVyKHNldHRpbmdzTGluZTogc3RyaW5nLCBwYXJzZWRTZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncykge1xuXG4gICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgRFJBV19CT1JERVJfUkVHRVhfQVJSKTtcbiAgICBpZiAoc2V0dGluZ3NEYXRhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYm9yZGVyczogYm9vbGVhbltdID0gW11cbiAgICBsZXQgc2V0dGluZ1ZhbHVlcyA9IHBhcnNlRm9yTXVsdGlTZXR0aW5ncyhzZXR0aW5nc0RhdGEpO1xuICAgIGZvcihsZXQgc2V0dGluZ3NEYXRhIG9mIHNldHRpbmdWYWx1ZXMpIHtcblxuICAgICAgICBsZXQgYm9yZGVyU3RhdGUgPSB0cnVlO1xuICAgICAgICBsZXQgaXNCb3JkZXJEcmF3bjogQm9yZGVyT3B0aW9uID0gKDxhbnk+Qm9yZGVyT3B0aW9uKVtzZXR0aW5nc0RhdGFdO1xuICAgICAgICBpZiAoaXNCb3JkZXJEcmF3biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGlzQm9yZGVyRHJhd24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIChCb3JkZXJPcHRpb24uZGlzYWJsZWQpOlxuICAgICAgICAgICAgICAgIGNhc2UgKEJvcmRlck9wdGlvbi5vZmYpOlxuICAgICAgICAgICAgICAgIGNhc2UgKEJvcmRlck9wdGlvbi5mYWxzZSk6XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBib3JkZXJzLnB1c2goYm9yZGVyU3RhdGUpO1xuICAgIH1cblxuICAgIHBhcnNlZFNldHRpbmdzLmRyYXdCb3JkZXIgPSBib3JkZXJzO1xufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc0RyYXdTaGFkb3coc2V0dGluZ3NMaW5lOiBzdHJpbmcsIHBhcnNlZFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG5cbiAgICBsZXQgc2V0dGluZ3NEYXRhID0gZ2V0U2V0dGluZ3NEYXRhRnJvbUtleXMoc2V0dGluZ3NMaW5lLCBEUkFXX1NIQURPV19SRUdFWF9BUlIpO1xuICAgIGlmIChzZXR0aW5nc0RhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzZXR0aW5nVmFsdWVzID0gcGFyc2VGb3JNdWx0aVNldHRpbmdzKHNldHRpbmdzRGF0YSk7XG4gICAgc2V0dGluZ3NEYXRhID0gc2V0dGluZ1ZhbHVlc1swXTtcblxuICAgIGxldCBpc1NoYWRvd0RyYXduOiBTaGFkb3dPcHRpb24gPSAoPGFueT5TaGFkb3dPcHRpb24pW3NldHRpbmdzRGF0YV07XG4gICAgaWYgKGlzU2hhZG93RHJhd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzd2l0Y2ggKGlzU2hhZG93RHJhd24pIHtcbiAgICAgICAgICAgIGNhc2UgKFNoYWRvd09wdGlvbi5kaXNhYmxlZCk6XG4gICAgICAgICAgICBjYXNlIChTaGFkb3dPcHRpb24ub2ZmKTpcbiAgICAgICAgICAgIGNhc2UgKFNoYWRvd09wdGlvbi5mYWxzZSk6XG4gICAgICAgICAgICAgICAgcGFyc2VkU2V0dGluZ3MuZHJhd1NoYWRvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc0F1dG9MYXlvdXQoc2V0dGluZ3NMaW5lOiBzdHJpbmcsIHBhcnNlZFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG4gICAgXG4gICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgQVVUT19MQVlPVVRfUkVHRVhfQVJSKTtcbiAgICBpZiAoc2V0dGluZ3NEYXRhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc2V0dGluZ1ZhbHVlcyA9IHBhcnNlRm9yTXVsdGlTZXR0aW5ncyhzZXR0aW5nc0RhdGEpO1xuICAgIHNldHRpbmdzRGF0YSA9IHNldHRpbmdWYWx1ZXNbMF07XG5cblxuICAgIGlmIChzZXR0aW5nc0RhdGEgPT09IFwiZmFsc2VcIiB8fCBcbiAgICAgICAgc2V0dGluZ3NEYXRhID09PSBcIm9mZlwiICAgICApIHtcblxuICAgICAgICBwYXJzZWRTZXR0aW5ncy5hdXRvTGF5b3V0ID0gZmFsc2U7XG4gICAgfVxuICAgIHBhcnNlZFNldHRpbmdzLmF1dG9MYXlvdXQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc0NvbHVtblNwYWNpbmcoc2V0dGluZ3NMaW5lOiBzdHJpbmcsIHBhcnNlZFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG4gICAgXG4gICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgQ09MVU1OX1NQQUNJTkdfUkVHRVhfQVJSKTtcbiAgICBpZiAoc2V0dGluZ3NEYXRhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIGxldCBzcGFjaW5nczogc3RyaW5nW10gPSBbXVxuXG4gICAgbGV0IHNldHRpbmdWYWx1ZXMgPSBwYXJzZUZvck11bHRpU2V0dGluZ3Moc2V0dGluZ3NEYXRhKTtcbiAgICBmb3IobGV0IHNldHRpbmdzRGF0YSBvZiBzZXR0aW5nVmFsdWVzKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgcGFyc2VkID0gSFRNTFNpemluZy5wYXJzZVRvU2l6aW5nKHNldHRpbmdzRGF0YS50cmltKCkpO1xuICAgICAgICBsZXQgc3BhY2luZ1N0ciA9IFwiXCI7XG4gICAgICAgIGlmIChwYXJzZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNwYWNpbmdTdHIgPSBwYXJzZWQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgIGxldCBub1VuaXRzTnVtID0gcGFyc2VJbnQoc2V0dGluZ3NEYXRhLnRyaW0oKSk7XG4gICAgICAgICAgICBpZiAoaXNOYU4obm9Vbml0c051bSkgPT09IGZhbHNlKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgc3BhY2luZ1N0ciA9IGAke25vVW5pdHNOdW19cHRgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNwYWNpbmdzLnB1c2goc3BhY2luZ1N0cik7XG4gICAgfVxuXG4gICAgcGFyc2VkU2V0dGluZ3MuY29sdW1uU3BhY2luZyA9IHNwYWNpbmdzO1xufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc0NvbnRlbnRPdmVyZmxvdyhzZXR0aW5nc0xpbmU6IHN0cmluZywgcGFyc2VkU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcbiAgICBcbiAgICBsZXQgc2V0dGluZ3NEYXRhID0gZ2V0U2V0dGluZ3NEYXRhRnJvbUtleXMoc2V0dGluZ3NMaW5lLCBDT05URU5UX09WRVJGTE9XX1JFR0VYX0FSUik7XG4gICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG92ZXJmbG93U3RhdGVzOiBDb250ZW50T3ZlcmZsb3dUeXBlW10gPSBbXVxuICAgIGxldCBzZXR0aW5nVmFsdWVzID0gcGFyc2VGb3JNdWx0aVNldHRpbmdzKHNldHRpbmdzRGF0YSk7XG5cbiAgICBmb3IobGV0IHNldHRpbmdzRGF0YSBvZiBzZXR0aW5nVmFsdWVzKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgb3ZlcmZsb3dUeXBlID0gQ29udGVudE92ZXJmbG93VHlwZS5zY3JvbGw7XG4gICAgICAgIHNldHRpbmdzRGF0YSA9IHNldHRpbmdzRGF0YS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gXCJoaWRkZW5cIikge1xuICAgICAgICAgICAgb3ZlcmZsb3dUeXBlID0gQ29udGVudE92ZXJmbG93VHlwZS5oaWRkZW47XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcmZsb3dTdGF0ZXMucHVzaChvdmVyZmxvd1R5cGUpO1xuICAgIH1cbiAgICBwYXJzZWRTZXR0aW5ncy5jb250ZW50T3ZlcmZsb3cgPSBvdmVyZmxvd1N0YXRlcztcbn1cblxuZnVuY3Rpb24gY2hlY2tTZXR0aW5nSXNDb2x1bW5BbGlnbm1lbnQoc2V0dGluZ3NMaW5lOiBzdHJpbmcsIHBhcnNlZFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG4gICAgXG4gICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgQUxJR05NRU5UX1JFR0VYX0FSUik7XG4gICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICBsZXQgYWxpZ25tZW50czogQWxpZ25tZW50VHlwZVtdID0gW11cblxuICAgIGxldCBzZXR0aW5nVmFsdWVzID0gcGFyc2VGb3JNdWx0aVNldHRpbmdzKHNldHRpbmdzRGF0YSk7XG4gICAgZm9yKGxldCBzZXR0aW5nc0RhdGEgb2Ygc2V0dGluZ1ZhbHVlcykge1xuICAgICAgICBcbiAgICAgICAgbGV0IGFsaWdubWVudFR5cGUgPSBBbGlnbm1lbnRUeXBlLmxlZnQ7XG4gICAgICAgIHNldHRpbmdzRGF0YSA9IHNldHRpbmdzRGF0YS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgaWYgKHNldHRpbmdzRGF0YSA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgYWxpZ25tZW50VHlwZSA9IEFsaWdubWVudFR5cGUuY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5nc0RhdGEgPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgYWxpZ25tZW50VHlwZSA9IEFsaWdubWVudFR5cGUucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgYWxpZ25tZW50cy5wdXNoKGFsaWdubWVudFR5cGUpO1xuICAgIH1cbiAgICBwYXJzZWRTZXR0aW5ncy5hbGlnbm1lbnQgPSBhbGlnbm1lbnRzO1xufVxuXG5mdW5jdGlvbiBjaGVja1NldHRpbmdJc0NvbHVtbkhlaWdodChzZXR0aW5nc0xpbmU6IHN0cmluZywgcGFyc2VkU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcblxuICAgIGxldCBzZXR0aW5nc0RhdGEgPSBnZXRTZXR0aW5nc0RhdGFGcm9tS2V5cyhzZXR0aW5nc0xpbmUsIENPTFVNTl9IRUlHSFRfUkVHRVhfQVJSKTtcbiAgICBpZihzZXR0aW5nc0RhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzZXR0aW5nVmFsdWVzID0gcGFyc2VGb3JNdWx0aVNldHRpbmdzKHNldHRpbmdzRGF0YSk7XG4gICAgc2V0dGluZ3NEYXRhID0gc2V0dGluZ1ZhbHVlc1swXTtcblxuICAgIGxldCBwYXJzZWQgPSBIVE1MU2l6aW5nLnBhcnNlVG9TaXppbmcoc2V0dGluZ3NEYXRhLnRyaW0oKSk7XG4gICAgaWYgKHBhcnNlZCAhPT0gbnVsbCkge1xuXG4gICAgICAgIHBhcnNlZFNldHRpbmdzLmNvbHVtbkhlaWdodCA9IHBhcnNlZDtcbiAgICB9XG4gICAgZWxzZSB7XG5cbiAgICAgICAgbGV0IG5vVW5pdHNOdW0gPSBwYXJzZUludChzZXR0aW5nc0RhdGEudHJpbSgpKTtcbiAgICAgICAgaWYgKGlzTmFOKG5vVW5pdHNOdW0pID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBwYXJzZWRTZXR0aW5ncy5jb2x1bW5IZWlnaHQgPSBIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKG5vVW5pdHNOdW0pLnNldFVuaXRzKFwicHRcIilcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VGb3JNdWx0aVNldHRpbmdzKG9yaWdpbmFsVmFsdWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcblxuICAgIC8vIFBhcnNlIG9mZiBicmFja2V0cy4gSWYgbm8gYnJhY2tldHMgd2UgcmV0dXJuIG9yaWdpbmFsIHZhbHVlIHRvIGJlIHBhcnNlZCBhcyBzb2xlIHZhbHVlLlxuICAgIGxldCByZXN1bHQgPSAvXFxbKC4qKVxcXS8uZXhlYyhvcmlnaW5hbFZhbHVlKTtcbiAgICBpZihyZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtvcmlnaW5hbFZhbHVlXTtcbiAgICB9XG5cbiAgICBsZXQgc2V0dGluZ3NMaXN0OiBzdHJpbmcgPSByZXN1bHRbMV07XG4gICAgbGV0IHNldHRpbmdzOiBzdHJpbmdbXSA9IHNldHRpbmdzTGlzdC5zcGxpdChcIixcIikubWFwKCh2YWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbC50cmltKCk7XG4gICAgfSlcblxuICAgIHJldHVybiBzZXR0aW5ncztcbn1cblxuY29uc3QgQ09ERUJMT0NLX1JFR0lPTl9JRF9SRUdFWF9TVFJTID0gW1xuICAgIFwiaWRcIixcbiAgICBcInJlZ2lvbiBpZFwiXG5dXG5jb25zdCBDT0RFQkxPQ0tfUkVHSU9OX0lEX1JFR0VYX0FSUjogUmVnRXhwW10gPSBDT0RFQkxPQ0tfUkVHSU9OX0lEX1JFR0VYX1NUUlMubWFwKGNvbnZlcnRTdHJpbmdUb1NldHRpbmdzUmVnZXgpLm1hcCgodmFsdWUpID0+IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCh2YWx1ZSwgXCJpXCIpO1xufSk7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdGFydFJlZ2lvbkNvZGVCbG9ja0lEKHNldHRpbmdzU3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgbGV0IGNvZGVCbG9ja1JlZ2lvbklEID0gXCJcIlxuICAgIGxldCBzZXR0aW5nc0xpbmVzID0gc2V0dGluZ3NTdHIuc3BsaXQoXCJcXG5cIik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldHRpbmdzTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNldHRpbmdzTGluZSA9IHNldHRpbmdzTGluZXNbaV07XG5cbiAgICAgICAgbGV0IHNldHRpbmdzRGF0YSA9IGdldFNldHRpbmdzRGF0YUZyb21LZXlzKHNldHRpbmdzTGluZSwgQ09ERUJMT0NLX1JFR0lPTl9JRF9SRUdFWF9BUlIpO1xuICAgICAgICBpZiAoc2V0dGluZ3NEYXRhICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIGNvZGVCbG9ja1JlZ2lvbklEID0gc2V0dGluZ3NEYXRhXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29kZUJsb2NrUmVnaW9uSUQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRm9yU2luZ2xlQ29sdW1uTG9jYXRpb24obG9jYXRpb25TdHJpbmc6IHN0cmluZyk6IENvbHVtbkxheW91dHtcblxuICAgIHN3aXRjaCAobG9jYXRpb25TdHJpbmcudG9Mb3dlckNhc2UoKS50cmltKCkucmVwbGFjZShcIiBcIiwgXCJcIikpIHtcbiAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgY2FzZSBcImxlZnRzaWRlXCI6XG4gICAgICAgIGNhc2UgXCJsZWZ0bWFyZ2luXCI6XG4gICAgICAgIGNhc2UgXCJsZWZ0YWxpZ25cIjpcbiAgICAgICAgY2FzZSBcImxlZnRhbGlnbmVkXCI6XG4gICAgICAgIGNhc2UgXCJsZWZ0YWxpZ25lbWVudFwiOlxuICAgICAgICBjYXNlIFwiZmlyc3RcIjpcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6XG4gICAgICAgIGNhc2UgXCJiZWdpbm5pbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBcImxlZnRcIlxuICAgICAgICBjYXNlIFwibWlkZGxlXCI6XG4gICAgICAgIGNhc2UgXCJtaWRkbGVhbGlnbmVkXCI6XG4gICAgICAgIGNhc2UgXCJtaWRkbGVhbGlnbm1lbnRcIjpcbiAgICAgICAgY2FzZSBcImNlbnRlclwiOlxuICAgICAgICBjYXNlIFwiY2VudGVyYWxpZ25lZFwiOlxuICAgICAgICBjYXNlIFwiY2VudGVyYWxpZ25tZW50XCI6XG4gICAgICAgIGNhc2UgXCJjZW50ZXJlZFwiOlxuICAgICAgICBjYXNlIFwic3RhbmRhcmRcIjpcbiAgICAgICAgICAgIHJldHVybiBcImNlbnRlclwiXG4gICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICBjYXNlIFwicmlnaHRzaWRlXCI6XG4gICAgICAgIGNhc2UgXCJyaWdodG1hcmdpblwiOlxuICAgICAgICBjYXNlIFwicmlnaHRhbGlnblwiOlxuICAgICAgICBjYXNlIFwicmlnaHRhbGlnbmVkXCI6XG4gICAgICAgIGNhc2UgXCJyaWdodGFsaWdubWVudFwiOlxuICAgICAgICBjYXNlIFwibGFzdFwiOlxuICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJyaWdodFwiXG4gICAgfVxuXG4gICAgcmV0dXJuIFwiY2VudGVyXCJcbn1cblxuZnVuY3Rpb24gcGFyc2VGb3JTaW5nbGVDb2x1bW5TaXplKHNpemVTdHJpbmc6IHN0cmluZyk6IFNpbmdsZUNvbHVtblNpemUge1xuXG4gICAgc3dpdGNoIChzaXplU3RyaW5nID0gc2l6ZVN0cmluZy50b0xvd2VyQ2FzZSgpLnRyaW0oKS5yZXBsYWNlKFwiIFwiLCBcIlwiKSkge1xuICAgICAgICBjYXNlIFwic21hbGxcIjpcbiAgICAgICAgY2FzZSBcInNtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJzbWFsbFwiO1xuICAgICAgICBjYXNlIFwibWVkaXVtXCI6XG4gICAgICAgIGNhc2UgXCJtZWRcIjpcbiAgICAgICAgICAgIHJldHVybiBcIm1lZGl1bVwiO1xuICAgICAgICBjYXNlIFwibGFyZ2VcIjpcbiAgICAgICAgY2FzZSBcImxnXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJsYXJnZVwiO1xuICAgICAgICBjYXNlIFwiZnVsbFwiOlxuICAgICAgICBjYXNlIFwiZnVsbCBzaXplXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJmdWxsXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwibWVkaXVtXCJcbn1cblxuZnVuY3Rpb24gY29udmVydFN0cmluZ1RvU2V0dGluZ3NSZWdleChvcmlnaW5hbFN0cmluZzogU3RyaW5nKTogc3RyaW5nIHtcblxuICAgIG9yaWdpbmFsU3RyaW5nID0gb3JpZ2luYWxTdHJpbmcucmVwbGFjZShcIiBcIiwgXCIoPzpbLV9dfCAqfClcIik7XG5cbiAgICBsZXQgcmVnZXhTdHJpbmcgPSBgKD86JHtvcmlnaW5hbFN0cmluZ30gKls6PV0gKikoLiopYDtcbiAgICByZXR1cm4gcmVnZXhTdHJpbmc7XG59XG5cbiIsImltcG9ydCB7IE11bHRpQ29sdW1uU2V0dGluZ3MsIGdldERlZmF1bHRNdWx0aUNvbHVtblNldHRpbmdzIH0gZnJvbSBcInNyYy9yZWdpb25TZXR0aW5nc1wiO1xuaW1wb3J0IHsgcGFyc2VDb2x1bW5TZXR0aW5ncyB9IGZyb20gXCIuL3NldHRpbmdzUGFyc2VyXCI7XG5pbXBvcnQgeyBTdGFydFRhZ1JlZ2V4TWF0Y2gsIGRlZmF1bHRTdGFydFJlZ2lvbkRhdGEgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XG5cblxuZXhwb3J0IGNvbnN0IFBBTkRPQ19FTkdMSVNIX05VTUJFUl9PRl9DT0xVTU5TID0gW1xuICAgIFwidHdvXCIsXG4gICAgXCJ0aHJlZVwiLFxuICAgIFwiZm91clwiLFxuICAgIFwiZml2ZVwiLFxuICAgIFwic2l4XCIsXG4gICAgXCJzZXZlblwiLFxuICAgIFwiZWlnaHRcIixcbiAgICBcIm5pbmVcIixcbiAgICBcInRlblwiXG5dIGFzIGNvbnN0O1xudHlwZSBQYW5kb2NOdW1iZXJPZkNvbHVtbnNUdXBsZSA9IHR5cGVvZiBQQU5ET0NfRU5HTElTSF9OVU1CRVJfT0ZfQ09MVU1OUztcbmV4cG9ydCB0eXBlIFBhbmRvY051bWJlck9mQ29sdW1ucyA9IFBhbmRvY051bWJlck9mQ29sdW1uc1R1cGxlW251bWJlcl07XG5leHBvcnQgZnVuY3Rpb24gaXNQYW5kb2NOdW1iZXJPZkNvbHVtbnModmFsdWU6IHN0cmluZyk6IHZhbHVlIGlzIFBhbmRvY051bWJlck9mQ29sdW1ucyB7XG4gICAgcmV0dXJuIFBBTkRPQ19FTkdMSVNIX05VTUJFUl9PRl9DT0xVTU5TLmluY2x1ZGVzKHZhbHVlIGFzIFBhbmRvY051bWJlck9mQ29sdW1ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYW5kb2NOdW1iZXJPZkNvbHVtbnModmFsdWU6IHN0cmluZyB8IFBhbmRvY051bWJlck9mQ29sdW1ucyk6IFBhbmRvY051bWJlck9mQ29sdW1ucyB7XG4gICAgcmV0dXJuICh2YWx1ZS50b0xvd2VyQ2FzZSgpIGFzIFBhbmRvY051bWJlck9mQ29sdW1ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFuZG9jTnVtYmVyT2ZDb2x1bW5zVG9WYWx1ZSh2YWx1ZTogUGFuZG9jTnVtYmVyT2ZDb2x1bW5zKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJ0d29cIjpcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICBjYXNlIFwidGhyZWVcIjpcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICBjYXNlIFwiZm91clwiOlxuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIGNhc2UgXCJmaXZlXCI6XG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgY2FzZSBcInNpeFwiOlxuICAgICAgICAgICAgcmV0dXJuIDY7XG4gICAgICAgIGNhc2UgXCJzZXZlblwiOlxuICAgICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIGNhc2UgXCJlaWdodFwiOlxuICAgICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgIGNhc2UgXCJuaW5lXCI6XG4gICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgY2FzZSBcInRlblwiOlxuICAgICAgICAgICAgcmV0dXJuIDEwO1xuICAgIH1cbn1cbmNvbnN0IFBBTkRPQ19DT0xfRE9UX0NPVU5UX05BTUUgPSBcImNvbERvdENvdW50XCI7XG5jb25zdCBQQU5ET0NfQ09MX05PRE9UX0NPVU5UX05BTUUgPSBcImNvbENvdW50XCI7XG5jb25zdCBQQU5ET0NfQ09MX0NPTlRFTlQgPSBcImNvbENvbnRlbnRcIjtcbmNvbnN0IFBBTkRPQ19DT2xfU0VUVElOR1MgPSBcImNvbFNldHRpbmdzXCI7XG5jb25zdCBQQU5ET0NfUkVHRVhfU1RSOiBzdHJpbmcgPSAoKCkgPT4ge1xuXG4gICAgbGV0IG51bXMgPSBQQU5ET0NfRU5HTElTSF9OVU1CRVJfT0ZfQ09MVU1OUy5qb2luKFwifFwiKTtcbiAgICBsZXQgcmVnZXhfc3RyaW5ncyA9IGA6ezMsfSAqKD86XFxcXHsgKlxcXFwuKD88JHtQQU5ET0NfQ09MX0RPVF9DT1VOVF9OQU1FfT4oPzoke251bXN9fCkpKD86Wy1fXXwpY29sdW1ucyg/PCR7UEFORE9DX0NPbF9TRVRUSU5HU30+LiopXFxcXH18KD88JHtQQU5ET0NfQ09MX05PRE9UX0NPVU5UX05BTUV9Pig/OiR7bnVtc318KSkoPzpbLV9dfCljb2x1bW5zKSg/OlsgOl0qKSRcXFxcbj9gO1xuICAgIHJldHVybiByZWdleF9zdHJpbmdzO1xufSkoKTtcbmNvbnN0IFBBTkRPQ19SRUdFWCA9IG5ldyBSZWdFeHAoUEFORE9DX1JFR0VYX1NUUiwgXCJtXCIpO1xuY29uc3QgUEFORE9DX09QRU5fRkVOQ0VfUkVHRVggPSAvXjp7Myx9ICooPzpbYS16QS1aXSt8XFx7LipcXH0pKD86WyA6XSopJC9tO1xuY29uc3QgUEFORE9DX0NMT1NFX0ZFTkNFX1JFR0VYID0gL146ezMsfSAqJC9tO1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRQYW5kb2ModGV4dDogc3RyaW5nKTogUGFuZG9jUmVnZXhEYXRhIHtcblxuICAgIGxldCByZWdleERhdGEgPSBQQU5ET0NfUkVHRVguZXhlYyh0ZXh0KTtcbiAgICBpZiAocmVnZXhEYXRhICE9PSBudWxsKSB7XG5cbiAgICAgICAgbGV0IGRhdGEgPSBkZWZhdWx0UGFuZG9jUmVnZXhEYXRhKCk7XG4gICAgICAgIGRhdGEuZm91bmQgPSB0cnVlO1xuICAgICAgICBkYXRhLnN0YXJ0UG9zaXRpb24gPSByZWdleERhdGEuaW5kZXg7XG4gICAgICAgIGRhdGEuZW5kUG9zaXRpb24gPSByZWdleERhdGEuaW5kZXggKyByZWdleERhdGFbMF0ubGVuZ3RoO1xuXG4gICAgICAgIGxldCByZWdpb25EYXRhID0gcmVkdWNlUGFuZG9jUmVnaW9uVG9FbmREaXYodGV4dC5zbGljZShkYXRhLmVuZFBvc2l0aW9uKSk7XG4gICAgICAgIGRhdGEuZW5kUG9zaXRpb24gKz0gcmVnaW9uRGF0YS5jb250ZW50Lmxlbmd0aCArIHJlZ2lvbkRhdGEubWF0Y2hMZW5ndGg7XG4gICAgICAgIGRhdGEuY29udGVudCA9IHJlZ2lvbkRhdGEuY29udGVudDtcbiAgICAgICAgZGF0YS5tYXRjaExlbmd0aCA9IGRhdGEuZW5kUG9zaXRpb24gLSBkYXRhLnN0YXJ0UG9zaXRpb247XG5cbiAgICAgICAgZGF0YS51c2VyU2V0dGluZ3MgPSByZWdleERhdGEuZ3JvdXBzW1BBTkRPQ19DT2xfU0VUVElOR1NdID8gcmVnZXhEYXRhLmdyb3Vwc1tQQU5ET0NfQ09sX1NFVFRJTkdTXSA6IFwiXCI7XG4gICAgICAgIGRhdGEuY29sdW1uQ291bnQgPSByZWdleERhdGEuZ3JvdXBzW1BBTkRPQ19DT0xfRE9UX0NPVU5UX05BTUVdID8gcmVnZXhEYXRhLmdyb3Vwc1tQQU5ET0NfQ09MX0RPVF9DT1VOVF9OQU1FXSA6IHJlZ2V4RGF0YS5ncm91cHNbUEFORE9DX0NPTF9OT0RPVF9DT1VOVF9OQU1FXTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRQYW5kb2NSZWdleERhdGEoKTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZG9jU3RhcnREYXRhIHtcbiAgICBmb3VuZDogYm9vbGVhbjtcbiAgICB1c2VyU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFuZG9jU3RhcnREYXRhKHRleHQ6IHN0cmluZyk6IFBhbmRvY1N0YXJ0RGF0YSB7XG5cbiAgICBsZXQgZGF0YSA9IGZpbmRQYW5kb2ModGV4dCk7XG4gICAgaWYgKGRhdGEuZm91bmQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3VuZDogZmFsc2UsXG4gICAgICAgICAgICB1c2VyU2V0dGluZ3M6IGdldERlZmF1bHRNdWx0aUNvbHVtblNldHRpbmdzKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmb3VuZDogdHJ1ZSxcbiAgICAgICAgdXNlclNldHRpbmdzOiBwYXJzZVBhbmRvY1NldHRpbmdzKGRhdGEudXNlclNldHRpbmdzLCBkYXRhLmNvbHVtbkNvdW50KVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNQYW5kb2ModGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbmRQYW5kb2ModGV4dCkuZm91bmQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNQYW5kb2NTdGFydFRhZyh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcblxuICAgIGxldCByZWdleERhdGEgPSBQQU5ET0NfUkVHRVguZXhlYyh0ZXh0KTtcbiAgICBpZiAocmVnZXhEYXRhICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNQYW5kb2NFbmRUYWcodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG5cbiAgICBsZXQgcmVnZXhEYXRhID0gUEFORE9DX0NMT1NFX0ZFTkNFX1JFR0VYLmV4ZWModGV4dCk7XG4gICAgaWYgKHJlZ2V4RGF0YSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRQYW5kb2NFbmRUYWcobGluZXNBYm92ZTogc3RyaW5nW10sIGN1cnJlbnRMaW5lOiBzdHJpbmcpOiBib29sZWFuIHtcblxuICAgIGlmIChjb250YWluc1BhbmRvY0VuZFRhZyhjdXJyZW50TGluZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudFRleHQgPSBsaW5lc0Fib3ZlLmNvbmNhdChjdXJyZW50TGluZSkuam9pbihcIlxcblwiKTtcbiAgICByZXR1cm4gcmVkdWNlUGFuZG9jUmVnaW9uVG9FbmREaXYoY29udGVudFRleHQpLmZvdW5kO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZVBhbmRvY1JlZ2lvblRvRW5kRGl2KGNvbnRlbnRUZXh0OiBzdHJpbmcpIHtcblxuICAgIGxldCB3b3JraW5nVGV4dCA9IGNvbnRlbnRUZXh0O1xuXG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgZm91bmQ6IGZhbHNlLFxuICAgICAgICBjb250ZW50OiB3b3JraW5nVGV4dCxcbiAgICAgICAgbWF0Y2hMZW5ndGg6IDBcbiAgICB9O1xuXG4gICAgbGV0IHN0YXRlID0gMDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgdHJ1ZTsgaSsrKSB7XG4gICAgICAgIGlmIChpID4gMTAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmZW5jZSA9IGdldE5leHRQYW5kb2NGZW5jZSh3b3JraW5nVGV4dCk7XG4gICAgICAgIGlmIChmZW5jZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gZmVuY2UucmVzdWx0O1xuICAgICAgICBpZiAoZmVuY2UudHlwZSA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh3b3JraW5nVGV4dC5zbGljZShyZXN1bHQuaW5kZXgsIHJlc3VsdC5pbmRleCArIHJlc3VsdFswXS5sZW5ndGgpKTtcbiAgICAgICAgICAgIG9mZnNldCArPSAocmVzdWx0LmluZGV4ICsgcmVzdWx0WzBdLmxlbmd0aCk7XG4gICAgICAgICAgICBzdGF0ZS0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cod29ya2luZ1RleHQuc2xpY2UocmVzdWx0LmluZGV4LCByZXN1bHQuaW5kZXggKyByZXN1bHRbMF0ubGVuZ3RoKSk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gKHJlc3VsdC5pbmRleCArIHJlc3VsdFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgc3RhdGUrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgZm91bmQgb3VyIGxhc3QgY2xvc2UgdGFnLlxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkUmV0dXJuRGF0YShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgd29ya2luZ1RleHQgPSBjb250ZW50VGV4dC5zbGljZShvZmZzZXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkUmV0dXJuRGF0YShtYXRjaFJlc3VsdDogUmVnRXhwRXhlY0FycmF5KSB7XG4gICAgICAgIHJlc3VsdC5jb250ZW50ID0gY29udGVudFRleHQuc2xpY2UoMCwgb2Zmc2V0IC0gbWF0Y2hSZXN1bHRbMF0ubGVuZ3RoKTtcbiAgICAgICAgcmVzdWx0Lm1hdGNoTGVuZ3RoID0gbWF0Y2hSZXN1bHRbMF0ubGVuZ3RoO1xuICAgICAgICByZXN1bHQuZm91bmQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXROZXh0UGFuZG9jRmVuY2Uod29ya2luZ1RleHQ6IHN0cmluZyk6IHsgcmVzdWx0OiBSZWdFeHBFeGVjQXJyYXk7IHR5cGU6IFwib3BlblwiIHwgXCJjbG9zZVwiOyB9IHtcblxuICAgIGxldCBvcGVuUmVzdWx0ID0gUEFORE9DX09QRU5fRkVOQ0VfUkVHRVguZXhlYyh3b3JraW5nVGV4dCk7XG4gICAgbGV0IGNsb3NlUmVzdWx0ID0gUEFORE9DX0NMT1NFX0ZFTkNFX1JFR0VYLmV4ZWMod29ya2luZ1RleHQpO1xuXG4gICAgaWYgKG9wZW5SZXN1bHQgPT09IG51bGwgJiYgY2xvc2VSZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG9wZW5SZXN1bHQgPT09IG51bGwgJiYgY2xvc2VSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3VsdDogY2xvc2VSZXN1bHQsXG4gICAgICAgICAgICB0eXBlOiBcImNsb3NlXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VSZXN1bHQgPT09IG51bGwgJiYgb3BlblJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiBvcGVuUmVzdWx0LFxuICAgICAgICAgICAgdHlwZTogXCJvcGVuXCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VSZXN1bHQuaW5kZXggPCBvcGVuUmVzdWx0LmluZGV4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHQ6IGNsb3NlUmVzdWx0LFxuICAgICAgICAgICAgdHlwZTogXCJjbG9zZVwiXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiBvcGVuUmVzdWx0LFxuICAgICAgICAgICAgdHlwZTogXCJvcGVuXCJcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZmluZFBhbmRvY1N0YXJ0KHRleHQ6IHN0cmluZyk6IFN0YXJ0VGFnUmVnZXhNYXRjaCB7XG5cbiAgICBsZXQgc3RhcnRSZWdpb24gPSBkZWZhdWx0U3RhcnRSZWdpb25EYXRhKCk7XG4gICAgc3RhcnRSZWdpb24ucmVnaW9uVHlwZSA9IFwiUEFET0NcIjtcblxuICAgIGxldCByZWdleERhdGEgPSBQQU5ET0NfUkVHRVguZXhlYyh0ZXh0KTtcbiAgICBpZiAocmVnZXhEYXRhICE9PSBudWxsICYmIHJlZ2V4RGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgc3RhcnRSZWdpb24uZm91bmQgPSB0cnVlO1xuICAgICAgICBzdGFydFJlZ2lvbi5zdGFydFBvc2l0aW9uID0gcmVnZXhEYXRhLmluZGV4O1xuICAgICAgICBzdGFydFJlZ2lvbi5tYXRjaExlbmd0aCA9IHJlZ2V4RGF0YVswXS5sZW5ndGg7XG4gICAgICAgIHN0YXJ0UmVnaW9uLmVuZFBvc2l0aW9uID0gc3RhcnRSZWdpb24uc3RhcnRQb3NpdGlvbiArIHN0YXJ0UmVnaW9uLm1hdGNoTGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydFJlZ2lvbjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGFuZG9jUmVnZXhEYXRhIGV4dGVuZHMgU3RhcnRUYWdSZWdleE1hdGNoIHtcbiAgICBmb3VuZDogYm9vbGVhbjtcbiAgICBzdGFydFBvc2l0aW9uOiBudW1iZXI7XG4gICAgZW5kUG9zaXRpb246IG51bWJlcjtcbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgdXNlclNldHRpbmdzOiBzdHJpbmc7XG4gICAgY29sdW1uQ291bnQ6IHN0cmluZztcbn1cbmZ1bmN0aW9uIGRlZmF1bHRQYW5kb2NSZWdleERhdGEoKTogUGFuZG9jUmVnZXhEYXRhIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmb3VuZDogZmFsc2UsXG4gICAgICAgIHN0YXJ0UG9zaXRpb246IC0xLFxuICAgICAgICBlbmRQb3NpdGlvbjogLTEsXG4gICAgICAgIG1hdGNoTGVuZ3RoOiAwLFxuICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICB1c2VyU2V0dGluZ3M6IFwiXCIsXG4gICAgICAgIGNvbHVtbkNvdW50OiBcIlwiLFxuICAgICAgICByZWdpb25UeXBlOiBcIlBBRE9DXCJcbiAgICB9O1xufVxuXG5jb25zdCBQQU5ET0NfU0VUVElOR19SRUdFWCA9IC8oPzxzZXR0aW5nTmFtZT5bXiBdKik9KD88c2V0dGluZ1ZhbHVlPlwiLipcInxbXiA9XSopLztcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhbmRvY1NldHRpbmdzKHBhbmRvY1VzZXJTZXR0aW5nczogc3RyaW5nLCBjb2xDb3VudDogc3RyaW5nID0gXCJcIik6IE11bHRpQ29sdW1uU2V0dGluZ3Mge1xuXG4gICAgLy9UT0RPOiBBZGQgb3B0aW9uIGZvciBjb2x1bW4gcnVsZS4gXG5cbiAgICBsZXQgZGVmYXVsdFNldHRpbmdzID0gZ2V0RGVmYXVsdE11bHRpQ29sdW1uU2V0dGluZ3MoKTtcbiAgICBsZXQgY29sQ291bnREZWZpbmVkID0gZmFsc2U7XG4gICAgaWYgKGNvbENvdW50ICE9PSBcIlwiICYmIGlzUGFuZG9jTnVtYmVyT2ZDb2x1bW5zKGNvbENvdW50KSkge1xuICAgICAgICBjb2xDb3VudERlZmluZWQgPSB0cnVlO1xuICAgICAgICBkZWZhdWx0U2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zID0gcGFuZG9jTnVtYmVyT2ZDb2x1bW5zVG9WYWx1ZSh2YWxpZGF0ZVBhbmRvY051bWJlck9mQ29sdW1ucyhjb2xDb3VudCkpO1xuICAgIH1cblxuICAgIGlmIChwYW5kb2NVc2VyU2V0dGluZ3MucmVwbGFjZShcIiBcIiwgXCJcIikgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTZXR0aW5ncztcbiAgICB9XG5cbiAgICBsZXQgd29ya2luZ1N0cmluZyA9IHBhbmRvY1VzZXJTZXR0aW5ncztcbiAgICBsZXQgcmVnZXhWYWx1ZSA9IFBBTkRPQ19TRVRUSU5HX1JFR0VYLmV4ZWMod29ya2luZ1N0cmluZyk7XG4gICAgbGV0IHNldHRpbmdMaXN0ID0gXCJcIlxuICAgIGZvciAobGV0IGkgPSAwOyByZWdleFZhbHVlICE9PSBudWxsOyBpIDwgMTAwKSB7XG5cbiAgICAgICAgbGV0IHNldHRpbmdOYW1lID0gcmVnZXhWYWx1ZS5ncm91cHNbJ3NldHRpbmdOYW1lJ107XG4gICAgICAgIGxldCBzZXR0aW5nVmFsdWUgPSByZWdleFZhbHVlLmdyb3Vwc1snc2V0dGluZ1ZhbHVlJ107XG4gICAgICAgIHNldHRpbmdMaXN0ICs9IGAke3NldHRpbmdOYW1lfTogJHtzZXR0aW5nVmFsdWV9XFxuYFxuXG4gICAgICAgIHdvcmtpbmdTdHJpbmcgPSB3b3JraW5nU3RyaW5nLnNsaWNlKHJlZ2V4VmFsdWUuaW5kZXggKyByZWdleFZhbHVlWzBdLmxlbmd0aCk7XG4gICAgICAgIHJlZ2V4VmFsdWUgPSBQQU5ET0NfU0VUVElOR19SRUdFWC5leGVjKHdvcmtpbmdTdHJpbmcpO1xuICAgIH1cblxuICAgIGxldCBwYXJzZWRTZXR0aW5ncyA9IHBhcnNlQ29sdW1uU2V0dGluZ3Moc2V0dGluZ0xpc3QpXG4gICAgaWYoY29sQ291bnREZWZpbmVkKSB7XG4gICAgICAgIHBhcnNlZFNldHRpbmdzLm51bWJlck9mQ29sdW1ucyA9IGRlZmF1bHRTZXR0aW5ncy5udW1iZXJPZkNvbHVtbnNcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VkU2V0dGluZ3M7XG59IiwiLypcbiAqIEZpbGU6IG11bHRpLWNvbHVtbi1tYXJrZG93bi9zcmMvTXVsdGlDb2x1bW5QYXJzZXIudHNcbiAqIENyZWF0ZWQgRGF0ZTogU2F0dXJkYXksIEphbnVhcnkgMjJuZCAyMDIyLCA2OjAyOjQ2IHBtXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb25cbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDIyIENhbWVyb24gUm9iaW5zb25cbiAqL1xuXG5pbXBvcnQgeyBwYXJzZVN0YXJ0UmVnaW9uQ29kZUJsb2NrSUQgfSBmcm9tIFwiLi9zZXR0aW5nc1BhcnNlclwiO1xuaW1wb3J0IHsgY29udGFpbnNQYW5kb2MsIGZpbmRQYW5kb2NTdGFydCwgcmVkdWNlUGFuZG9jUmVnaW9uVG9FbmREaXYsIGdldFBhbmRvY1N0YXJ0RGF0YSB9IGZyb20gXCIuL3BhbmRvY1BhcnNlclwiO1xuaW1wb3J0IHsgUmVnaW9uVHlwZSwgU3RhcnRUYWdSZWdleE1hdGNoLCBkZWZhdWx0U3RhcnRSZWdpb25EYXRhIH0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xuXG5jb25zdCBTVEFSVF9SRUdFWF9TVFJTID0gW1wiPT09ICpzdGFydC1tdWx0aS1jb2x1bW4oOj9bYS16QS1aMC05LV9cXFxcc10qKT9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9PT0gKm11bHRpLWNvbHVtbi1zdGFydCg6P1thLXpBLVowLTktX1xcXFxzXSopP1wiXVxuY29uc3QgU1RBUlRfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IFtdO1xuZm9yKGxldCBpID0gMDsgaSA8IFNUQVJUX1JFR0VYX1NUUlMubGVuZ3RoOyBpKyspIHtcbiAgICBTVEFSVF9SRUdFWF9BUlIucHVzaChuZXcgUmVnRXhwKFNUQVJUX1JFR0VYX1NUUlNbaV0pKTtcbn1cblxuY29uc3QgU1RBUlRfUkVHRVhfU1RSU19XSE9MRV9MSU5FID0gW1wiXj09PSAqc3RhcnQtbXVsdGktY29sdW1uKDo/W2EtekEtWjAtOS1fXFxcXHNdKik/JFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXj09PSAqbXVsdGktY29sdW1uLXN0YXJ0KDo/W2EtekEtWjAtOS1fXFxcXHNdKik/JFwiXVxuY29uc3QgU1RBUlRfUkVHRVhfQVJSX1dIT0xFX0xJTkU6IFJlZ0V4cFtdID0gW107XG5mb3IobGV0IGkgPSAwOyBpIDwgU1RBUlRfUkVHRVhfU1RSU19XSE9MRV9MSU5FLmxlbmd0aDsgaSsrKSB7XG4gICAgU1RBUlRfUkVHRVhfQVJSX1dIT0xFX0xJTkUucHVzaChuZXcgUmVnRXhwKFNUQVJUX1JFR0VYX1NUUlNfV0hPTEVfTElORVtpXSkpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kU3RhcnRUYWcodGV4dDogc3RyaW5nKTogU3RhcnRUYWdSZWdleE1hdGNoIHtcblxuICAgIGxldCBzdGFydFJlZ2lvbiA9IGRlZmF1bHRTdGFydFJlZ2lvbkRhdGEoKTtcbiAgICBzdGFydFJlZ2lvbi5yZWdpb25UeXBlID0gXCJERVBSRUNJQVRFRFwiO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaTwgU1RBUlRfUkVHRVhfQVJSLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgbGV0IHJlZ2V4RGF0YSA9IFNUQVJUX1JFR0VYX0FSUltpXS5leGVjKHRleHQpXG4gICAgICAgIGlmKHJlZ2V4RGF0YSAhPT0gbnVsbCAmJiByZWdleERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhcnRSZWdpb24uc3RhcnRQb3NpdGlvbiA9IHJlZ2V4RGF0YS5pbmRleFxuICAgICAgICAgICAgc3RhcnRSZWdpb24ubWF0Y2hMZW5ndGggPSByZWdleERhdGFbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgc3RhcnRSZWdpb24uZW5kUG9zaXRpb24gPSBzdGFydFJlZ2lvbi5zdGFydFBvc2l0aW9uICsgc3RhcnRSZWdpb24ubWF0Y2hMZW5ndGg7XG5cbiAgICAgICAgICAgIGxldCBsaW5lID0gdGV4dC5zbGljZShzdGFydFJlZ2lvbi5zdGFydFBvc2l0aW9uLCBzdGFydFJlZ2lvbi5lbmRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZihTVEFSVF9SRUdFWF9BUlJfV0hPTEVfTElORVtpXS50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRSZWdpb24uZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGFydFJlZ2lvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc1N0YXJ0VGFnKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmaW5kU3RhcnRUYWcodGV4dCkuZm91bmRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RhcnRUYWdXaXRoSUQodGV4dDogc3RyaW5nKToge2lzU3RhcnRUYWc6IGJvb2xlYW4sIGhhc0tleTogYm9vbGVhbn0ge1xuXG4gICAgbGV0IHN0YXJ0VGFnRGF0YSA9IGZpbmRTdGFydFRhZyh0ZXh0KTtcbiAgICBpZihzdGFydFRhZ0RhdGEuZm91bmQgPT09IHRydWUpIHtcblxuICAgICAgICBsZXQga2V5ID0gZ2V0U3RhcnRUYWdLZXkodGV4dClcbiAgICAgICAgaWYoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHtpc1N0YXJ0VGFnOiB0cnVlLCBoYXNLZXk6IGZhbHNlfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge2lzU3RhcnRUYWc6IHRydWUsIGhhc0tleTogdHJ1ZX07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtpc1N0YXJ0VGFnOiBmYWxzZSwgaGFzS2V5OiBmYWxzZX07XG59XG5cbmNvbnN0IEVORF9SRUdFWF9TVFJTID0gW1wiLS0tICplbmQtbXVsdGktY29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIi0tLSAqbXVsdGktY29sdW1uLWVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCI9PT0gKmVuZC1tdWx0aS1jb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPT09ICptdWx0aS1jb2x1bW4tZW5kXCJdXG5jb25zdCBFTkRfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IFtdO1xuZm9yKGxldCBpID0gMDsgaSA8IEVORF9SRUdFWF9TVFJTLmxlbmd0aDsgaSsrKSB7XG4gICAgRU5EX1JFR0VYX0FSUi5wdXNoKG5ldyBSZWdFeHAoRU5EX1JFR0VYX1NUUlNbaV0pKTtcbn1cblxudHlwZSBUYWdQb3NpdGlvbmluZ0RhdGEgPSB7XG4gICAgZm91bmQ6IGJvb2xlYW47XG4gICAgc3RhcnRQb3NpdGlvbjogbnVtYmVyO1xuICAgIGVuZFBvc2l0aW9uOiBudW1iZXI7XG4gICAgbWF0Y2hMZW5ndGg6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRW5kVGFnKHRleHQ6IHN0cmluZyk6IFRhZ1Bvc2l0aW9uaW5nRGF0YSB7XG5cbiAgICAvLyBXZSB3YW50IHRvIGZpbmQgdGhlIGZpcnN0IGVuZCB0YWcgaW4gdGhlIHRleHQuXG4gICAgLy8gU28gaGVyZSB3ZSBsb29wIGJhY2t3YXJkcywgc2xpY2luZyBvZmYgdGhlIHRhaWwgdW50aWxcbiAgICAvLyB0aGVyZSBhcmUgbm8gbW9yZSBlbmQgdGFncyBhdmFpbGFibGVcbiAgICBsZXQgbGFzdFZhbGlkRGF0YSA9IGdldEVuZFRhZ0RhdGEodGV4dCk7XG4gICAgbGV0IHdvcmtpbmdSZWdleERhdGEgPSBsYXN0VmFsaWREYXRhO1xuICAgIHdoaWxlKHdvcmtpbmdSZWdleERhdGEuZm91bmQgPT09IHRydWUpIHtcblxuICAgICAgICBsYXN0VmFsaWREYXRhID0gd29ya2luZ1JlZ2V4RGF0YTtcbiAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMCwgd29ya2luZ1JlZ2V4RGF0YS5zdGFydFBvc2l0aW9uKTtcbiAgICAgICAgd29ya2luZ1JlZ2V4RGF0YSA9IGdldEVuZFRhZ0RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RWYWxpZERhdGE7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNFbmRUYWcodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbmRFbmRUYWcodGV4dCkuZm91bmRcbn1cblxuZnVuY3Rpb24gZ2V0RW5kVGFnRGF0YSh0ZXh0OiBzdHJpbmcpIHtcblxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGxldCBzdGFydFBvc2l0aW9uID0gLTE7XG4gICAgbGV0IGVuZFBvc2l0aW9uID0gLTFcbiAgICBsZXQgbWF0Y2hMZW5ndGggPSAwO1xuICAgIGZvcihsZXQgaSA9IDA7IGk8IEVORF9SRUdFWF9BUlIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBsZXQgcmVnZXhEYXRhID0gRU5EX1JFR0VYX0FSUltpXS5leGVjKHRleHQpXG4gICAgICAgIGlmKHJlZ2V4RGF0YSAhPT0gbnVsbCAmJiByZWdleERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHJlZ2V4RGF0YS5pbmRleFxuICAgICAgICAgICAgbWF0Y2hMZW5ndGggPSByZWdleERhdGFbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgbWF0Y2hMZW5ndGg7XG5cbiAgICByZXR1cm4geyBmb3VuZCwgc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb24sIG1hdGNoTGVuZ3RoIH07XG59XG5cbmNvbnN0IENPTF9SRUdFWF9TVFJTOiBbc3RyaW5nLHN0cmluZ11bXSA9IFtbXCJePT09XFxcXHMqP2NvbHVtbi1lbmRcXFxccyo/PT09XFxcXHMqPyRcIiAgICxcIlwiXSwgLy8gW1JlZ2V4LCBSZWdleCBGbGFnc11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJePT09XFxcXHMqP2VuZC1jb2x1bW5cXFxccyo/PT09XFxcXHMqPyRcIiAgICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJePT09XFxcXHMqP2NvbHVtbi1icmVha1xcXFxzKj89PT1cXFxccyo/JFwiICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJePT09XFxcXHMqP2JyZWFrLWNvbHVtblxcXFxzKj89PT1cXFxccyo/JFwiICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJeLS0tXFxcXHMqP2NvbHVtbi1lbmRcXFxccyo/LS0tXFxcXHMqPyRcIiAgICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJeLS0tXFxcXHMqP2VuZC1jb2x1bW5cXFxccyo/LS0tXFxcXHMqPyRcIiAgICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJeLS0tXFxcXHMqP2NvbHVtbi1icmVha1xcXFxzKj8tLS1cXFxccyo/JFwiICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJeLS0tXFxcXHMqP2JyZWFrLWNvbHVtblxcXFxzKj8tLS1cXFxccyo/JFwiICxcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJeICo/KD86XFxcXD8pXFxcXGNvbHVtbmJyZWFrICo/JFwiICAgICAgICAsXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiXjp7Myx9ICpjb2x1bW4tP2JyZWFrICooPzooPzokXFxcXG5eKT98ICopOnszLH0gKiRcIiAsXCJtXCJdXTtcbmNvbnN0IENPTF9SRUdFWF9BUlI6IFJlZ0V4cFtdID0gW107XG5mb3IobGV0IGkgPSAwOyBpIDwgQ09MX1JFR0VYX1NUUlMubGVuZ3RoOyBpKyspIHtcbiAgICBDT0xfUkVHRVhfQVJSLnB1c2gobmV3IFJlZ0V4cChDT0xfUkVHRVhfU1RSU1tpXVswXSwgQ09MX1JFR0VYX1NUUlNbaV1bMV0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc0NvbEVuZFRhZyh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcblxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGZvcihsZXQgaSA9IDA7IGk8IENPTF9SRUdFWF9BUlIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZihDT0xfUkVHRVhfQVJSW2ldLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xufVxuXG5jb25zdCBJTk5FUl9DT0xfRU5EX1JFR0VYX0FSUjogUmVnRXhwW10gPSBbXG4gICAgL14tezN9XFxzKj9jb2x1bW4tZW5kXFxzKj8tezN9XFxzKj8kXFxuPy9tLFxuICAgIC9eLXszfVxccyo/ZW5kLWNvbHVtblxccyo/LXszfVxccyo/JFxcbj8vbSxcbiAgICAvXi17M31cXHMqP2NvbHVtbi1icmVha1xccyo/LXszfVxccyo/JFxcbj8vbSxcbiAgICAvXi17M31cXHMqP2JyZWFrLWNvbHVtblxccyo/LXszfVxccyo/JFxcbj8vbSxcbiAgICAvXj17M31cXHMqP2NvbHVtbi1lbmRcXHMqPz17M31cXHMqPyRcXG4/L20sXG4gICAgL149ezN9XFxzKj9lbmQtY29sdW1uXFxzKj89ezN9XFxzKj8kXFxuPy9tLFxuICAgIC9ePXszfVxccyo/Y29sdW1uLWJyZWFrXFxzKj89ezN9XFxzKj8kXFxuPy9tLFxuICAgIC9ePXszfVxccyo/YnJlYWstY29sdW1uXFxzKj89ezN9XFxzKj8kXFxuPy9tLFxuICAgIC9eICo/KD86XFxcXD8pXFxcXGNvbHVtbmJyZWFrICo/JFxcbj8vbSxcbiAgICAvXjp7Myx9ICpjb2x1bW4tP2JyZWFrICooPzooPzokXFxuXik/fCAqKTp7Myx9ICokL21cbl1cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ZvclBhcmFncmFwaElubmVyQ29sRW5kVGFnKHRleHQ6IHN0cmluZyk6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGwge1xuXG4gICAgZm9yKGxldCBpID0gMDsgaTwgSU5ORVJfQ09MX0VORF9SRUdFWF9BUlIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBsZXQgcmVnZXhSZXN1bHQgPSBJTk5FUl9DT0xfRU5EX1JFR0VYX0FSUltpXS5leGVjKHRleHQpO1xuICAgICAgICBpZihyZWdleFJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2V4UmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBDT0xfRUxFTUVOVF9JTk5FUl9URVhUX1JFR0VYX1NUUlM6IHN0cmluZ1tdID0gW1wiPSAqY29sdW1uLWVuZCAqPVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPSAqZW5kLWNvbHVtbiAqPVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPSAqY29sdW1uLWJyZWFrICo9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9ICpicmVhay1jb2x1bW4gKj1cIl1cbmNvbnN0IENPTF9FTEVNRU5UX0lOTkVSX1RFWFRfUkVHRVhfQVJSOiBSZWdFeHBbXSA9IFtdO1xuZm9yKGxldCBpID0gMDsgaSA8IENPTF9FTEVNRU5UX0lOTkVSX1RFWFRfUkVHRVhfU1RSUy5sZW5ndGg7IGkrKykge1xuICAgIENPTF9FTEVNRU5UX0lOTkVSX1RFWFRfUkVHRVhfQVJSLnB1c2gobmV3IFJlZ0V4cChDT0xfRUxFTUVOVF9JTk5FUl9URVhUX1JFR0VYX1NUUlNbaV0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbElubmVyVGV4dENvbnRhaW5zQ29sRW5kVGFnKHRleHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuXG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgZm9yKGxldCBpID0gMDsgaTwgQ09MX0VMRU1FTlRfSU5ORVJfVEVYVF9SRUdFWF9BUlIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZihDT0xfRUxFTUVOVF9JTk5FUl9URVhUX1JFR0VYX0FSUltpXS50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmb3VuZDtcbn1cblxuY29uc3QgQ09MX1NFVFRJTkdTX1JFR0VYX1NUUlMgPSBbXCJgYGBzZXR0aW5nc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJgYGBjb2x1bW4tc2V0dGluZ3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYGBgbXVsdGktY29sdW1uLXNldHRpbmdzXCJdO1xuY29uc3QgQ09MX1NFVFRJTkdTX1JFR0VYX0FSUjogUmVnRXhwW10gPSBbXTtcbmZvcihsZXQgaSA9IDA7IGkgPCBDT0xfU0VUVElOR1NfUkVHRVhfU1RSUy5sZW5ndGg7IGkrKykge1xuICAgIENPTF9TRVRUSU5HU19SRUdFWF9BUlIucHVzaChuZXcgUmVnRXhwKENPTF9TRVRUSU5HU19SRUdFWF9TVFJTW2ldKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNDb2xTZXR0aW5nc1RhZyh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcblxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgIGZvcihsZXQgaSA9IDA7IGk8IENPTF9TRVRUSU5HU19SRUdFWF9BUlIubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZihDT0xfU0VUVElOR1NfUkVHRVhfQVJSW2ldLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFNldHRpbmdzQ29kZWJsb2NrKHRleHQ6IHN0cmluZyk6IFN0YXJ0VGFnUmVnZXhNYXRjaCB7XG5cbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRQb3NpdGlvbiA9IC0xO1xuICAgIGxldCBlbmRQb3NpdGlvbiA9IC0xXG4gICAgbGV0IG1hdGNoTGVuZ3RoID0gMDtcbiAgICBmb3IobGV0IGkgPSAwOyBpPCBDT0xfU0VUVElOR1NfUkVHRVhfQVJSLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgbGV0IHJlZ2V4RGF0YSA9IENPTF9TRVRUSU5HU19SRUdFWF9BUlJbaV0uZXhlYyh0ZXh0KVxuICAgICAgICBpZihyZWdleERhdGEgIT09IG51bGwgJiYgcmVnZXhEYXRhLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHJlZ2V4RGF0YS5pbmRleFxuICAgICAgICAgICAgbWF0Y2hMZW5ndGggPSByZWdleERhdGFbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgZW5kUG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgbWF0Y2hMZW5ndGg7XG5cbiAgICAgICAgICAgIGxldCByZW1haW5pbmdUZXh0ID0gdGV4dC5zbGljZShlbmRQb3NpdGlvbilcbiAgICAgICAgICAgIHJlZ2V4RGF0YSA9IENPREVCTE9DS19FTkRfUkVHRVguZXhlYyhyZW1haW5pbmdUZXh0KVxuICAgICAgICAgICAgaWYocmVnZXhEYXRhICE9PSBudWxsICYmIHJlZ2V4RGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZW5kUG9zaXRpb24gKz0gcmVnZXhEYXRhLmluZGV4ICsgcmVnZXhEYXRhWzBdLmxlbmd0aCBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICAgIGZvdW5kLCBcbiAgICAgICAgc3RhcnRQb3NpdGlvbiwgXG4gICAgICAgIGVuZFBvc2l0aW9uLCBcbiAgICAgICAgbWF0Y2hMZW5ndGgsXG4gICAgICAgIHJlZ2lvblR5cGU6IFwiQ09ERUJMT0NLXCJcbiAgICB9O1xufVxuXG5jb25zdCBDT0RFQkxPQ0tfU1RBUlRfUkVHRVhfU1RSOiBzdHJpbmcgPSBbXG5cIm11bHRpLWNvbHVtbi1zdGFydFwiLFxuXCJzdGFydC1tdWx0aS1jb2x1bW5cIlxuXS5yZWR1Y2UoKHByZXYsIGN1cikgPT4ge1xuICAgIGlmKHByZXYgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIGN1cjtcbiAgICB9XG4gICAgcmV0dXJuIGAke3ByZXZ9fCR7Y3VyfWA7XG59LCBcIlwiKVxuY29uc3QgU1RBUlRfQ09ERUJMT0NLX1JFR0VYOiBSZWdFeHAgPSBuZXcgUmVnRXhwKGBcXGBcXGBcXGAoOj8ke0NPREVCTE9DS19TVEFSVF9SRUdFWF9TVFJ9KSguKj8pXFxgXFxgXFxgYCwgXCJtc1wiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTdGFydENvZGVibG9jayh0ZXh0OiBzdHJpbmcpOiBTdGFydFRhZ1JlZ2V4TWF0Y2gge1xuXG4gICAgbGV0IHN0YXJ0UmVnaW9uID0gZGVmYXVsdFN0YXJ0UmVnaW9uRGF0YSgpO1xuICAgIHN0YXJ0UmVnaW9uLnJlZ2lvblR5cGUgPSBcIkNPREVCTE9DS1wiO1xuXG4gICAgbGV0IHJlZ2V4RGF0YSA9IFNUQVJUX0NPREVCTE9DS19SRUdFWC5leGVjKHRleHQpXG4gICAgaWYocmVnZXhEYXRhICE9PSBudWxsICYmIHJlZ2V4RGF0YS5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgc3RhcnRSZWdpb24uZm91bmQgPSB0cnVlO1xuICAgICAgICBzdGFydFJlZ2lvbi5zdGFydFBvc2l0aW9uID0gcmVnZXhEYXRhLmluZGV4XG4gICAgICAgIHN0YXJ0UmVnaW9uLm1hdGNoTGVuZ3RoID0gcmVnZXhEYXRhWzBdLmxlbmd0aDtcbiAgICAgICAgc3RhcnRSZWdpb24uZW5kUG9zaXRpb24gPSBzdGFydFJlZ2lvbi5zdGFydFBvc2l0aW9uICsgc3RhcnRSZWdpb24ubWF0Y2hMZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0UmVnaW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zU3RhcnRDb2RlQmxvY2sodGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbmRTdGFydENvZGVibG9jayh0ZXh0KS5mb3VuZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNSZWdpb25TdGFydCh0ZXh0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY29udGFpbnNTdGFydENvZGVCbG9jayh0ZXh0KSB8fCBjb250YWluc1N0YXJ0VGFnKHRleHQpIHx8IGNvbnRhaW5zUGFuZG9jKHRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY291bnRTdGFydFRhZ3MoaW5pdGlhbFRleHQ6IHN0cmluZyk6IHsgbnVtYmVyT2ZUYWdzOiBudW1iZXIsIGtleXM6IHN0cmluZ1tdIH0ge1xuXG4gICAgbGV0IGtleXM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IHRleHQgPSBpbml0aWFsVGV4dFxuICAgIGxldCBzdGFydFRhZ0RhdGEgPSBmaW5kU3RhcnRUYWcodGV4dCk7XG4gICAgd2hpbGUoc3RhcnRUYWdEYXRhLmZvdW5kKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBTbGljZSBvZmYgZXZlcnl0aGluZyBiZWZvcmUgdGhlIHRhZ1xuICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZShzdGFydFRhZ0RhdGEuc3RhcnRQb3NpdGlvbik7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBqdXN0IHRoZSBzdGFydCB0YWcgbGluZSBhbmQgdGhlbiBzZXQgdGV4dCB0byBldmVyeXRoaW5nIGp1c3RcbiAgICAgICAgICogYWZ0ZXIgdGhlIHN0YXJ0IHRhZy5cbiAgICAgICAgICovXG4gICAgICAgIGxldCB0YWcgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpWzBdO1xuICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTsgLy8gVGhpcyBtb3ZlcyB0aGUgdGV4dCAxIGNoYXJhY3RlciBzbyB3ZSBkb250IG1hdGNoIHRoZSBzYW1lIHRhZy5cblxuICAgICAgICAvLyBQYXJzZSBvdXQgdGhlIGtleSBhbmQgYXBwZW5kIHRvIHRoZSBsaXN0LlxuICAgICAgICBsZXQga2V5ID0gZ2V0U3RhcnRUYWdLZXkodGFnKTtcbiAgICAgICAgaWYoa2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICBrZXkgPSBcIlwiXG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG5cbiAgICAgICAgLy8gU2VhcmNoIGFnYWluIGZvciBhbm90aGVyIHRhZyBiZWZvcmUgbG9vcGluZy5cbiAgICAgICAgc3RhcnRUYWdEYXRhID0gZmluZFN0YXJ0VGFnKHRleHQpO1xuICAgIH1cblxuICAgIHRleHQgPSBpbml0aWFsVGV4dDtcbiAgICBzdGFydFRhZ0RhdGEgPSBmaW5kU3RhcnRDb2RlYmxvY2sodGV4dCk7XG4gICAgd2hpbGUoc3RhcnRUYWdEYXRhLmZvdW5kKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgc2V0dGluZ3NUZXh0ID0gdGV4dC5zbGljZShzdGFydFRhZ0RhdGEuc3RhcnRQb3NpdGlvbiwgc3RhcnRUYWdEYXRhLmVuZFBvc2l0aW9uKTtcbiAgICAgICAgdGV4dCA9IHRleHQuc2xpY2Uoc3RhcnRUYWdEYXRhLmVuZFBvc2l0aW9uKTtcblxuICAgICAgICBsZXQga2V5ID0gcGFyc2VTdGFydFJlZ2lvbkNvZGVCbG9ja0lEKHNldHRpbmdzVGV4dCk7XG4gICAgICAgIGlmKGtleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAga2V5ID0gXCJcIlxuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuXG4gICAgICAgIC8vIFNlYXJjaCBhZ2FpbiBmb3IgYW5vdGhlciB0YWcgYmVmb3JlIGxvb3BpbmcuXG4gICAgICAgIHN0YXJ0VGFnRGF0YSA9IGZpbmRTdGFydENvZGVibG9jayh0ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBudW1iZXJPZlRhZ3M6IGtleXMubGVuZ3RoLCBrZXlzIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhcnRUYWdEYXRhIHtcbiAgICBzdGFydEJsb2NrS2V5OiBzdHJpbmc7XG4gICAgbGluZXNBYm92ZUFycmF5OiBzdHJpbmdbXTtcbiAgICBzdGFydEJsb2NrVHlwZTogUmVnaW9uVHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydERhdGFBYm92ZUxpbmUobGluZXNBYm92ZUFycmF5OiBzdHJpbmdbXSk6IFN0YXJ0VGFnRGF0YSB7XG4gICAgcmV0dXJuIGdldFN0YXJ0QmxvY2tPckNvZGVibG9ja0Fib3ZlTGluZShsaW5lc0Fib3ZlQXJyYXksIFtcbiAgICAgICAgZmluZFN0YXJ0VGFnLFxuICAgICAgICBmaW5kU3RhcnRDb2RlYmxvY2ssXG4gICAgICAgIGZpbmRQYW5kb2NTdGFydFxuICAgIF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydEJsb2NrT3JDb2RlYmxvY2tBYm92ZUxpbmUobGluZXNBYm92ZUFycmF5OiBzdHJpbmdbXSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaEZ1bmN0aW9uczogKCh0ZXh0OiBzdHJpbmcpID0+IFN0YXJ0VGFnUmVnZXhNYXRjaClbXSk6IHsgc3RhcnRCbG9ja0tleTogc3RyaW5nLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lc0Fib3ZlQXJyYXk6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QmxvY2tUeXBlOiBSZWdpb25UeXBlICB9IHwgbnVsbCB7XG5cbiAgICBsZXQgb3JpZ2luYWxUZXh0ID0gbGluZXNBYm92ZUFycmF5LmpvaW4oXCJcXG5cIik7XG4gICAgbGV0IHt0YWdNYXRjaERhdGEsIGxhc3RGb3VuZFRhZywgdGV4dEFib3ZlfSA9ICBmaW5kTGFzdFZhbGlkVGFnKG9yaWdpbmFsVGV4dCk7XG5cbiAgICBpZih0YWdNYXRjaERhdGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYodGFnTWF0Y2hEYXRhLmZvdW5kID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZih0YWdNYXRjaERhdGEucmVnaW9uVHlwZSA9PT0gXCJDT0RFQkxPQ0tcIikge1xuICAgIFxuICAgICAgICBsZXQgZW5kVGFnU2VyYWNoRGF0YSA9IGZpbmRFbmRUYWcodGV4dEFib3ZlKTtcbiAgICAgICAgaWYoZW5kVGFnU2VyYWNoRGF0YS5mb3VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhcnRCbG9ja0tleSA9IHBhcnNlU3RhcnRSZWdpb25Db2RlQmxvY2tJRChsYXN0Rm91bmRUYWcpO1xuICAgICAgICBsZXQgbGluZXNBYm92ZUFycmF5ID0gdGV4dEFib3ZlLnNwbGl0KFwiXFxuXCIpO1xuXG4gICAgICAgIHJldHVybiB7IHN0YXJ0QmxvY2tLZXksIGxpbmVzQWJvdmVBcnJheSwgc3RhcnRCbG9ja1R5cGU6IFwiQ09ERUJMT0NLXCIgfTtcbiAgICB9XG5cbiAgICBpZih0YWdNYXRjaERhdGEucmVnaW9uVHlwZSA9PT0gXCJERVBSRUNJQVRFRFwiKSB7XG4gICAgXG4gICAgICAgIGxldCBlbmRUYWdTZXJhY2hEYXRhID0gZmluZEVuZFRhZyh0ZXh0QWJvdmUpO1xuICAgICAgICBpZihlbmRUYWdTZXJhY2hEYXRhLmZvdW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaW5lc0Fib3ZlQXJyYXkgPSB0ZXh0QWJvdmUuc3BsaXQoXCJcXG5cIik7XG4gICAgICAgIGxldCBzdGFydEJsb2NrS2V5ID0gZ2V0U3RhcnRUYWdLZXkobGFzdEZvdW5kVGFnKTtcblxuICAgICAgICBsZXQgY29kZUJsb2NrRGF0YSA9IHBhcnNlQ29kZUJsb2NrU3RhcnQobGluZXNBYm92ZUFycmF5KVxuICAgICAgICBpZihjb2RlQmxvY2tEYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN0YXJ0QmxvY2tLZXkgPSBjb2RlQmxvY2tEYXRhLmlkO1xuICAgICAgICAgICAgaWYoY29kZUJsb2NrRGF0YS5pbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBsaW5lc0Fib3ZlQXJyYXkgPSBsaW5lc0Fib3ZlQXJyYXkuc2xpY2UoY29kZUJsb2NrRGF0YS5pbmRleCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoc3RhcnRCbG9ja0tleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnRCbG9ja0tleSA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdGFydEJsb2NrS2V5LCBsaW5lc0Fib3ZlQXJyYXksIHN0YXJ0QmxvY2tUeXBlOiBcIkRFUFJFQ0lBVEVEXCIgfTtcbiAgICB9XG5cbiAgICBpZih0YWdNYXRjaERhdGEucmVnaW9uVHlwZSA9PT0gXCJQQURPQ1wiKSB7XG5cbiAgICAgICAgbGV0IGVuZFRhZ1NlcmFjaERhdGEgPSByZWR1Y2VQYW5kb2NSZWdpb25Ub0VuZERpdih0ZXh0QWJvdmUpXG4gICAgICAgIGlmKGVuZFRhZ1NlcmFjaERhdGEuZm91bmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxpbmVzQWJvdmVBcnJheSA9IHRleHRBYm92ZS5zcGxpdChcIlxcblwiKTtcblxuICAgICAgICBsZXQgcGFuZG9jRGF0YSA9IGdldFBhbmRvY1N0YXJ0RGF0YShgJHtsYXN0Rm91bmRUYWd9YCk7XG4gICAgICAgIGxldCBzdGFydEJsb2NrS2V5ID0gcGFuZG9jRGF0YS51c2VyU2V0dGluZ3MuY29sdW1uSUQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0QmxvY2tLZXksXG4gICAgICAgICAgICBsaW5lc0Fib3ZlQXJyYXksXG4gICAgICAgICAgICBzdGFydEJsb2NrVHlwZTogXCJQQURPQ1wiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGZpbmRMYXN0VmFsaWRUYWcob3JpZ2luYWxUZXh0OiBzdHJpbmcpIHtcblxuICAgICAgICBsZXQgdGV4dEFib3ZlID0gb3JpZ2luYWxUZXh0O1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IHRhZ01hdGNoRGF0YTogU3RhcnRUYWdSZWdleE1hdGNoID0gbnVsbDtcbiAgICAgICAgbGV0IGxhc3RGb3VuZFRhZyA9IFwiXCJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IHRydWU7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPiAxMDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHRhZ3NGb3VuZDogU3RhcnRUYWdSZWdleE1hdGNoW10gPSBbXTtcbiAgICAgICAgICAgIHNlYXJjaEZ1bmN0aW9ucy5mb3JFYWNoKChmdW5jKSA9PiB7XG4gICAgICAgICAgICAgICAgdGFnc0ZvdW5kLnB1c2goZnVuYyh0ZXh0QWJvdmUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnc0ZvdW5kID0gdGFnc0ZvdW5kLmZpbHRlcigodmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5mb3VuZCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH0pLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5zdGFydFBvc2l0aW9uIC0gYi5zdGFydFBvc2l0aW9uO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0YWdzRm91bmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhZ01hdGNoRGF0YSA9IHRhZ3NGb3VuZFswXTtcbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gb2Zmc2V0ICsgdGFnTWF0Y2hEYXRhLnN0YXJ0UG9zaXRpb247XG4gICAgICAgICAgICBsYXN0Rm91bmRUYWcgPSBvcmlnaW5hbFRleHQuc2xpY2Uoc3RhcnRJbmRleCwgc3RhcnRJbmRleCArIHRhZ01hdGNoRGF0YS5tYXRjaExlbmd0aCkudHJpbUVuZCgpO1xuXG4gICAgICAgICAgICBvZmZzZXQgKz0gKHRhZ01hdGNoRGF0YS5zdGFydFBvc2l0aW9uICsgdGFnTWF0Y2hEYXRhLm1hdGNoTGVuZ3RoKTtcbiAgICAgICAgICAgIHRleHRBYm92ZSA9IG9yaWdpbmFsVGV4dC5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhZ01hdGNoRGF0YSxcbiAgICAgICAgICAgIGxhc3RGb3VuZFRhZyxcbiAgICAgICAgICAgIHRleHRBYm92ZVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBmaWx0ZXIgYSBzZXQgb2Ygc3RyaW5ncywgcmV0dXJuaW5nIGFsbCBpdGVtcyBzdGFydGluZ1xuICogZnJvbSB0aGUgY2xvc2VzdCBvcGVuIHN0YXJ0IHRhZyB0aHJvdWdoIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIHNldC4gXG4gKiBcbiAqIFRoZSBmdW5jdGlvbiBmaWx0ZXJzIG91dCBhbGwgZW5kIHRhZ3MgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHN0YXJ0IHRhZyB3ZSBcbiAqIGZpbmQgaXMgdGhlIHByb3BlciBzdGFydCB0YWcgZm9yIHRoZSBsaXN0IHNlbnQuIFxuICogQHBhcmFtIGxpbmVzQWJvdmVBcnJheSBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhcnRCbG9ja0Fib3ZlTGluZShsaW5lc0Fib3ZlQXJyYXk6IHN0cmluZ1tdKTogeyBzdGFydEJsb2NrS2V5OiBzdHJpbmcsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lc0Fib3ZlQXJyYXk6IHN0cmluZ1tdIH0gfCBudWxsIHtcblxuICAgIHJldHVybiBnZXRTdGFydEJsb2NrT3JDb2RlYmxvY2tBYm92ZUxpbmUobGluZXNBYm92ZUFycmF5LCBbZmluZFN0YXJ0VGFnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRCbG9ja0JlbG93KGxpbmVzQmVsb3c6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuXG4gICAgLy8gUmVkdWNlIHRoZSBhcnJheSBkb3duIGludG8gYSBzaW5nbGUgc3RyaW5nIHNvIHRoYXQgd2UgY2FuXG4gICAgLy8gZWFzaWx5IFJlZ0V4IG92ZXIgdGhlIHN0cmluZyBhbmQgZmluZCB0aGUgaW5kaWNpZXMgd2UncmUgbG9va2luZyBmb3IuXG4gICAgbGV0IGxpbmVzQmVsb3dTdHIgPSBsaW5lc0JlbG93LnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICByZXR1cm4gcHJldiArIFwiXFxuXCIgICsgY3VycmVudDtcbiAgICB9LCBcIlwiKTtcbiAgICBsZXQgZW5kVGFnU2VyYWNoRGF0YSA9IGZpbmRFbmRUYWcobGluZXNCZWxvd1N0cik7XG4gICAgbGV0IHN0YXJ0VGFnU2VhcmNoRGF0YSA9IGZpbmRTdGFydFRhZyhsaW5lc0JlbG93U3RyKTtcblxuICAgIGxldCBzbGljZUVuZEluZGV4ID0gLTE7IC8vIElmIG5laXRoZXIgc3RhcnQgb3IgZW5kIGZvdW5kIHdlIHJldHVybiB0aGUgZW50aXJlIGFycmF5LlxuICAgIGlmKGVuZFRhZ1NlcmFjaERhdGEuZm91bmQgPT09IHRydWUgJiYgc3RhcnRUYWdTZWFyY2hEYXRhLmZvdW5kID09PSBmYWxzZSkge1xuXG4gICAgICAgIHNsaWNlRW5kSW5kZXggPSBlbmRUYWdTZXJhY2hEYXRhLnN0YXJ0UG9zaXRpb247XG4gICAgfVxuICAgIGVsc2UgaWYoZW5kVGFnU2VyYWNoRGF0YS5mb3VuZCA9PT0gZmFsc2UgJiYgc3RhcnRUYWdTZWFyY2hEYXRhLmZvdW5kID09PSB0cnVlKSB7XG5cbiAgICAgICAgc2xpY2VFbmRJbmRleCA9IHN0YXJ0VGFnU2VhcmNoRGF0YS5zdGFydFBvc2l0aW9uO1xuICAgIH1cbiAgICBlbHNlIGlmKGVuZFRhZ1NlcmFjaERhdGEuZm91bmQgPT09IHRydWUgJiYgc3RhcnRUYWdTZWFyY2hEYXRhLmZvdW5kID09PSB0cnVlKSB7XG5cbiAgICAgICAgc2xpY2VFbmRJbmRleCA9IGVuZFRhZ1NlcmFjaERhdGEuc3RhcnRQb3NpdGlvbjtcbiAgICAgICAgaWYoc3RhcnRUYWdTZWFyY2hEYXRhLnN0YXJ0UG9zaXRpb24gPCBlbmRUYWdTZXJhY2hEYXRhLnN0YXJ0UG9zaXRpb24pIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSBmb3VuZCBhIHN0YXJ0IHRhZyBiZWZvcmUgYW4gZW5kIHRhZyB3ZSB3YW50IHRvIHVzZSB0aGUgc3RhcnQgdGFnXG4gICAgICAgICAgICAgKiBvdXIgY3VycmVudCBibG9jayBpcyBub3QgcHJvcGVybHkgZW5kZWQgYW5kIHdlIHVzZSB0aGUgbmV4dCBzdGFydCB0YWcgXG4gICAgICAgICAgICAgKiBhcyBvdXIgbGltaXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2xpY2VFbmRJbmRleCA9IHN0YXJ0VGFnU2VhcmNoRGF0YS5zdGFydFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzQmVsb3cuc2xpY2UoMCwgc2xpY2VFbmRJbmRleCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydFRhZ0tleShzdGFydFRhZzogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG5cbiAgICBsZXQga2V5U3BsaXQgPSBzdGFydFRhZy5zcGxpdChcIjpcIik7XG4gICAgaWYoa2V5U3BsaXQubGVuZ3RoID4gMSl7XG4gICAgICAgIHJldHVybiBrZXlTcGxpdFsxXS5yZXBsYWNlKFwiIFwiLCBcIlwiKVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5cbmNvbnN0IFRBQl9IRUFERVJfRU5EX1JFR0VYX1NUUiA9IFwiXmBgYCRcIjtcbmNvbnN0IFRBQl9IRUFERVJfRU5EX1JFR0VYOiBSZWdFeHAgPSBuZXcgUmVnRXhwKFRBQl9IRUFERVJfRU5EX1JFR0VYX1NUUik7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb2RlQmxvY2tTdGFydChjb2RlQmxvY2tMaW5lczogc3RyaW5nW10pOiB7IGlkOiBzdHJpbmcsIGluZGV4OiBudW1iZXJ9IHwgbnVsbCB7XG5cbiAgICBsZXQgaWQgPSBudWxsO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb2RlQmxvY2tMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbGluZSA9IGNvZGVCbG9ja0xpbmVzW2ldO1xuXG4gICAgICAgIGlmKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQga2V5ID0gbGluZS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgICAgICBpZihrZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJyZWdpb24gaWRcIikge1xuICAgICAgICAgICAgICAgIGlkID0gbGluZS5zcGxpdChcIjpcIilbMV0udHJpbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZihUQUJfSEVBREVSX0VORF9SRUdFWC50ZXN0KGxpbmUpKSB7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBpZDogaWQsIGluZGV4OiBpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZihpZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IGlkOiBpZCwgaW5kZXg6IC0xIH1cbiAgICB9XG59XG5jb25zdCBDT0RFQkxPQ0tfRU5EX1JFR0VYX1NUUiA9IFwiYGBgXCI7XG5jb25zdCBDT0RFQkxPQ0tfRU5EX1JFR0VYOiBSZWdFeHAgPSBuZXcgUmVnRXhwKENPREVCTE9DS19FTkRfUkVHRVhfU1RSKTtcbmV4cG9ydCBmdW5jdGlvbiBmaW5kRW5kT2ZDb2RlQmxvY2sodGV4dDogc3RyaW5nKTogeyBmb3VuZDogYm9vbGVhbiwgc3RhcnRQb3NpdGlvbjogbnVtYmVyLCBlbmRQb3NpdGlvbjogbnVtYmVyLCBtYXRjaExlbmd0aDogbnVtYmVyIH0ge1xuXG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgbGV0IHN0YXJ0UG9zaXRpb24gPSAtMTtcbiAgICBsZXQgbWF0Y2hMZW5ndGggPSAwO1xuICAgIGxldCBlbmRQb3NpdGlvbiA9IC0xO1xuXG4gICAgbGV0IHJlZ2V4RGF0YSA9IENPREVCTE9DS19FTkRfUkVHRVguZXhlYyh0ZXh0KVxuICAgIGlmKHJlZ2V4RGF0YSAhPT0gbnVsbCAmJiByZWdleERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIHN0YXJ0UG9zaXRpb24gPSByZWdleERhdGEuaW5kZXhcbiAgICAgICAgbWF0Y2hMZW5ndGggPSByZWdleERhdGFbMF0ubGVuZ3RoXG4gICAgfVxuICAgIGVuZFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIG1hdGNoTGVuZ3RoO1xuXG4gICAgcmV0dXJuIHsgZm91bmQsIHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBtYXRjaExlbmd0aCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb2RlQmxvY2tTZXR0aW5ncyhjb2RlQmxvY2tMaW5lczogc3RyaW5nW10pOiBzdHJpbmcge1xuXG4gICAgbGV0IHNldHRpbmdzTGluZXMgPSBbXTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29kZUJsb2NrTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGxpbmUgPSBjb2RlQmxvY2tMaW5lc1tpXTtcblxuICAgICAgICBsZXQga2V5ID0gbGluZS5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIGlmKGtleS50b0xvd2VyQ2FzZSgpICE9PSBcInJlZ2lvbiBpZFwiKSB7XG4gICAgICAgICAgICBzZXR0aW5nc0xpbmVzLnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0dGluZ3NMaW5lcy5qb2luKFwiXFxuXCIpO1xufSIsIi8qXG4gKiBGaWxlbmFtZTogbXVsdGktY29sdW1uLW1hcmtkb3duL3NyYy91dGlsaXRpZXMvdXRpbHMudHNcbiAqIENyZWF0ZWQgRGF0ZTogVHVlc2RheSwgSmFudWFyeSAzMHRoIDIwMjIsIDQ6MDI6MTkgcG1cbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvblxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvblxuICovXG5cbmltcG9ydCB7IFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVJRChsZW5ndGg6IG51bWJlciA9IDEwKTogc3RyaW5nIHtcblxuICAgIGlmKGxlbmd0aCA+IDEwKSB7XG4gICAgICAgIGxlbmd0aCA9IDEwO1xuICAgIH1cbiAgICBsZXQgVUlEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xuICAgIFVJRCA9IFVJRC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIFxuICAgIHJldHVybiBVSUQ7XG59XG5cbi8qKlxuICogQkZTIG9uIHRoZSBjaGlsZCBub2RlcyBvZiB0aGUgcGFzc2VkIGVsZW1lbnQgc2VhcmNoaW5nIGZvciB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlXG4gKiBub2RlIHR5cGUgcGFzc2VkLiBSZXR1cm5pbmcgdGhlIGVsZW1lbnQgZm91bmQgb3IgbnVsbCBpZiBub25lIGZvdW5kLlxuICogXG4gKiBAcGFyYW0gcm9vdCBcbiAqIEBwYXJhbSBub2RlVHlwZU5hbWVcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoQ2hpbGRyZW5Gb3JOb2RlVHlwZShyb290OiBIVE1MRWxlbWVudCwgbm9kZVR5cGVOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuXG4gICAgbm9kZVR5cGVOYW1lID0gbm9kZVR5cGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgXG4gICAgbGV0IHF1ZXVlOiBIVE1MRWxlbWVudFtdID0gW3Jvb3RdXG4gICAgd2hpbGUocXVldWUubGVuZ3RoID4gMCl7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IG5vZGUgPSBxdWV1ZS5zaGlmdCgpXG5cbiAgICAgICAgICAgIGxldCBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgaWYobm9kZU5hbWUgPT09IG5vZGVUeXBlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gobm9kZS5jaGlsZHJlbltpXSBhcyBIVE1MRWxlbWVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZVNvdXJjZU1vZGUoc291cmNlUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgIGxldCBmaWxlTGVhZiA9IGdldEZpbGVMZWFmKHNvdXJjZVBhdGgpO1xuICAgIGlmKGZpbGVMZWFmID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZUxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGUubW9kZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRMZWFmU291cmNlTW9kZShmaWxlTGVhZjogV29ya3NwYWNlTGVhZik6IHN0cmluZyB7XG5cbiAgICByZXR1cm4gZmlsZUxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGUubW9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGVTdGlsbEluVmlldyhzb3VyY2VQYXRoOiBzdHJpbmcpOmJvb2xlYW4ge1xuXG4gICAgbGV0IGZpbGVMZWFmID0gZ2V0RmlsZUxlYWYoc291cmNlUGF0aCk7XG4gICAgaWYoZmlsZUxlYWYgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVMZWFmKHNvdXJjZVBhdGg6IHN0cmluZyk6IFdvcmtzcGFjZUxlYWYgfCBudWxsIHtcblxuICAgIGxldCBtYXJrZG93bkxlYXZlcyA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFwibWFya2Rvd25cIik7XG4gICAgaWYobWFya2Rvd25MZWF2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtYXJrZG93bkxlYXZlcy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIGlmKG1hcmtkb3duTGVhdmVzW2ldLmdldFZpZXdTdGF0ZSgpLnN0YXRlLmZpbGUgPT09IHNvdXJjZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXJrZG93bkxlYXZlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufSIsIi8qXG4gKiBGaWxlbmFtZTogbXVsdGktY29sdW1uLW1hcmtkb3duL3NyYy9kb21PYmplY3QudHNcbiAqIENyZWF0ZWQgRGF0ZTogVHVlc2RheSwgRmVicnVhcnkgMXN0IDIwMjIsIDEyOjA0OjAwIHBtXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb25cbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDIyIENhbWVyb24gUm9iaW5zb25cbiAqL1xuXG5pbXBvcnQgeyBnZXRVSUQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3V0aWxzXCI7XG5pbXBvcnQgeyBFbGVtZW50UmVuZGVyVHlwZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZWxlbWVudFJlbmRlclR5cGVQYXJzZXJcIjtcbmltcG9ydCB7IGNoZWNrRm9yUGFyYWdyYXBoSW5uZXJDb2xFbmRUYWcsIGNvbnRhaW5zQ29sRW5kVGFnLCBjb250YWluc0NvbFNldHRpbmdzVGFnLCBjb250YWluc0VuZFRhZywgY29udGFpbnNTdGFydFRhZywgZWxJbm5lclRleHRDb250YWluc0NvbEVuZFRhZyB9IGZyb20gXCJzcmMvdXRpbGl0aWVzL3RleHRQYXJzZXJcIjtcblxuY29uc3QgVVBEQVRFX1RJTUVTOiBudW1iZXJbXSA9IFsxMjUsIDEyNSwgMjUwLCAyMDAwMF07XG5jb25zdCBNSURfQlJFQUtfRVJST1JfTUVTU0FHRTogc3RyaW5nID0gXCJEZXRlY3RlZCBpbnZhbGlkIGNvbHVtbiBicmVhayBzeW50YXguXFxuUGxlYXNlIG1ha2Ugc3VyZSBjb2x1bW4gYnJlYWsgdGFncyBhcmUgbm90IGluIHRoZSBtaWRkbGUgb2YgYSBwYXJhZ3JhcGggYmxvY2tcIlxuXG5leHBvcnQgZW51bSBET01PYmplY3RUYWcge1xuICAgIG5vbmUsXG4gICAgc3RhcnRSZWdpb24sXG4gICAgcmVnaW9uU2V0dGluZ3MsXG4gICAgY29sdW1uQnJlYWssXG4gICAgZW5kUmVnaW9uXG59XG5cbmV4cG9ydCBlbnVtIEVsZW1lbnRDb2x1bW5CcmVha1R5cGUge1xuICAgIG5vbmUgPSAwLFxuICAgIHByZUJyZWFrLFxuICAgIHBvc3RCcmVhayxcbiAgICBtaWRCcmVha1xufVxuXG5leHBvcnQgY2xhc3MgRE9NT2JqZWN0IHtcbiAgICBub2RlS2V5OiBzdHJpbmc7XG4gICAgb3JpZ2luYWxFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBjbG9uZWRFbGVtZW50OiBIVE1MRWxlbWVudCA9IG51bGw7XG4gICAgVUlEOiBzdHJpbmc7XG4gICAgdGFnOiBET01PYmplY3RUYWc7XG4gICAgZWxlbWVudElzQ29sdW1uQnJlYWs6IEVsZW1lbnRDb2x1bW5CcmVha1R5cGUgPSBFbGVtZW50Q29sdW1uQnJlYWtUeXBlLm5vbmU7XG4gICAgdXNpbmdPcmlnaW5hbEVsZW1lbnQ6IGJvb2xlYW5cbiAgICBlbGVtZW50VHlwZTogRWxlbWVudFJlbmRlclR5cGUgPSBcInVuZGVmaW5lZFwiO1xuICAgIGVsZW1lbnRDb250YWluZXI6IEhUTUxEaXZFbGVtZW50ID0gbnVsbDtcbiAgICBlbGVtZW50UmVuZGVyZWRIZWlnaHQgPSAwO1xuICAgIGxpbmVzT2ZFbGVtZW50OiBzdHJpbmdbXVxuXG4gICAgY2FudmFzRWxlbWVudFVwZGF0ZVRpbWU6IG51bWJlciA9IERhdGUubm93KCk7XG4gICAgY2FudmFzVGltZXJJbmRleCA9IDA7XG5cbiAgICBsYXN0Q2xvbmVkRWxlbWVudFVwZGF0ZVRpbWU6IG51bWJlciA9IERhdGUubm93KCk7XG4gICAgdXBkYXRlVGltZXJJbmRleCA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICBsaW5lc09mRWxlbWVudDogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgcmFuZG9tSUQ6c3RyaW5nID0gZ2V0VUlEKCksIFxuICAgICAgICAgICAgICAgIHRhZzogRE9NT2JqZWN0VGFnID0gRE9NT2JqZWN0VGFnLm5vbmUgKSB7XG4gICAgICAgIHRoaXMubm9kZUtleSA9IGVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLlVJRCA9IHJhbmRvbUlEO1xuICAgICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgICAgdGhpcy51c2luZ09yaWdpbmFsRWxlbWVudCA9IGZhbHNlXG4gICAgICAgIHRoaXMubGluZXNPZkVsZW1lbnQgPSBsaW5lc09mRWxlbWVudDtcblxuICAgICAgICBpZih0aGlzLnRhZyA9PT0gRE9NT2JqZWN0VGFnLm5vbmUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RG9tT2JqZWN0VGFnKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIG91ciB0YWcgaXMgc3RpbGwgbm9uZSBoZXJlLCB3ZSBub3cgd2FudCB0byBjaGVjayBmb3JcbiAgICAgICAgLy8gYW4gaW4gcGFyYWdyYXBoIGNvbHVtbiBicmVhayBmbGFnLlxuICAgICAgICBpZih0aGlzLnRhZyA9PT0gRE9NT2JqZWN0VGFnLm5vbmUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tGb3JQcmVQb3N0Q29sdW1uQnJlYWsoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TWFpbkRPTUVsZW1lbnQoZG9tRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVsZW1lbnQgPSBkb21FbGVtZW50O1xuICAgICAgICB0aGlzLnVzaW5nT3JpZ2luYWxFbGVtZW50ID0gdHJ1ZVxuICAgIH1cblxuICAgIGNsb25lZEVsZW1lbnRSZWFkeUZvclVwZGF0ZSgpOiBib29sZWFuIHtcblxuICAgICAgICBsZXQgZGVsdGFUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdENsb25lZEVsZW1lbnRVcGRhdGVUaW1lO1xuICAgICAgICBpZihkZWx0YVRpbWUgPiBVUERBVEVfVElNRVNbdGhpcy51cGRhdGVUaW1lckluZGV4XSkge1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjYW52YXNSZWFkeUZvclVwZGF0ZSgpOiBib29sZWFuIHtcblxuICAgICAgICBsZXQgZGVsdGFUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMuY2FudmFzRWxlbWVudFVwZGF0ZVRpbWVcbiAgICAgICAgaWYoZGVsdGFUaW1lID4gVVBEQVRFX1RJTUVTW3RoaXMuY2FudmFzVGltZXJJbmRleF0pIHtcblxuICAgICAgICAgICAgdGhpcy5jYW52YXNFbGVtZW50VXBkYXRlVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLmNhbnZhc1RpbWVySW5kZXggPSBNYXRoLmNsYW1wKHRoaXMuY2FudmFzVGltZXJJbmRleCArIDEsIDAsIFVQREFURV9USU1FUy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHVwZGF0ZUNsb25lZEVsZW1lbnQobmV3Q2xvbmVkRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcblxuICAgICAgICB0aGlzLmNsb25lZEVsZW1lbnQgPSBuZXdDbG9uZWRFbGVtZW50O1xuXG4gICAgICAgIHRoaXMubGFzdENsb25lZEVsZW1lbnRVcGRhdGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy51cGRhdGVUaW1lckluZGV4ID0gTWF0aC5jbGFtcCh0aGlzLnVwZGF0ZVRpbWVySW5kZXggKyAxLCAwLCBVUERBVEVfVElNRVMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXREb21PYmplY3RUYWcoKSB7XG5cbiAgICAgICAgbGV0IGVsZW1lbnRUZXh0U3BhY2VkID0gdGhpcy5saW5lc09mRWxlbWVudC5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2ICsgXCJcXG5cIiArIGN1cnI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmKGNvbnRhaW5zRW5kVGFnKHRoaXMub3JpZ2luYWxFbGVtZW50LnRleHRDb250ZW50KSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRUeXBlID0gXCJ1blJlbmRlcmVkXCI7XG4gICAgICAgICAgICB0aGlzLnRhZyA9IERPTU9iamVjdFRhZy5lbmRSZWdpb247XG4gICAgICAgICAgICAvLyBlbC5hZGRDbGFzcyhNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvbkVuZFRhZylcbiAgICAgICAgICAgIC8vIHJlZ2lvbmFsTWFuYWdlci51cGRhdGVFbGVtZW50VGFnKGN1cnJlbnRPYmplY3QuVUlELCBET01PYmplY3RUYWcuZW5kUmVnaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGNvbnRhaW5zQ29sRW5kVGFnKHRoaXMub3JpZ2luYWxFbGVtZW50LnRleHRDb250ZW50KSA9PT0gdHJ1ZSB8fCBcbiAgICAgICAgKHRoaXMub3JpZ2luYWxFbGVtZW50LmlubmVySFRNTC5zdGFydHNXaXRoKFwiPG1hcms+XCIpKSAmJiBlbElubmVyVGV4dENvbnRhaW5zQ29sRW5kVGFnKHRoaXMub3JpZ2luYWxFbGVtZW50LnRleHRDb250ZW50KSkge1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRUeXBlID0gXCJ1blJlbmRlcmVkXCJcbiAgICAgICAgICAgIHRoaXMudGFnID0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrO1xuICAgICAgICAgICAgLy8gZWwuYWRkQ2xhc3MoTXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5FbmRUYWcpXG4gICAgICAgICAgICAvLyByZWdpb25hbE1hbmFnZXIudXBkYXRlRWxlbWVudFRhZyhjdXJyZW50T2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKGNvbnRhaW5zU3RhcnRUYWcodGhpcy5vcmlnaW5hbEVsZW1lbnQudGV4dENvbnRlbnQpID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFR5cGUgPSBcInVuUmVuZGVyZWRcIlxuICAgICAgICAgICAgdGhpcy50YWcgPSBET01PYmplY3RUYWcuc3RhcnRSZWdpb247XG4gICAgICAgICAgICAvLyBlbC5hZGRDbGFzcyhNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkVuZFRhZylcbiAgICAgICAgICAgIC8vIHJlZ2lvbmFsTWFuYWdlci51cGRhdGVFbGVtZW50VGFnKGN1cnJlbnRPYmplY3QuVUlELCBET01PYmplY3RUYWcuY29sdW1uQnJlYWspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoY29udGFpbnNDb2xTZXR0aW5nc1RhZyhlbGVtZW50VGV4dFNwYWNlZCkgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdGhpcy5lbGVtZW50VHlwZSA9IFwidW5SZW5kZXJlZFwiXG4gICAgICAgICAgICAvLyBlbC5hZGRDbGFzcyhNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvblNldHRpbmdzKVxuICAgICAgICAgICAgLy8gcmVnaW9uYWxNYW5hZ2VyID0gcmVnaW9uYWxDb250YWluZXIuc2V0UmVnaW9uU2V0dGluZ3MoZWxlbWVudFRleHRTcGFjZWQpXG4gICAgICAgICAgICAvLyByZWdpb25hbE1hbmFnZXIudXBkYXRlRWxlbWVudFRhZyhjdXJyZW50T2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLnJlZ2lvblNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrRm9yUHJlUG9zdENvbHVtbkJyZWFrKCkge1xuICAgICAgICBmdW5jdGlvbiByZXBsYWNlQ29sQnJlYWsodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgICAgICAgICAgbGV0IGNvbEJyZWFrRGF0YSA9IGNoZWNrRm9yUGFyYWdyYXBoSW5uZXJDb2xFbmRUYWcodGV4dCk7XG4gICAgICAgICAgICBpZihjb250YWluc0NvbHVtbkJyZWFrID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzdGFydEluZGV4ID0gY29sQnJlYWtEYXRhLmluZGV4O1xuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIGNvbEJyZWFrRGF0YVswXS5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgcHJlID0gdGV4dC5zbGljZSgwLCBzdGFydEluZGV4KTtcbiAgICAgICAgICAgIGxldCBwb3N0ID0gdGV4dC5zbGljZShlbmRJbmRleCk7XG5cbiAgICAgICAgICAgIHJldHVybiBgJHtwcmV9JHtwb3N0fWA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGV4dE9mRWxlbWVudCA9IHRoaXMub3JpZ2luYWxFbGVtZW50LmlubmVyVGV4dDtcbiAgICAgICAgbGV0IGNvbnRhaW5zQ29sdW1uQnJlYWsgPSBjaGVja0ZvclBhcmFncmFwaElubmVyQ29sRW5kVGFnKHRleHRPZkVsZW1lbnQpO1xuICAgICAgICBpZihjb250YWluc0NvbHVtbkJyZWFrICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5vcmlnaW5hbEVsZW1lbnQuaW5uZXJUZXh0O1xuICAgICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSBjb250YWluc0NvbHVtbkJyZWFrLmluZGV4O1xuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIGNvbnRhaW5zQ29sdW1uQnJlYWtbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IHByZSA9IHRleHQuc2xpY2UoMCwgc3RhcnRJbmRleCk7XG4gICAgICAgICAgICBsZXQgcG9zdCA9IHRleHQuc2xpY2UoZW5kSW5kZXgpXG5cbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgZWxlbWVudCBwYXNzZWQgaW4gaXMgYSBESVYgY29udGFpbmluZyBhIGNoaWxkIGVsZW1lbnQsIG90aGVyXG4gICAgICAgICAgICAvLyB0aW1lcyBpdCBpcyB0aGUgcm9vdCBjaGlsZCBlbGVtZW50IGFsb25lLCBoZXJlIHdlIGp1c3QgbWFrZSBzdXJlIHdlIGFyZSBhY2Nlc3NpbmdcbiAgICAgICAgICAgIC8vIHRoZSByaWdodCBlbGVtZW50IHdlIHdhbnQuXG4gICAgICAgICAgICBsZXQgY2hlY2tOb2RlID0gdGhpcy5vcmlnaW5hbEVsZW1lbnQ7XG4gICAgICAgICAgICBpZih0aGlzLm9yaWdpbmFsRWxlbWVudC5ub2RlTmFtZSA9PT0gXCJESVZcIikge1xuICAgICAgICAgICAgICAgIGNoZWNrTm9kZSA9IHRoaXMub3JpZ2luYWxFbGVtZW50LmNoaWxkcmVuWzBdIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcGFyYWdyYXBoID0gbnVsbDtcbiAgICAgICAgICAgIGlmKGNoZWNrTm9kZS5ub2RlTmFtZSA9PT0gXCJQXCIpIHtcblxuICAgICAgICAgICAgICAgIC8vIFBhcmFncmFwaHMgc2ltcGx5IHJlbW92ZSB0aGUgY29sLWJyZWFrIHRhZ1xuICAgICAgICAgICAgICAgIC8vIHdlIHNldCBvdXIgZWxlbWVudCBoZXJlIGluY2FzZSB3ZSBuZWVkIHRvIGRpc3BsYXkgYW4gZXJyb3IuXG4gICAgICAgICAgICAgICAgcGFyYWdyYXBoID0gY2hlY2tOb2RlO1xuICAgICAgICAgICAgICAgIGNoZWNrTm9kZS5pbm5lclRleHQgPSBgJHtwcmV9JHtwb3N0fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGNoZWNrTm9kZS5ub2RlTmFtZSA9PT0gXCJVTFwiIHx8IGNoZWNrTm9kZS5ub2RlTmFtZSA9PT0gXCJPTFwiKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGdldCB0aGUgbGlzdCBpdGVtIHRoYXQgY29udGFpbnMgdGhlIGNvbHVtbiBicmVhayxcbiAgICAgICAgICAgICAgICAvLyBGcm9tIHRlc3RpbmcgdGhpcyBjb2RlIHNob3VsZCBvbmx5IHJ1biB3aGVuIHRoZSBjb2x1bW4gYnJlYWsgaXMgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgIC8vIG9mIGEgbGlzdCBub3QgYXQgdGhlIHN0YXJ0IG9mIHRoZSBsaXN0LlxuICAgICAgICAgICAgICAgIGxldCBsaXN0SXRlbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gY2hlY2tOb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNoZWNrTm9kZS5jaGlsZHJlbltpXS5ub2RlTmFtZSA9PT0gXCJMSVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbSA9IGNoZWNrTm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYobGlzdEl0ZW0gIT09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlLCB0aGUgbGlzdCBlbGVtZW50IEhUTUwgd2l0aG91dCB0aGUgY29sLWJyZWFrIHRleHQuXG4gICAgICAgICAgICAgICAgICAgIChsaXN0SXRlbSBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MID0gcmVwbGFjZUNvbEJyZWFrKChsaXN0SXRlbSBhcyBIVE1MRWxlbWVudCkuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBFbGVtZW50IFR5cGU6ICR7Y2hlY2tOb2RlLm5vZGVOYW1lfSwgZG9lcyBub3QgY3VycmVudGx5IHN1cHBvcnQgYXBwZW5lZCBjb2x1bW4tYnJlYWtzLmAsIGNoZWNrTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICAgICAgICAgIC8vIGlmKHBhcmFncmFwaCkge1xuICAgICAgICAgICAgICAgIC8vICAgICBwYXJhZ3JhcGguaW5uZXJUZXh0ID0gYCR7cHJlfSR7cG9zdH1gO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIkNoZWNraW5nIHdoZXJlIGNvbHVtbiBicmVhayBpc1wiLCBzdGFydEluZGV4LCBlbmRJbmRleCwgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgaWYoc3RhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJjb2x1bW4gYnJlYWsgYXQgc3RhcnQgb2YgZWxlbWVudC5cIilcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJc0NvbHVtbkJyZWFrID0gRWxlbWVudENvbHVtbkJyZWFrVHlwZS5wcmVCcmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoZW5kSW5kZXggPT09IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIkNvbHVtbiBicmVhayBhdCBlbmQgb2YgZWxlbWVudC5cIilcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJc0NvbHVtbkJyZWFrID0gRWxlbWVudENvbHVtbkJyZWFrVHlwZS5wb3N0QnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiQ29sdW1uIGJyZWFrIGluIHRoZSBtaWRkbGUgb2YgZWxlbWVudD9cIilcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJc0NvbHVtbkJyZWFrID0gRWxlbWVudENvbHVtbkJyZWFrVHlwZS5taWRCcmVhaztcblxuICAgICAgICAgICAgICAgIGNvbnN0IEVSUk9SX0NPTE9SX0NTUyA9IFwibWNtLWVycm9yLW1lc3NhZ2UtY29sb3JcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBDRU5URVJfQUxJR05fU1BBTl9DU1MgPSBcIm1jbS1zcGFuLWNvbnRlbnQtYWxpZ25tZW50LWNlbnRlclwiO1xuICAgICAgICAgICAgICAgIGlmKHBhcmFncmFwaCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhZ3JhcGguaW5uZXJIVE1MID0gYCR7cHJlfVxcbjxzcGFuIGNsYXNzPVwiJHtFUlJPUl9DT0xPUl9DU1N9ICR7Q0VOVEVSX0FMSUdOX1NQQU5fQ1NTfVwiPiR7TUlEX0JSRUFLX0VSUk9SX01FU1NBR0V9PC9zcGFuPlxcblxcbiR7cG9zdH1gLnNwbGl0KFwiXFxuXCIpLmpvaW4oXCI8YnI+XCIpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRE9NU3RhcnRSZWdpb25PYmplY3QgZXh0ZW5kcyBET01PYmplY3Qge1xuXG4gICAgcmVnaW9uRWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihiYXNlRE9NT2JqZWN0OiBET01PYmplY3QsIHJlZ2lvbkVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG5cbiAgICAgICAgc3VwZXIoYmFzZURPTU9iamVjdC5vcmlnaW5hbEVsZW1lbnQsIGJhc2VET01PYmplY3QubGluZXNPZkVsZW1lbnQsIGJhc2VET01PYmplY3QuVUlELCBET01PYmplY3RUYWcuc3RhcnRSZWdpb24pO1xuICAgICAgICB0aGlzLnJlZ2lvbkVsZW1lbnQgPSByZWdpb25FbGVtZW50O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tMaXN0RE9NT2JqZWN0IGV4dGVuZHMgRE9NT2JqZWN0IHtcblxuICAgIG9yaWdpbmFsQ2hlY2tib3hlczogSFRNTEVsZW1lbnRbXSA9IFtdO1xuICAgIGNoZWNrYm94RWxlbWVudHM6IE1hcDxudW1iZXIsIEhUTUxJbnB1dEVsZW1lbnQ+ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0cnVjdG9yKGJhc2VET01PYmplY3Q6IERPTU9iamVjdCkge1xuXG4gICAgICAgIHN1cGVyKGJhc2VET01PYmplY3Qub3JpZ2luYWxFbGVtZW50LCBiYXNlRE9NT2JqZWN0LmxpbmVzT2ZFbGVtZW50LCBiYXNlRE9NT2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLm5vbmUpO1xuICAgIH1cblxuICAgIGNoZWNrYm94Q2xpY2tlZChpbmRleDogbnVtYmVyKSB7XG5cbiAgICAgICAgaWYodGhpcy5jaGVja2JveEVsZW1lbnRzLmhhcyhpbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hFbGVtZW50cy5nZXQoaW5kZXgpLmNsaWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihpbmRleCA8IHRoaXMub3JpZ2luYWxDaGVja2JveGVzLmxlbmd0aCkge1xuXG4gICAgICAgICAgICBsZXQgb3JpZ2luYWxJbnB1dCA9IHRoaXMub3JpZ2luYWxDaGVja2JveGVzW2luZGV4XS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YXNrLWxpc3QtaXRlbS1jaGVja2JveCcpXG4gICAgICAgICAgICBpZihvcmlnaW5hbElucHV0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIChvcmlnaW5hbElucHV0WzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGZpbmQgY2hlY2tib3ggdG8gY2xpY2suXCIpXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDaGVja2JveEVsZW1lbnQoaW5kZXg6IG51bWJlcik6IEhUTUxJbnB1dEVsZW1lbnQgfCB1bmRlZmluZWQge1xuXG5cbiAgICAgICAgaWYodGhpcy5jaGVja2JveEVsZW1lbnRzLmhhcyhpbmRleCkgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIGlmKGluZGV4IDwgdGhpcy5vcmlnaW5hbENoZWNrYm94ZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxJbnB1dCA9IHRoaXMub3JpZ2luYWxDaGVja2JveGVzW2luZGV4XT8uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFzay1saXN0LWl0ZW0tY2hlY2tib3gnKVxuICAgICAgICAgICAgICAgIGlmKG9yaWdpbmFsSW5wdXQ/Lmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tib3hFbGVtZW50cy5zZXQoaW5kZXgsIChvcmlnaW5hbElucHV0WzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmaW5kIGNoZWNrYm94IGVsZW1lbnQgdG8gcmV0dXJuLlwiLCB0aGlzLm9yaWdpbmFsQ2hlY2tib3hlcywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja2JveEVsZW1lbnRzLmdldChpbmRleCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrRm9yVGFza0xpc3RFbGVtZW50KGRvbUVsZW1lbnQ6IERPTU9iamVjdCkge1xuXG4gICAgICAgIGlmKGRvbUVsZW1lbnQub3JpZ2luYWxFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YXNrLWxpc3QtaXRlbVwiKS5sZW5ndGggPiAwICkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRhc2tMaXN0RE9NT2JqZWN0KGRvbUVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRvbUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENoaWxkQ2hlY2tib3goZWw6IEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQge1xuXG4gICAgICAgIGxldCBjaGVja2JveEVsZW1lbnRzID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFzay1saXN0LWl0ZW0tY2hlY2tib3gnKVxuICAgICAgICBpZihjaGVja2JveEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgICAgICByZXR1cm4gY2hlY2tib3hFbGVtZW50c1swXSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGVsLmNoaWxkcmVuWzBdIGFzIEhUTUxFbGVtZW50XG4gICAgfVxufSIsIi8qXG4gKiBGaWxlOiBtdWx0aS1jb2x1bW4tbWFya2Rvd24vc3JjL3V0aWxpdGllcy9jc3NEZWZpbml0aW9ucy50c1xuICogQ3JlYXRlZCBEYXRlOiBXZWRuZXNkYXksIEZlYnJ1YXJ5IDE2dGggMjAyMiwgMTE6MDk6MDYgYW1cbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvblxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvblxuICovXG5cbmV4cG9ydCBlbnVtIE11bHRpQ29sdW1uTGF5b3V0Q1NTIHtcblxuICAgIFJlZ2lvblJvb3RDb250YWluZXJEaXYgPSBcIm1jbS1jb2x1bW4tcm9vdC1jb250YWluZXJcIixcbiAgICBSZWdpb25FcnJvckNvbnRhaW5lckRpdiA9IFwibWNtLWNvbHVtbi1lcnJvci1yZWdpb24td3JhcHBlclwiLFxuICAgIFJlZ2lvbkNvbnRlbnRDb250YWluZXJEaXYgPSBcIm1jbS1jb2x1bW4tcmVnaW9uLXdyYXBwZXJcIixcbiAgICBSZWdpb25Db2x1bW5Db250YWluZXJEaXYgPSBcIm1jbS1jb2x1bW4tcGFyZW50LWNvbnRhaW5lclwiLFxuICAgIENvbHVtbkR1YWxFbGVtZW50Q29udGFpbmVyID0gXCJtY20tY29sdW1uLWVsZW1lbnQtd3JhcHBlclwiLFxuICAgIE9yaWdpbmFsRWxlbWVudFR5cGUgPSBcIm1jbS1vcmlnaW5hbC1jb2x1bW4tZWxlbWVudFwiLFxuICAgIENsb25lZEVsZW1lbnRUeXBlID0gXCJtY20tY2xvbmVkLWNvbHVtbi1lbGVtZW50XCIsXG5cbiAgICBDb250ZW50T3ZlcmZsb3dBdXRvU2Nyb2xsX1ggPSBcIm1jbS1jb250ZW50LW92ZXJmbG93LWF1dG8tc2Nyb2xsLXhcIixcbiAgICBDb250ZW50T3ZlcmZsb3dBdXRvU2Nyb2xsX1kgPSBcIm1jbS1jb250ZW50LW92ZXJmbG93LWF1dG8tc2Nyb2xsLXlcIixcbiAgICBDb250ZW50T3ZlcmZsb3dIaWRkZW5fWCA9IFwibWNtLWNvbnRlbnQtb3ZlcmZsb3ctaGlkZGVuLXhcIixcbiAgICBDb250ZW50T3ZlcmZsb3dIaWRkZW5fWSA9IFwibWNtLWNvbnRlbnQtb3ZlcmZsb3ctaGlkZGVuLXlcIixcblxuICAgIEFsaWdubWVudExlZnQgPSBcIm1jbS1jb250ZW50LWFsaWdubWVudC1sZWZ0XCIsXG4gICAgQWxpZ25tZW50Q2VudGVyID0gXCJtY20tY29udGVudC1hbGlnbm1lbnQtY2VudGVyXCIsXG4gICAgQWxpZ25tZW50UmlnaHQgPSBcIm1jbS1jb250ZW50LWFsaWdubWVudC1yaWdodFwiLFxuXG4gICAgTm9GbGV4U2hyaW5rID0gXCJtY20tbm8tZmxleC1zaHJpbmtcIixcblxuICAgIFJlZmxvd0NvbnRhaW5lckRpdiA9IFwibWNtLWRvYy1yZWZsb3ctY29udGFpbmVyXCIsXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIFNpbmdsZUNvbHVtblNtYWxsID0gXCJtY20tc2luZ2xlLWNvbHVtbi1zbWFsbFwiLFxuICAgIFNpbmdsZUNvbHVtbk1lZCA9IFwibWNtLXNpbmdsZS1jb2x1bW4tbWVkaXVtXCIsXG4gICAgU2luZ2xlQ29sdW1uTGFyZ2UgPSBcIm1jbS1zaW5nbGUtY29sdW1uLWxhcmdlXCIsXG4gICAgU2luZ2xlQ29sdW1uRnVsbCA9IFwibWNtLXNpbmdsZS1jb2x1bW4tZnVsbFwiLFxuXG4gICAgU2luZ2xlQ29sdW1uTGVmdExheW91dCA9IFwibWNtLXNpbmdsZWNvbC1sYXlvdXQtbGVmdFwiLFxuICAgIFNpbmdsZUNvbHVtbkNlbnRlckxheW91dCA9IFwibWNtLXNpbmdsZWNvbC1sYXlvdXQtY2VudGVyXCIsXG4gICAgU2luZ2xlQ29sdW1uUmlnaHRMYXlvdXQgPSBcIm1jbS1zaW5nbGVjb2wtbGF5b3V0LXJpZ2h0XCIsXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgIFR3b0VxdWFsQ29sdW1ucyA9IFwibWNtLXR3by1lcXVhbC1jb2x1bW5zXCIsXG5cbiAgICBUd29Db2x1bW5TbWFsbCA9IFwibWNtLXR3by1jb2x1bW4tc21hbGxcIixcbiAgICBUd29Db2x1bW5MYXJnZSA9IFwibWNtLXR3by1jb2x1bW4tbGFyZ2VcIixcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gICAgVGhyZWVFcXVhbENvbHVtbnMgPSBcIm1jbS10aHJlZS1lcXVhbC1jb2x1bW5zXCIsXG5cbiAgICBUaHJlZUNvbHVtbl9MYXJnZSA9IFwibWNtLXRocmVlLWNvbHVtbi1sYXJnZVwiLFxuICAgIFRocmVlQ29sdW1uX1NtYWxsID0gXCJtY20tdGhyZWUtY29sdW1uLXNtYWxsXCIsXG59XG5cbmV4cG9ydCBlbnVtIE11bHRpQ29sdW1uU3R5bGVDU1Mge1xuXG4gICAgUmVnaW9uRXJyb3JNZXNzYWdlID0gXCJtY20tY29sdW1uLWVycm9yLW1lc3NhZ2VcIixcbiAgICBSZWdpb25TZXR0aW5ncyA9IFwibWNtLWNvbHVtbi1zZXR0aW5ncy13cmFwcGVyXCIsXG4gICAgUmVnaW9uQ29udGVudCA9IFwibWNtLWNvbHVtbi1jb250ZW50LXdyYXBwZXJcIixcbiAgICBSZWdpb25FbmRUYWcgPSBcIm1jbS1jb2x1bW4tZW5kLXRhZy13cmFwcGVyXCIsXG4gICAgQ29sdW1uRW5kVGFnID0gXCJtY20tY29sdW1uLWJyZWFrLXRhZy13cmFwcGVyXCIsXG4gICAgUmVnaW9uU2hhZG93ID0gXCJtY20tcmVnaW9uLXNoYWRvd1wiLFxuICAgIENvbHVtblNoYWRvdyA9IFwibWNtLWNvbHVtbi1zaGFkb3dcIixcbiAgICBDb2x1bW5Cb3JkZXIgPSBcIm1jbS1jb2x1bW4tYm9yZGVyXCIsXG4gICAgQ29sdW1uQ29udGVudCA9IFwibWNtLWNvbHVtbi1kaXZcIixcbiAgICBTbWFsbEZvbnQgPSBcIm1jbS1zbWFsbC1mb250LW1lc3NhZ2VcIlxufSIsIi8qKlxuICogRmlsZTogL3NyYy91dGlsaXRpZXMvZWxlbWVudFJlbmRlclR5cGVQYXJzZXIudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDIzIENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqL1xuXG5pbXBvcnQgeyBzZWFyY2hDaGlsZHJlbkZvck5vZGVUeXBlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY29uc3QgQUxMX0VMRU1FTlRfUkVOREVSX1RZUEVTID0gW1xuICAgIFwidW5kZWZpbmVkXCIsXG4gICAgXCJiYXNpY0VsZW1lbnRcIixcbiAgICBcInNwZWNpYWxSZW5kZXJcIixcbiAgICBcImJ1dHRvblBsdWdpblwiLFxuICAgIFwiZGF0YXZpZXdQbHVnaW5cIixcbiAgICBcImltYWdlRW1iZWRcIixcbiAgICBcImFkbW9uaXRpb25Gb2xkXCIsXG4gICAgXCJjYWxsb3V0Q29weUJ1dHRvblwiLFxuICAgIFwiaW50ZXJuYWxFbWJlZFwiLFxuICAgIFwiZGF0YXZpZXdKU0NhbnZhc0VtYmVkXCIsXG4gICAgXCJkYXRhdmlld0pTRW1iZWRcIixcbiAgICBcImRhdGF2aWV3SW5saW5lUXVlcnlcIixcbiAgICBcImRpY2VSb2xsZXJcIixcbiAgICBcImFkbW9uaXRpb25cIixcbiAgICBcImN1c3RvbUZyYW1lUGx1Z2luXCIsXG4gICAgXCJpRnJhbWVFbWJlZFwiLFxuICAgIFwidW5SZW5kZXJlZFwiXG5dIGFzIGNvbnN0O1xuZXhwb3J0IHR5cGUgRWxlbWVudFJlbmRlclR5cGUgPSB0eXBlb2YgQUxMX0VMRU1FTlRfUkVOREVSX1RZUEVTW251bWJlcl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50UmVuZGVyVHlwZShlbGVtZW50OiBIVE1MRWxlbWVudCk6IEVsZW1lbnRSZW5kZXJUeXBlIHtcblxuICAgIGlmKGlzRW1iZWRlZEltYWdlKGVsZW1lbnQpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBcImltYWdlRW1iZWRcIlxuICAgIH1cblxuICAgIGlmKGlzQnV0dG9uUGx1Z2luX0Nyb3NzQ29tcGF0aWJpbHR5KGVsZW1lbnQpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBcImJ1dHRvblBsdWdpblwiXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIERhdGF2aWV3IHBsdWdpbiBuZWVkcyB0byBiZSBjb25zdGFudGx5IGNoZWNrZWQgaWYgdGhlIGNsb25lIHNob3VsZCBiZVxuICAgICAqIHVwZGF0ZWQgYnV0IHNob3VsZCBub3QgYWx3YXlzIHVwZGF0ZSB0aGUgXCJkdWFsIHJlbmRlclwiIGFzcGVjdCwgc28gd2UgYWRkXG4gICAgICogYSBzcGVjaWFsIGNhc2UgZm9yIHRoYXQgcGx1Z2luIGFuZCBtYXliZSBvdGhlcnMgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKi9cbiAgICBpZihoYXNEYXRhdmlldyhlbGVtZW50KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gXCJkYXRhdmlld1BsdWdpblwiXG4gICAgfSBcbiAgICBlbHNlIGlmKGlzSW50ZXJuYWxFbWJlZChlbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gXCJpbnRlcm5hbEVtYmVkXCJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTb21lIHR5cGVzIG9mIGNvbnRlbnQgYXJlIHJlbmRlcmVkIGluIGNhbnZhc2VzIHdoaWNoIGFyZSBub3QgcmVuZGVyZWQgcHJvcGVybHlcbiAgICAgKiB3aGVuIHdlIGNsb25lIHRoZSBvcmlnaW5hbCBub2RlLiBIZXJlIHdlIGFyZSBmbGFnZ2luZyB0aGUgZWxlbWVudCBhcyBhIGNhbnZhc1xuICAgICAqIGVsZW1lbnQgc28gd2UgY2FuIGNsb25lIHRoZSBjYW52YXMgdG8gYSBjb3B5IGVsZW1lbnQgd2l0aGluIHRoZSByZWdpb24uXG4gICAgICogXG4gICAgICovXG4gICAgaWYoIGhhc0RhdGF2aWV3SlNDYW52YXMoZWxlbWVudCkgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwiZGF0YXZpZXdKU0NhbnZhc0VtYmVkXCJcbiAgICB9XG4gICAgaWYoIGhhc0RhdGF2aWV3SlMoZWxlbWVudCkgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwiZGF0YXZpZXdKU0VtYmVkXCJcbiAgICB9XG4gICAgaWYoaGFzRGF0YXZpZXdJbmxpbmUoZWxlbWVudCkgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwiZGF0YXZpZXdJbmxpbmVRdWVyeVwiXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9vayBmb3Igc3BlY2lmaWMga2luZHMgb2YgZWxlbWVudHMgYnkgdGhlaXIgQ1NTIGNsYXNzIG5hbWVzIGhlcmUuIFRoZXNlIFxuICAgICAqIGFyZSBnb2luZyB0byBiZSBicml0dGxlIGxpbmtzIGFzIHRoZXkgcmVseSBvbiBvdGhlciBwbHVnaW4gZGVmaW5pdGlvbnMgYnV0XG4gICAgICogYXMgdGhpcyBpcyBvbmx5IGFkZGluZyBpbiBleHRyYSBjb21wYXRhYmlsaXR5IHRvIHRoZSBwbHVnaW5zIGRlZmluZWQgaGVyZSBcbiAgICAgKiBpdCBzaG91bGQgYmUgb2suXG4gICAgICogXG4gICAgICogVGhlc2UgbWF5IGJlIGNsYXNzZXMgb24gb25lIG9mIHRoZSBzaW1wbGUgZWxlbWVudHMgKHN1Y2ggYXMgYSBwYXJhZ3JhcGgpXG4gICAgICogdGhhdCB3ZSBzZWFyY2ggZm9yIGJlbG93IHNvIG5lZWQgdG8gbG9vayBmb3IgdGhlc2UgZmlyc3QuXG4gICAgICovXG4gICAgaWYoaGFzRGljZVJvbGxlcihlbGVtZW50KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gXCJkaWNlUm9sbGVyXCJcbiAgICB9XG4gICAgZWxzZSBpZihoYXNDb3B5QnV0dG9uKGVsZW1lbnQpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBcImNhbGxvdXRDb3B5QnV0dG9uXCJcbiAgICB9XG4gICAgZWxzZSBpZihoYXNBZG1vbml0aW9uRm9sZChlbGVtZW50KSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gXCJhZG1vbml0aW9uRm9sZFwiXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBjaGVja3MgZm9yIHNwZWNpYWwgdHlwZXMgb2YgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgbm9ybWFsbHkuIElzXG4gICAgICogc2xpZ2h0bHkgcmVkdW5kYW50IHdpdGggbmV4dCBjaGVjayBidXQgZGlmZmVyZW50aWF0ZXMgYmV0d2VlbiB0eXBlcyBvZiBlbWVudHMgXG4gICAgICogYmVpbmcgY2hlY2tlZC5cbiAgICAgKi9cbiAgICBpZihoYXNBZG1vbml0aW9uKGVsZW1lbnQpID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBcImFkbW9uaXRpb25cIlxuICAgIH1cbiAgICBlbHNlIGlmIChpc0lGcmFtZShlbGVtZW50KSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgIHJldHVybiBcImlGcmFtZUVtYmVkXCJcbiAgICB9XG4gICAgZWxzZSBpZihpc0N1c3RvbUlGcmFtZShlbGVtZW50KSA9PT0gdHJ1ZSkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFwiY3VzdG9tRnJhbWVQbHVnaW5cIlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHdlIGRpZG50IGZpbmQgYSBzcGVjaWFsIGVsZW1lbnQgd2Ugd2FudCB0byBjaGVjayBmb3Igc2ltcGxlIGVsZW1lbnRzXG4gICAgICogc3VjaCBhcyBwYXJhZ3JhcGhzIG9yIGxpc3RzLiBJbiB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiB3ZSBvbmx5IHNldCB1cFxuICAgICAqIHRoZSBzcGVjaWFsIGNhc2UgZm9yIFwic3BlY2lhbFJlbmRlclwiIGVsZW1lbnRzIHNvIHRoaXMgKnNob3VsZCogYmUgc2F2aW5nXG4gICAgICogc29tZSByZW5kZXJpbmcgdGltZSBieSBzZXR0aW5nIHRoZXNlIHRhZ3MgcHJvcGVybHkuXG4gICAgICovXG4gICAgaWYoaGFzUGFyYWdyYXBoKGVsZW1lbnQpIHx8IFxuICAgICAgIGhhc0hlYWRlcihlbGVtZW50KSAgICB8fFxuICAgICAgIGhhc0xpc3QoZWxlbWVudCkgfHxcbiAgICAgICBpc0hvcml6b250YWxSdWxlKGVsZW1lbnQpIHx8XG4gICAgICAgaXNUYWJsZShlbGVtZW50KSkge1xuXG4gICAgICAgIHJldHVybiBcImJhc2ljRWxlbWVudFwiXG4gICAgfVxuXG4gICAgLy8gSWYgc3RpbGwgbm90aGluZyBmb3VuZCB3ZSByZXR1cm4gb3RoZXIgYXMgdGhlIGRlZmF1bHQgcmVzcG9uc2UgaWYgbm90aGluZyBlbHNlIGZvdW5kLlxuICAgIHJldHVybiBcInNwZWNpYWxSZW5kZXJcIlxufVxuXG5mdW5jdGlvbiBoYXNQYXJhZ3JhcGgoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUwuc3RhcnRzV2l0aChcIjxwXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzSGVhZGVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG5cbiAgICBpZihlbGVtZW50LmlubmVySFRNTC5zdGFydHNXaXRoKFwiPGgxXCIpIHx8IFxuICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MLnN0YXJ0c1dpdGgoXCI8aDJcIikgfHwgXG4gICAgICAgZWxlbWVudC5pbm5lckhUTUwuc3RhcnRzV2l0aChcIjxoM1wiKSB8fCBcbiAgICAgICBlbGVtZW50LmlubmVySFRNTC5zdGFydHNXaXRoKFwiPGg0XCIpIHx8XG4gICAgICAgZWxlbWVudC5pbm5lckhUTUwuc3RhcnRzV2l0aChcIjxoNVwiKSB8fFxuICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MLnN0YXJ0c1dpdGgoXCI8aDZcIikpIHtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhc0xpc3QoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICBcbiAgICBpZihlbGVtZW50LmlubmVySFRNTC5zdGFydHNXaXRoKFwiPHVsXCIpIHx8IFxuICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MLnN0YXJ0c1dpdGgoXCI8b2xcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYXNDb3B5QnV0dG9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNvcHktY29kZS1idXR0b25cIikubGVuZ3RoICE9PSAwIHx8IFxuICAgICAgICAgICAgZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYWRtb25pdGlvbi1jb250ZW50LWNvcHlcIikubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiBoYXNEaWNlUm9sbGVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRpY2Utcm9sbGVyXCIpLmxlbmd0aCAhPT0gMDtcbn1cblxuZnVuY3Rpb24gaGFzQWRtb25pdGlvbihlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJhZG1vbml0aW9uXCIpLmxlbmd0aCAhPT0gMDtcbn1cblxuZnVuY3Rpb24gaXNJRnJhbWUoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcblxuICAgIGlmKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50LmZpcnN0Q2hpbGQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpZnJhbWVcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gaXNIb3Jpem9udGFsUnVsZShlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTC5zdGFydHNXaXRoKFwiPGhyXCIpXG59XG5cbmZ1bmN0aW9uIGlzVGFibGUoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUwuc3RhcnRzV2l0aChcIjx0YWJsZVwiKVxufVxuXG5mdW5jdGlvbiBoYXNBZG1vbml0aW9uRm9sZChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjYWxsb3V0LWZvbGRcIikubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiBoYXNEYXRhdmlldyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXG4gICAgbGV0IGlzRGF0YXZpZXcgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJibG9jay1sYW5ndWFnZS1kYXRhdmlld1wiKS5sZW5ndGggIT09IDA7XG4gICAgcmV0dXJuIGlzRGF0YXZpZXc7XG59XG5cbmZ1bmN0aW9uIGhhc0RhdGF2aWV3SW5saW5lKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IGlzRGF0YXZpZXcgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkYXRhdmlldy1pbmxpbmUtcXVlcnlcIikubGVuZ3RoICE9PSAwO1xuICAgIHJldHVybiBpc0RhdGF2aWV3O1xufVxuXG5mdW5jdGlvbiBoYXNEYXRhdmlld0pTQ2FudmFzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG5cbiAgICBsZXQgaXNEYXRhdmlld0pTID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmxvY2stbGFuZ3VhZ2UtZGF0YXZpZXdqc1wiKS5sZW5ndGggIT09IDA7XG4gICAgbGV0IGNhbnZhcyA9IHNlYXJjaENoaWxkcmVuRm9yTm9kZVR5cGUoZWxlbWVudCwgXCJjYW52YXNcIik7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1lYW5zIG9ubHkgZGF0YXZpZXdKUyBjaGFydCBjYW52YXMgZWxlbWVudHMgc2hvdWxkIGJlIHJlbmRlcmVkIHByb3Blcmx5LiBPdGhlciBjYW52YXNlcyB3aWxsIFxuICAgICAqIG5lZWQgdGhpZXIgb3duIGNhc2UgcHV0IGluIG9yIHRoZSByZXN0cmljdGlvbiByZW1vdmVkIGFmdGVyIHRlc3RpbmcuXG4gICAgICovXG4gICAgcmV0dXJuIGNhbnZhcyAhPT0gbnVsbCAmJiBpc0RhdGF2aWV3SlMgXG59XG5cbmZ1bmN0aW9uIGhhc0RhdGF2aWV3SlMoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcblxuICAgIGxldCBpc0RhdGF2aWV3SlMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJibG9jay1sYW5ndWFnZS1kYXRhdmlld2pzXCIpLmxlbmd0aCAhPT0gMDtcbiAgICByZXR1cm4gaXNEYXRhdmlld0pTIFxufVxuXG5mdW5jdGlvbiBpc0ludGVybmFsRW1iZWQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBsZXQgaXNFbWJlZCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImludGVybmFsLWVtYmVkXCIpLmxlbmd0aCAhPT0gMDtcbiAgICByZXR1cm4gaXNFbWJlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBFbGVtZW50IHwgbnVsbCB7XG5cbiAgICBpZihlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBjaGlsZEVsZW1lbnRzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaGVhZGluZy1jb2xsYXBzZS1pbmRpY2F0b3JcIilcbiAgICBpZihjaGlsZEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gY2hpbGRFbGVtZW50c1swXTtcbiAgICB9XG4gICAgaWYoY2hpbGRFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJGb3VuZCBtdWx0aXBsZSBoZWFkaW5nIGNvbGxhcHNlIGluZGljYXRvcnMgaW4gZWxlbWVudC5cIilcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzQ3VzdG9tSUZyYW1lKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IGlzRnJhbWUgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjdXN0b20tZnJhbWVzLWZyYW1lXCIpLmxlbmd0aCAhPT0gMDtcbiAgICByZXR1cm4gaXNGcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnV0dG9uUGx1Z2luX0Nyb3NzQ29tcGF0aWJpbHR5KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG5cbiAgICBpZihlbGVtZW50Lmhhc0NsYXNzKFwiYmxvY2stbGFuZ3VhZ2UtYnV0dG9uXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBidXR0b25QbHVnaW5CbG9jayA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJsb2NrLWxhbmd1YWdlLWJ1dHRvblwiKVswXTtcbiAgICBpZihidXR0b25QbHVnaW5CbG9jaykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRW1iZWRlZEltYWdlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgXG4gICAgbGV0IGltZyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIilbMF07XG4gICAgaWYoaW1nID09PSBudWxsIHx8IFxuICAgICAgIGltZyA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0iLCIvKipcbiAqIEZpbGU6IC9zcmMvZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvUmVnaW9uTWFuYWdlci50cyAgICAgICAgICAgICAgICAgICAqXG4gKiBDcmVhdGVkIERhdGU6IFN1bmRheSwgTWF5IDIybmQgMjAyMiwgNzo0OSBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQXV0aG9yOiBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICovXG5cbmltcG9ydCB7IERPTU9iamVjdCwgRE9NT2JqZWN0VGFnLCBUYXNrTGlzdERPTU9iamVjdCB9IGZyb20gJy4uL2RvbU9iamVjdCc7XG5pbXBvcnQgeyBNdWx0aUNvbHVtblNldHRpbmdzLCBDb2x1bW5MYXlvdXQsIGdldERlZmF1bHRNdWx0aUNvbHVtblNldHRpbmdzLCBjb2x1bW5TcGFjaW5nU3RhdGUsIGdldEluZGV4ZWRDbGFtcGVkQXJyYXlWYWx1ZSwgaXNDb2x1bW5MYXlvdXQsIHZhbGlkYXRlQ29sdW1uTGF5b3V0IH0gZnJvbSBcIi4uLy4uL3JlZ2lvblNldHRpbmdzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtbkxheW91dENTUywgTXVsdGlDb2x1bW5TdHlsZUNTUyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9jc3NEZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBGaWxlRE9NTWFuYWdlciB9IGZyb20gJy4uL2RvbU1hbmFnZXInO1xuaW1wb3J0IHsgRWxlbWVudFJlbmRlclR5cGUsIGdldEVsZW1lbnRSZW5kZXJUeXBlIH0gZnJvbSAnc3JjL3V0aWxpdGllcy9lbGVtZW50UmVuZGVyVHlwZVBhcnNlcic7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyRGF0YSB9IGZyb20gJy4vcmVnaW9uTWFuYWdlckNvbnRhaW5lcic7XG5pbXBvcnQgeyBzZWFyY2hDaGlsZHJlbkZvck5vZGVUeXBlIH0gZnJvbSAnc3JjL3V0aWxpdGllcy91dGlscyc7XG5pbXBvcnQgeyBIVE1MU2l6aW5nIH0gZnJvbSAnc3JjL3V0aWxpdGllcy9pbnRlcmZhY2VzJztcblxuZXhwb3J0IHR5cGUgTXVsdGlDb2x1bW5SZW5kZXJEYXRhID0geyBcbiAgICBwYXJlbnRSZW5kZXJFbGVtZW50OiBIVE1MRWxlbWVudCwgXG4gICAgcGFyZW50UmVuZGVyU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MsXG4gICAgZG9tT2JqZWN0czogRE9NT2JqZWN0W11cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlZ2lvbk1hbmFnZXIge1xuXG4gICAgcHJvdGVjdGVkIGRvbUxpc3Q6IERPTU9iamVjdFtdID0gW107XG4gICAgcHVibGljIGdldCBudW1iZXJPZkNoaWxkcmVuKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvbUxpc3QubGVuZ3RoO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgZG9tT2JqZWN0TWFwOiBNYXA8c3RyaW5nLCBET01PYmplY3Q+ID0gbmV3IE1hcCgpO1xuICAgIHByaXZhdGUgX3JlZ2lvblBhcmVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHVibGljIGdldCByZWdpb25QYXJlbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVnaW9uUGFyZW50O1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHJlZ2lvblBhcmVudCh2YWx1ZTogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fcmVnaW9uUGFyZW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZpbGVNYW5hZ2VyOiBGaWxlRE9NTWFuYWdlcjtcbiAgICBwcm90ZWN0ZWQgcmVnaW9uYWxTZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncyA9IGdldERlZmF1bHRNdWx0aUNvbHVtblNldHRpbmdzKCk7XG5cbiAgICBwcm90ZWN0ZWQgcmVnaW9uS2V5OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBSZWdpb25NYW5hZ2VyRGF0YSkge1xuXG4gICAgICAgIHRoaXMuZG9tTGlzdCA9IGRhdGEuZG9tTGlzdDtcbiAgICAgICAgdGhpcy5kb21PYmplY3RNYXAgPSBkYXRhLmRvbU9iamVjdE1hcDtcbiAgICAgICAgdGhpcy5yZWdpb25QYXJlbnQgPSBkYXRhLnJlZ2lvblBhcmVudDtcblxuICAgICAgICB0aGlzLmZpbGVNYW5hZ2VyID0gZGF0YS5maWxlTWFuYWdlcjtcbiAgICAgICAgdGhpcy5yZWdpb25hbFNldHRpbmdzID0gZGF0YS5yZWdpb25hbFNldHRpbmdzO1xuXG4gICAgICAgIHRoaXMucmVnaW9uS2V5ID0gZGF0YS5yZWdpb25LZXk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlZ2lvbkRhdGEoKTogUmVnaW9uTWFuYWdlckRhdGEge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb21MaXN0OiB0aGlzLmRvbUxpc3QsXG4gICAgICAgICAgICBkb21PYmplY3RNYXA6IHRoaXMuZG9tT2JqZWN0TWFwLFxuICAgICAgICAgICAgcmVnaW9uUGFyZW50OiB0aGlzLnJlZ2lvblBhcmVudCxcblxuICAgICAgICAgICAgZmlsZU1hbmFnZXI6IHRoaXMuZmlsZU1hbmFnZXIsXG4gICAgICAgICAgICByZWdpb25hbFNldHRpbmdzOiB0aGlzLnJlZ2lvbmFsU2V0dGluZ3MsXG5cbiAgICAgICAgICAgIHJlZ2lvbktleTogdGhpcy5yZWdpb25LZXksXG4gICAgICAgICAgICByb290RWxlbWVudDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgb2JqZWN0IHRvIHRoZSByZWdpb24gYnkgZmluZGluZyB3aGVyZSBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gaXRzIHNpYmxpbmdzLlxuICAgICAqIEBwYXJhbSBzaWJsaW5nc0Fib3ZlIFRoZSBNYXJrZG93biB0ZXh0IHJlbmRlcmVkIGVsZW1lbnRzIGZvciBzaWJpbGluZ3MgYWJvdmUgdGhpcyBlbGVtZW50IGluIHRoZSBkb21cbiAgICAgKiBAcGFyYW0gc2libGluZ3NCZWxvdyBUaGUgTWFya2Rvd24gdGV4dCByZW5kZXJlZCBlbGVtZW50cyBmb3Igc2liaWxpbmdzIGJlbG93IHRoaXMgZWxlbWVudCBpbiB0aGUgZG9tXG4gICAgICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IHRvIGFkZC5cbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgb2JqZWN0IGhhcyBiZWVuIGFkZGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRPYmplY3Qoc2libGluZ3NBYm92ZTogSFRNTERpdkVsZW1lbnQsIHNpYmxpbmdzQmVsb3c6IEhUTUxEaXZFbGVtZW50LCBvYmo6IERPTU9iamVjdCk6IG51bWJlciB7XG5cbiAgICAgICAgbGV0IG5leHRPYmogPSBzaWJsaW5nc0JlbG93LmNoaWxkcmVuWzBdIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIGxldCBhZGRBdEluZGV4ID0gc2libGluZ3NBYm92ZS5jaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHNpYmxpbmdzQWJvdmUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdlIHdhbnQgdG8gZmluZCB0aGUgZmlyc3Qgc2libGluZyB3aXRob3V0aCBcIlwiIGZvciBhbiBpbm5lciB0ZXh0IHNvIHdlIGNhbiB1c2UgdGhhdCB0byBhbmNob3Igb3VyXG4gICAgICAgICAgICAgKiBlbGVtZW50IGludG8gdGhlIGRvbUxpc3QuIEZvciBtb3N0IGl0ZW1zIHRoZSBmaXJzdCBlbGVtZW50IGJlZm9yZSBvdXIgbmV3IGVsZW1lbnQgd2lsbCBoYXZlIHRoZSBwcm9wZXJcbiAgICAgICAgICAgICAqIGlubmVyVGV4dC4gU29tZXRpbWVzIG90aGVyIGVsZW1lbnRzIGFyZSBlbXB0eSBhbmQgd2VyZSBjYXVzaW5nIGlzc3Vlcy5cbiAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICogTm93IHdlIGxvb3AgYmFjayB0aHJvdWdoIHRoZSBwcmV2aW91cyBzaWJsaW5ncyBsb29raW5nIGZvciB0aGUgZmlyc3Qgb25lIHdpdGggYSB2YWxpZCBpbm5lciB0ZXh0IGFuZCB1c2luZyB0aGF0IFxuICAgICAgICAgICAgICogYXMgdGhlIGFuY2hvciBhbmQgb2Zmc2V0dGluZyBvdXIgYWRkQXRJbmRleCBieSB0aGUgbnVtYmVyIG9mIGVtcHR5IHN0cmluZyBlbGVtZW50cyB3ZSBmb3VuZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGV0IHByZXZTaWJsaW5nSW5uZXJUZXh0ID0gXCJcIlxuICAgICAgICAgICAgbGV0IHByZXZTaWJsaW5nT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IHNpYmxpbmdzQWJvdmUuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblxuICAgICAgICAgICAgICAgIGxldCBvYmogPSBzaWJsaW5nc0Fib3ZlLmNoaWxkcmVuW2ldIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmKG9iai5pbm5lclRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcHJldlNpYmxpbmdJbm5lclRleHQgPSBvYmouaW5uZXJUZXh0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcmV2U2libGluZ09mZnNldCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5kb21MaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tTGlzdFtpXS5ub2RlS2V5ID09PSBwcmV2U2libGluZ0lubmVyVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRBdEluZGV4ID0gaSArIDEgKyBwcmV2U2libGluZ09mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5leHRFbEluZGV4ID0gYWRkQXRJbmRleDtcbiAgICAgICAgbGV0IG5leHRPYmpUZXh0ID0gXCJcIjtcbiAgICAgICAgaWYgKG5leHRPYmogIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICBsZXQgZm91bmROZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICBuZXh0T2JqVGV4dCA9IG5leHRPYmouaW5uZXJUZXh0O1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gYWRkQXRJbmRleDsgaSA8IHRoaXMuZG9tTGlzdC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tTGlzdFtpXS5ub2RlS2V5ID09PSBuZXh0T2JqLmlubmVyVGV4dC50cmltKCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBuZXh0RWxJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kTmV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIFByZXY6IFwiLCBBcnJheS5mcm9tKHNpYmxpbmdzQWJvdmUuY2hpbGRyZW4pLnNsaWNlKC0zKSwgXCJBZGRpbmc6IFwiLCBvYmoub3JpZ2luYWxFbGVtZW50LCBcIiBOZXh0OiBcIiwgc2libGluZ3NCZWxvdy5jaGlsZHJlblswXSwgXCJPdmVyd3JpdGluZzpcIiwgdGhpcy5kb21MaXN0LnNsaWNlKGFkZEF0SW5kZXgsIG5leHRFbEluZGV4KSk7XG4gICAgICAgIHRoaXMuZG9tTGlzdC5zcGxpY2UoYWRkQXRJbmRleCwgbmV4dEVsSW5kZXggLSBhZGRBdEluZGV4LCBvYmopO1xuICAgICAgICB0aGlzLmRvbU9iamVjdE1hcC5zZXQob2JqLlVJRCwgb2JqKTtcblxuICAgICAgICAvLyAvKipcbiAgICAgICAgLy8gICogTWFrZSBhIGNvcHkgb2YgdGhlIGxpc3QgdG8gbG9nLCBvbmx5IGJlY2F1c2VcbiAgICAgICAgLy8gICogY29uc29sZSBsb2cgdXBkYXRlcyBpdHMgcmVmZXJlbmNlcyB3aXRoIHVwZGF0ZXMgaW4gbWVtb3J5LlxuICAgICAgICAvLyAgKi9cbiAgICAgICAgLy8gbGV0IHggPSB0aGlzLmRvbUxpc3Quc2xpY2UoMCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHgpO1xuICAgICAgICByZXR1cm4gYWRkQXRJbmRleDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkT2JqZWN0QXRJbmRleChvYmo6IERPTU9iamVjdCwgaW5kZXg6IG51bWJlcikge1xuXG4gICAgICAgIHRoaXMuZG9tTGlzdC5zcGxpY2UoaW5kZXgsIDAsIG9iaik7XG4gICAgICAgIHRoaXMuZG9tT2JqZWN0TWFwLnNldChvYmouVUlELCBvYmopO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVPYmplY3Qob2JqZWN0VUlEOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gLyoqXG4gICAgICAgIC8vICAqIE1ha2UgYSBjb3B5IG9mIHRoZSBsaXN0IHRvIGxvZ1xuICAgICAgICAvLyAgKi9cbiAgICAgICAgLy8gbGV0IHggPSBkb21MaXN0LnNsaWNlKDApO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh4KTtcbiAgICAgICAgLy8gR2V0IHRoZSBvYmplY3QgYnkga2V5LCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIGFuZCB0aGVuXG4gICAgICAgIC8vIGZyb20gdGhlIGxpc3QuXG4gICAgICAgIGxldCBvYmogPSB0aGlzLmRvbU9iamVjdE1hcC5nZXQob2JqZWN0VUlEKTtcbiAgICAgICAgdGhpcy5kb21PYmplY3RNYXAuZGVsZXRlKG9iamVjdFVJRCk7XG5cbiAgICAgICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kb21MaXN0LmNvbnRhaW5zKG9iaikpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tTGlzdC5yZW1vdmUob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRvbUxpc3QubGVuZ3RoID09PSAwICYmIHRoaXMuZmlsZU1hbmFnZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZU1hbmFnZXIucmVtb3ZlUmVnaW9uKHRoaXMucmVnaW9uS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHggPSBkb21MaXN0LnNsaWNlKDApO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlRWxlbWVudFRhZyhvYmplY3RVSUQ6IHN0cmluZywgbmV3VGFnOiBET01PYmplY3RUYWcpOiB2b2lkIHtcblxuICAgICAgICBsZXQgb2JqID0gdGhpcy5kb21PYmplY3RNYXAuZ2V0KG9iamVjdFVJRCk7XG4gICAgICAgIG9iai50YWcgPSBuZXdUYWc7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFJlZ2lvbmFsU2V0dGluZ3MocmVnaW9uU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZWdpb25hbFNldHRpbmdzID0gcmVnaW9uU2V0dGluZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIGZvciB0aGUgcmVnaW9uXG4gICAgICogdG8gYmUgcmVuZGVyZWQgdG8gdGhlIHByZXZpZXcgcGFuZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEgTXVsdGlDb2x1bW5SZW5kZXJEYXRhIG9iamVjdCB3aXRoIHRoZSByb290IERPTSBlbGVtZW50LCBzZXR0aW5ncyBvYmplY3QsIGFuZFxuICAgICAqIGFsbCBjaGlsZCBvYmplY3RzIGluIHRoZSBvcmRlciB0aGV5IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UmVnaW9uUmVuZGVyRGF0YSgpOiBNdWx0aUNvbHVtblJlbmRlckRhdGEge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXJlbnRSZW5kZXJFbGVtZW50OiB0aGlzLnJlZ2lvblBhcmVudCxcbiAgICAgICAgICAgIHBhcmVudFJlbmRlclNldHRpbmdzOiB0aGlzLnJlZ2lvbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICBkb21PYmplY3RzOiB0aGlzLmRvbUxpc3RcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1Y3Rpb24gaXMgY2FsbGVkIHdoZW4gYSBzdGFydCB0YWcgaXMgcmVtb3ZlZCBmcm9tIHZpZXcgbWVhbmluZ1xuICAgICAqIG91ciBwYXJlbnQgZWxlbWVudCBzdG9yaW5nIHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIGlzIHJlbW92ZWQuIEl0XG4gICAgICogcmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIGZyb20gYWxsIG9mIHRoZSBlbGVtZW50cyBzbyB0aGV5IHdpbGwgYmVcbiAgICAgKiByZS1yZW5kZXJlZCBpbiB0aGUgcHJldmlldyB3aW5kb3cuXG4gICAgICovXG4gICAgcHVibGljIGRpc3BsYXlPcmlnaW5hbEVsZW1lbnRzKCkge1xuXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRvbUxpc3QubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZG9tTGlzdFtpXS5vcmlnaW5hbEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUxpc3RbaV0ub3JpZ2luYWxFbGVtZW50LnJlbW92ZUNsYXNzZXMoW011bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uRW5kVGFnLFxuICAgICAgICAgICAgICAgIE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uRW5kVGFnLFxuICAgICAgICAgICAgICAgIE11bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgTXVsdGlDb2x1bW5TdHlsZUNTUy5SZWdpb25Db250ZW50XSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tTGlzdFtpXS5vcmlnaW5hbEVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbUxpc3RbaV0ub3JpZ2luYWxFbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5kb21MaXN0W2ldLm9yaWdpbmFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBnZXRJRCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpb25LZXk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZVJlbmRlcmVkTWFya2Rvd24oKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGFjdHMgYXMgdGhlIHVwZGF0ZSBsb29wIGZvciB0aGUgbXVsdGktY29sdW1uIHJlZ2lvbnMuXG4gICAgICAgICAqIEhlcmUgd2UgbG9vcCB0aHJvdWdoIGFsbCBvZiB0aGUgZWxlbWVudHMgd2l0aGluIHRoZSByZW5kZXJlZCByZWdpb24gYW5kXG4gICAgICAgICAqIHBvdGVudGlhbGx5IHVwZGF0ZSBob3cgdGhpbmdzIGFyZSByZW5kZXJlZC4gV2UgbmVlZCB0byBkbyB0aGlzIGZvclxuICAgICAgICAgKiBjb21wYXRhYmlsaXR5IHdpdGggb3RoZXIgcGx1Z2lucy5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIG11bHRpLWNvbHVtbiByZWdpb24gaXMgcmVuZGVyZWQgYmVmb3JlIG90aGVyIHBsdWdpbnMgdGhhdCBlZmZlY3RcbiAgICAgICAgICogY29udGVudCB3aXRoaW4gdGhlIHJlZ2lvbiBvdXIgcmVuZGVyZWQgZGF0YSBtYXkgbm90IHByb3Blcmx5IGRpc3BsYXlcbiAgICAgICAgICogdGhlIGNvbnRlbnQgZnJvbSB0aGUgb3RoZXIgcGx1Z2luLiBIZXJlIHdlIGxvb3AgdGhyb3VnaCB0aGUgZWxlbWVudHNcbiAgICAgICAgICogYWZ0ZXIgYWxsIHBsdWdpbnMgaGF2ZSBoYWQgYSBjaGFuY2UgdG8gcnVuIGFuZCBjYW4gbWFrZSBjaGFuZ2VzIHRvIHRoZVxuICAgICAgICAgKiBET00gYXQgdGhpcyBwb2ludC5cbiAgICAgICAgICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kb21MaXN0Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSGVyZSB3ZSBjaGVjayBmb3Igc3BlY2lhbCBjYXNlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodGhpcy5kb21MaXN0W2ldIGluc3RhbmNlb2YgVGFza0xpc3RET01PYmplY3QpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuZml4Q2xvbmVkQ2hlY2tMaXN0QnV0dG9ucyh0aGlzLmRvbUxpc3RbaV0gYXMgVGFza0xpc3RET01PYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVsZW1lbnRUeXBlID0gdGhpcy5kb21MaXN0W2ldLmVsZW1lbnRUeXBlO1xuXG4gICAgICAgICAgICBpZihlbGVtZW50VHlwZSA9PT0gXCJ1blJlbmRlcmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGUgZWxlbWVudCBpcyBub3QgY3VycmVudGx5IGEgc3BlY2lhbCByZW5kZXIgZWxlbWVudCB3ZSBjaGVjayBhZ2FpblxuICAgICAgICAgICAgICogYXMgdGhlIG9yaWdpbmFsIGVsZW1lbnQgbWF5IGhhdmUgYmVlbiB1cGRhdGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZihlbGVtZW50VHlwZSA9PT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICAgICAgICAgICAgZWxlbWVudFR5cGUgPT09IFwiYmFzaWNFbGVtZW50XCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcInNwZWNpYWxSZW5kZXJcIikge1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5ldyByZXN1bHQgcmV0dXJucyBhcyBhIHNwZWNpYWwgcmVuZGVyZXIgd2UgdXBkYXRlIHNvXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3b250IHJ1biBhZ2FpbiBmb3IgdGhpcyBpdGVtLlxuICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID0gZ2V0RWxlbWVudFJlbmRlclR5cGUodGhpcy5kb21MaXN0W2ldLm9yaWdpbmFsRWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGVsZW1lbnRUeXBlID09PSBcImJhc2ljRWxlbWVudFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb21MaXN0W2ldLmVsZW1lbnRUeXBlID0gXCJiYXNpY0VsZW1lbnRcIlxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihlbGVtZW50VHlwZSA9PT0gXCJpbWFnZUVtYmVkXCIpIHsvL0VsZW1lbnRSZW5kZXJUeXBlLmZpeGVkRWxlbWVudFJlbmRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9tTGlzdFtpXS5lbGVtZW50VHlwZSA9IGVsZW1lbnRUeXBlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihlbGVtZW50VHlwZSA9PT0gXCJidXR0b25QbHVnaW5cIikge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NCdXR0b25QbHVnaW5VcGRhdGUodGhpcy5kb21MaXN0W2ldKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihlbGVtZW50VHlwZSA9PT0gXCJkaWNlUm9sbGVyXCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcImFkbW9uaXRpb25Gb2xkXCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcImNhbGxvdXRDb3B5QnV0dG9uXCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcImRhdGF2aWV3UGx1Z2luXCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcImludGVybmFsRW1iZWRcIiB8fFxuICAgICAgICAgICAgICAgZWxlbWVudFR5cGUgPT09IFwiZGF0YXZpZXdKU0NhbnZhc0VtYmVkXCIgfHxcbiAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlID09PSBcImRhdGF2aWV3SlNFbWJlZFwiIHx8IFxuICAgICAgICAgICAgICAgZWxlbWVudFR5cGUgPT09IFwiZGF0YXZpZXdJbmxpbmVRdWVyeVwiXG4gICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUxpc3RbaV0uZWxlbWVudFR5cGUgPSBlbGVtZW50VHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFVwRHVhbFJlbmRlcih0aGlzLmRvbUxpc3RbaV0pO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0YWtlcyBpbiB0aGUgb3JpZ2luYWwgZWxlbWVudCBhbmQgaXRzIGNsb25lIGFuZCBjaGVja3MgaWZcbiAgICAgKiB0aGUgZWxlbWVudCBjb250YWlucyBhIHRhc2stbGlzdC1pdGVtIGNsYXNzLiBJZiBzbyBpdCBsb29wcyB0aHJvdWdoIGFsbFxuICAgICAqIGl0ZW1zIGluIHRoZSBsaXN0IGFuZCBmaXhlcyB0aGVpciBjaGVja2JveGVzIHRvIHByb3Blcmx5IGZpcmUgYW4gZXZlbnQuXG4gICAgICogVGhlIG5ldyBjaGVja2JveCBjYWxscyB0aGUgY2xpY2sgZnVuY3Rpb24gb24gdGhlIG9yaWdpbmFsIGNoZWNrYm94IHNvXG4gICAgICogY29tcGF0YWJpbGl0eSB3aXRoIG90aGVyIHBsdWdpbnMgKnNob3VsZCogcmVtYWluLlxuICAgICAqIEBwYXJhbSBkb21FbGVtZW50XG4gICAgICogQHBhcmFtIGluaXRhbGl6ZUNoZWNrYm94ZXNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZml4Q2xvbmVkQ2hlY2tMaXN0QnV0dG9ucyhkb21FbGVtZW50OiBUYXNrTGlzdERPTU9iamVjdCwgaW5pdGFsaXplQ2hlY2tib3hlczogYm9vbGVhbiA9IGZhbHNlKSB7XG5cbiAgICAgICAgaWYoZG9tRWxlbWVudC5vcmlnaW5hbEVsZW1lbnQgPT09IG51bGwgfHwgZG9tRWxlbWVudC5jbG9uZWRFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZWxlbWVudDogSFRNTEVsZW1lbnQgPSBkb21FbGVtZW50Lm9yaWdpbmFsRWxlbWVudDtcbiAgICAgICAgbGV0IGNsb25lZEVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gZG9tRWxlbWVudC5jbG9uZWRFbGVtZW50O1xuXG4gICAgICAgIGxldCBjbG9uZWRMaXN0Q2hlY2tib3hlcyA9IEFycmF5LmZyb20oY2xvbmVkRWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFzay1saXN0LWl0ZW1cIikpIGFzIEhUTUxFbGVtZW50W107XG4gICAgICAgIGxldCBvcmlnaW5hbExpc3RDaGVja2JveGVzID0gQXJyYXkuZnJvbShlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YXNrLWxpc3QtaXRlbVwiKSkgYXMgSFRNTEVsZW1lbnRbXTtcblxuICAgICAgICBpZiAoaW5pdGFsaXplQ2hlY2tib3hlcyA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBkb21FbGVtZW50Lm9yaWdpbmFsQ2hlY2tib3hlcyA9IG9yaWdpbmFsTGlzdENoZWNrYm94ZXM7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGluaXRhbGl6ZSB3ZSByZW1vdmUgdGhlIG9sZCBpbnB1dCBjaGVja2JveCB0aGF0IGNvbnRhaW5zXG4gICAgICAgICAgICAvLyB0aGUgd2VpcmQgY2FsbGJhY2sgc2l0dWF0aW9uIGNhdXNpbmcgdGhlIGJ1Zy4gVGhlbiB3ZSBjcmVhdGUgYSBuZXdcbiAgICAgICAgICAgIC8vIGNoZWNrYm94IHRvIHJlcGxhY2UgaXQgYW5kIHNldCBpdCB1cCB0byBmaXJlIHRoZSBjbGljayBldmVudCBvblxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIGNoZWNrYm94IHNvIGZ1bmN0aW9uYWxpdHkgaXMgcmVzdG9yZWQuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yaWdpbmFsTGlzdENoZWNrYm94ZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gY3JlYXRlRWwoJ2lucHV0Jyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxJbnB1dCA9IGRvbUVsZW1lbnQuZ2V0Q2hlY2tib3hFbGVtZW50KGkpO1xuICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBvcmlnaW5hbElucHV0Py5jaGVja2VkO1xuICAgICAgICAgICAgICAgIGNsb25lZExpc3RDaGVja2JveGVzW2ldLnJlcGxhY2VDaGlsZChjaGVja2JveCwgVGFza0xpc3RET01PYmplY3QuZ2V0Q2hpbGRDaGVja2JveChjbG9uZWRMaXN0Q2hlY2tib3hlc1tpXSkpO1xuXG4gICAgICAgICAgICAgICAgY2hlY2tib3guYWRkQ2xhc3MoJ3Rhc2stbGlzdC1pdGVtLWNoZWNrYm94Jyk7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgICAgICAgICAgY2hlY2tib3gub25DbGlja0V2ZW50KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5jaGVja2JveENsaWNrZWQoaSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIFdoZW5ldmVyIHdlIHJlYWNoIHRoaXMgcG9pbnQgd2UgdXBkYXRlIG91ciBsaXN0IG9mIG9yaWdpbmFsIGNoZWNrYm94ZXNcbiAgICAgICAgICAgIC8vIHRoYXQgbWF5IGJlIGRpZmZlcmVudCBmcm9tIG91ciBjYWNoZS4gVGhpcyBpcyBkdWUgdG8gaG93IG9ic2lkaWFuXG4gICAgICAgICAgICAvLyBjaGFuZ2VzIHRoZSBET00gdW5kZXJuZWF0aCB1cyBzbyB3ZSBuZWVkIHRvIGNvbnN0YW50bHkgdXBkYXRlIG91ciBjYWNoZS5cbiAgICAgICAgICAgIGRvbUVsZW1lbnQub3JpZ2luYWxDaGVja2JveGVzID0gb3JpZ2luYWxMaXN0Q2hlY2tib3hlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIFRhc2tzIHBsdWdpbiBpcyBpbnN0YWxsZWQgdGhlIGNsb25lZCBjb3B5IG9mIHRoZSBvcmlnaW5hbCBlbGVtZW50IGNvbnRhaW5zXG4gICAgICAgIC8vIGFuIGV4dHJhIGVsZW1lbnQgZm9yIHNvbWUgcmVhc29uLiBJZiB0aGlzIG9jY3VycyBmb3Igb3RoZXIgcmVhc29ucyBoZXJlIHdlIGFkanVzdFxuICAgICAgICAvLyB0aGF0IHRvIGtlZXAgdGhlIGNsb25lIHRoZSBzYW1lIGFzIHRoZSBvcmlnaW5hbC5cbiAgICAgICAgaWYgKGNsb25lZExpc3RDaGVja2JveGVzLmxlbmd0aCA+IG9yaWdpbmFsTGlzdENoZWNrYm94ZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBvcmlnaW5hbExpc3RDaGVja2JveGVzLmxlbmd0aDsgaSA8IGNsb25lZExpc3RDaGVja2JveGVzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LmNsb25lZEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2xvbmVkTGlzdENoZWNrYm94ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHNldFVwRHVhbFJlbmRlcihkb21FbGVtZW50OiBET01PYmplY3QpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgb3VyIGVsZW1lbnQgaXMgb2YgXCJzcGVjaWFsUmVuZGVyXCIgdHlwZSBpdCAqbWF5KiBuZWVkIHRvIGJlIHJlbmRlcmVkXG4gICAgICAgICAqIHVzaW5nIHRoZSBvcmlnaW5hbCBlbGVtZW50IHJhdGhlciB0aGFuIGEgY29weS4gRm9yIGV4YW1wbGUsIGFuIGVsZW1lbnRcbiAgICAgICAgICogbWF5IGhhdmUgYW4gb25DbGljayBldmVudCB0aGF0IHdvdWxkIG5vdCBnZXQgY29wcGllZCB0byB0aGUgY2xvbmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHdlIGp1c3QgbW92ZWQgdGhlc2UgZWxlbWVudHMgaW50byB0aGUgcmVnaW9uIGl0IHdvdWxkIGdldFxuICAgICAgICAgKiBtb3ZlZCBiYWNrIG91dCBpbnRvIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBpbiB0aGUgRE9NIGJ5IG9ic2lkaWFuXG4gICAgICAgICAqIHdoZW4gc2Nyb2xsaW5nIG9yIHdoZW4gdGhlIGZpbGUgaXMgdXBkYXRlZC4gT24gdGhlIG5leHQgcmVmcmVzaCBpdFxuICAgICAgICAgKiB3b3VsZCBiZSBtb3ZlZCBiYWNrIGJ1dCB0aGF0IGNhbiBsZWFkIHRvIGEgcmVnaW9uIGp1bXBpbmdcbiAgICAgICAgICogYXJvdW5kIGFzIHRoZSBpdGVtIGlzIG1vdmVkIGluIGFuZCBvdXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEhlcmUgd2Ugc2V0IHVwIHRoZSBkaXYgdG8gY29udGFpbiB0aGUgZWxlbWVudCBhbmQgY3JlYXRlXG4gICAgICAgICAqIGEgdmlzdWFsIG9ubHkgY2xvbmUgb2YgaXQuIFRoZSBjbG9uZSB3aWxsIG9ubHkgYmUgdmlzaWJsZVxuICAgICAgICAgKiB3aGVuIHRoZSBvcmlnaW5hbCBpcyBub3QgaW4gdGhlIG11bHRpLWNvbHVtbiByZWdpb24gc28gaXRcbiAgICAgICAgICogc2F2ZXMgdXMgZnJvbSB0aGUgdmlzdWFsIG5vaXNlIG9mIHRoZSByZWdpb24ganVtcGluZyBhcm91bmQuXG4gICAgICAgICAqL1xuXG4gICAgICAgICBsZXQgb3JpZ2luYWxFbGVtZW50ID0gZG9tRWxlbWVudC5vcmlnaW5hbEVsZW1lbnQ7XG4gICAgICAgICBsZXQgY2xvbmVkRWxlbWVudCA9IGRvbUVsZW1lbnQuY2xvbmVkRWxlbWVudDtcbiAgICAgICAgIGxldCBjb250YWluZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCA9IGRvbUVsZW1lbnQuZWxlbWVudENvbnRhaW5lcjtcblxuICAgICAgICAvLyBHZXQgaGVpZ2h0IG9mIHRoZSBvcmlnaW5hbCBhbmQgY2xvbmVkIGVsZW1lbnQuIElmIHRoZSBlbGVtZW50IGlzIG5vdCBjdXJyZW50bHkgcmVuZGVyZWRcbiAgICAgICAgLy8gaXQgd2lsbCBoYXZlIDAgaGVpZ2h0IHNvIHdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgcmVuZGVyIGl0IHRvIGdldCB0aGUgaGVpZ2h0LlxuICAgICAgICBsZXQgb3JpZ2luYWxFbGVtZW50SGVpZ2h0ID0gZ2V0RWxlbWVudENsaWVudEhlaWdodChvcmlnaW5hbEVsZW1lbnQsIGNvbnRhaW5lckVsZW1lbnQpO1xuICAgICAgICBsZXQgY2xvbmVkRWxlbWVudEhlaWdodCA9IGdldEVsZW1lbnRDbGllbnRIZWlnaHQoY2xvbmVkRWxlbWVudCwgY29udGFpbmVyRWxlbWVudCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIG9ubHkgd2FudCB0byBjbG9uZSB0aGUgZWxlbWVudCBvbmNlIHRvIHJlZHVjZSBHQy4gQnV0IGlmIHRoZSBjbG9uZWQgXG4gICAgICAgICAqIGVsZW1lbnQncyBoZWlnaHQgaXMgbm90IGVxdWFsIHRvIHRoZSBvcmlnaW5hbCBlbGVtZW50LCB0aGlzIG1lYW5zIHRoZVxuICAgICAgICAgKiBpdGVtIGVsZW1lbnQgaGFzIGJlZW4gdXBkYXRlZCBzb21ld2hlcmUgZWxzZSB3aXRob3V0IHRoZSBkb20gYmVpbmcgXG4gICAgICAgICAqIHJlZnJlc2hlZC4gVGhpcyBjYW4gb2NjdXIgd2hlbiBlbGVtZW50cyBhcmUgdXBkYXRlZCBieSBvdGhlciBwbHVnaW5zLCBcbiAgICAgICAgICogc3VjaCBhcyBEYXRhdmlldy5cbiAgICAgICAgICovXG4gICAgICAgIGlmKChjbG9uZWRFbGVtZW50ID09PSBudWxsICB8fCBcbiAgICAgICAgICAgTWF0aC5hYnMoY2xvbmVkRWxlbWVudEhlaWdodCAtIG9yaWdpbmFsRWxlbWVudEhlaWdodCkgPiAxMCB8fFxuICAgICAgICAgICBkb21FbGVtZW50LmNsb25lZEVsZW1lbnRSZWFkeUZvclVwZGF0ZSgpID09PSB0cnVlKSAmJlxuICAgICAgICAgICBkb21FbGVtZW50LmVsZW1lbnRUeXBlICE9PSBcImRhdGF2aWV3SlNDYW52YXNFbWJlZFwiKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgQ2xvbmVkIEVsZW1lbnQuXCIsIEVsZW1lbnRSZW5kZXJUeXBlW2RvbUVsZW1lbnQuZWxlbWVudFR5cGVdLCBjbG9uZWRFbGVtZW50SGVpZ2h0LCBvcmlnaW5hbEVsZW1lbnRIZWlnaHQpXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2xvbmUgYW5kIHJlZmVyZW5jZS5cbiAgICAgICAgICAgIGNsb25lRWxlbWVudChkb21FbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRvbUVsZW1lbnQuZWxlbWVudFR5cGUgPT09IFwiZGF0YXZpZXdKU0NhbnZhc0VtYmVkXCIgJiYgXG4gICAgICAgICAgIGRvbUVsZW1lbnQuY2FudmFzUmVhZHlGb3JVcGRhdGUoKSkge1xuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVwZGF0aW5nIGNhbnZhcyByZS1yZW5kZXJcIilcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQob3JpZ2luYWxFbGVtZW50KTtcbiAgICAgICAgICAgIGlmKGNsb25lZEVsZW1lbnQgIT09IG51bGwgJiYgY2xvbmVkRWxlbWVudC5wYXJlbnRFbGVtZW50ID09PSBjb250YWluZXJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZChjbG9uZWRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVDYW52YXMob3JpZ2luYWxDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KTogSFRNTENhbnZhc0VsZW1lbnQge1xuXG4gICAgICAgICAgICAgICAgLy9jcmVhdGUgYSBuZXcgY2FudmFzXG4gICAgICAgICAgICAgICAgbGV0IGNsb25lZENhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBvcmlnaW5hbENhbnZhcy5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IGNsb25lZENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9zZXQgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgIGNsb25lZENhbnZhcy53aWR0aCA9IG9yaWdpbmFsQ2FudmFzLndpZHRoO1xuICAgICAgICAgICAgICAgIGNsb25lZENhbnZhcy5oZWlnaHQgPSBvcmlnaW5hbENhbnZhcy5oZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBpZihjbG9uZWRDYW52YXMud2lkdGggPT09IDAgfHwgY2xvbmVkQ2FudmFzLmhlaWdodCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbnQgd2FudCB0byByZW5kZXIgaWYgdGhlIHdpZHRoIGlzIDAgYXMgaXQgdGhyb3dzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIC8vIHdvdWxkIGhhcHBlbiBpZiB0aGUgb2xkIGNhbnZhcyBoYXNudCBiZWVuIHJlbmRlcmVkIHlldC5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lZENhbnZhcztcbiAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgLy9hcHBseSB0aGUgb2xkIGNhbnZhcyB0byB0aGUgbmV3IG9uZVxuICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKG9yaWdpbmFsQ2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vcmV0dXJuIHRoZSBuZXcgY2FudmFzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lZENhbnZhcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNhbnZhcyA9IHNlYXJjaENoaWxkcmVuRm9yTm9kZVR5cGUob3JpZ2luYWxFbGVtZW50LCBcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIGlmKGNhbnZhcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQudXBkYXRlQ2xvbmVkRWxlbWVudChvcmlnaW5hbEVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxEaXZFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBjbG9uZWRFbGVtZW50ID0gZG9tRWxlbWVudC5jbG9uZWRFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ2xvbmVkRWxlbWVudFR5cGUpO1xuICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQucmVtb3ZlQ2xhc3NlcyhbTXVsdGlDb2x1bW5TdHlsZUNTUy5SZWdpb25Db250ZW50LCBNdWx0aUNvbHVtbkxheW91dENTUy5PcmlnaW5hbEVsZW1lbnRUeXBlXSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZWRFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjbG9uZWRFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQuY2hpbGRyZW5baV0uZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvbmVDYW52YXMoY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50KSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5yZW1vdmVDaGlsZChvcmlnaW5hbEVsZW1lbnQpO1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChjbG9uZWRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLyoqIFxuICAgICAgICAgKiBJZiB0aGUgY29udGFpbmVyIGVsZW1lbnQgaGFzIGxlc3MgdGhhbiAyIGNoaWxkcmVuIHdlIG5lZWQgdG8gbW92ZSB0aGVcbiAgICAgICAgICogb3JpZ2luYWwgZWxlbWVudCBiYWNrIGludG8gaXQuIEhvd2V2ZXIgc29tZSBlbGVtZW50cyBjb25zdGFudGx5IGdldCBtb3ZlZFxuICAgICAgICAgKiBpbiBhbmQgb3V0IGNhdXNpbmcgc29tZSB1bndhbnRlZCBiZWhhdmlvci4gVGhvc2UgZWxlbWVudCB3aWxsIGJlIHRhZ2dlZFxuICAgICAgICAgKiBhcyBzcGVjaWFsU2luZ2xlRWxlbWVudFJlbmRlciBzbyB3ZSBpZ25vcmUgdGhvc2UgZWxlbWVudHMgaGVyZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmKGRvbUVsZW1lbnQuZWxlbWVudENvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggPCAyICYmIFxuICAgICAgICAgICBkb21FbGVtZW50LmVsZW1lbnRUeXBlICE9PSBcImRhdGF2aWV3UGx1Z2luXCIgJiZcbiAgICAgICAgICAgZG9tRWxlbWVudC5lbGVtZW50VHlwZSAhPT0gXCJpbnRlcm5hbEVtYmVkXCIgJiZcbiAgICAgICAgICAgZG9tRWxlbWVudC5lbGVtZW50VHlwZSAhPT0gXCJkYXRhdmlld0pTQ2FudmFzRW1iZWRcIiAmJlxuICAgICAgICAgICBkb21FbGVtZW50LmVsZW1lbnRUeXBlICE9PSBcImRhdGF2aWV3SlNFbWJlZFwiKSB7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgZHVhbCByZW5kZXJpbmcuXCIsIGRvbUVsZW1lbnQsIGRvbUVsZW1lbnQub3JpZ2luYWxFbGVtZW50LnBhcmVudEVsZW1lbnQsIGRvbUVsZW1lbnQub3JpZ2luYWxFbGVtZW50LnBhcmVudEVsZW1lbnQ/LmNoaWxkRWxlbWVudENvdW50KTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG91ciBDU1MgaXMgdXAgdG8gZGF0ZS5cbiAgICAgICAgICAgIG9yaWdpbmFsRWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5PcmlnaW5hbEVsZW1lbnRUeXBlKTtcbiAgICAgICAgICAgIGNsb25lZEVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ2xvbmVkRWxlbWVudFR5cGUpO1xuICAgICAgICAgICAgY2xvbmVkRWxlbWVudC5yZW1vdmVDbGFzc2VzKFtNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvbkNvbnRlbnQsIE11bHRpQ29sdW1uTGF5b3V0Q1NTLk9yaWdpbmFsRWxlbWVudFR5cGVdKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb250YWluZXJFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5jaGlsZHJlbltpXS5kZXRhY2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQob3JpZ2luYWxFbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvbmVkRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSBDU1MgY2xhc3NlcyBhbmQgdGhlIG51bWJlciBvZiBjb2x1bW5zIGJhc2VkIG9uIHRoZSBwYXNzZWQgc2V0dGluZ3MuXG4gICAgICogQHBhcmFtIHNldHRpbmdzIFRoZSB1c2VyIGRlZmluZWQgc2V0dGluZ3MgdGhhdCBkZXRlcm1pbmUgd2hhdCBDU1MgaXMgc2V0IGhlcmUuXG4gICAgICogQHBhcmFtIG11bHRpQ29sdW1uUGFyZW50IFRoZSBwYXJlbnQgb2JqZWN0IHRoYXQgdGhlIGNvbHVtbiBkaXZzIHdpbGwgYmUgY3JlYXRlZCB1bmRlci5cbiAgICAgKiBAcmV0dXJucyBUaGUgbGlzdCBvZiBjb2x1bW4gZGl2cyBjcmVhdGVkIHVuZGVyIHRoZSBwYXNzZWQgcGFyZW50IGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0Q29sdW1uQ29udGVudERpdnMoc2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MsIG11bHRpQ29sdW1uUGFyZW50OiBIVE1MRGl2RWxlbWVudCk6IEhUTUxEaXZFbGVtZW50W10ge1xuXG4gICAgICAgIGxldCBjb2x1bW5Db250ZW50RGl2czogSFRNTERpdkVsZW1lbnRbXSA9IFtdXG4gICAgICAgIFxuICAgICAgICBpZih0eXBlb2Ygc2V0dGluZ3MuY29sdW1uU2l6ZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICBpc0NvbHVtbkxheW91dChzZXR0aW5ncy5jb2x1bW5TaXplKSAgICAgJiYgXG4gICAgICAgICAgIChzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgPT09IDIgfHwgc2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zID09PSAzKSkgeyAgICAgIFxuXG4gICAgICAgICAgICBzZXR0aW5ncy5jb2x1bW5TaXplID0gdmFsaWRhdGVDb2x1bW5MYXlvdXQoc2V0dGluZ3MuY29sdW1uU2l6ZSlcbiAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LnJlbW92ZUNsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0F1dG9TY3JvbGxfWCk7XG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWCk7XG5cbiAgICAgICAgICAgIGJ1aWxkU3RhbmRhcmRMYXlvdXRzKHNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudCwgY29sdW1uQ29udGVudERpdnMpXG4gICAgICAgICAgICBzZXRNYXhDb2x1bW5IZWlnaHQoKTtcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5Db250ZW50RGl2cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHR5cGVvZiBzZXR0aW5ncy5jb2x1bW5TaXplID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgIGlzQ29sdW1uTGF5b3V0KHNldHRpbmdzLmNvbHVtblNpemUpICAgICAmJiBcbiAgICAgICAgICAgc2V0dGluZ3MuY29sdW1uU2l6ZSA9PT0gXCJzdGFuZGFyZFwiICYmIFxuICAgICAgICAgICBzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgPiAzICl7XG5cbiAgICAgICAgICAgIHNldHRpbmdzLmNvbHVtblNpemUgPSB2YWxpZGF0ZUNvbHVtbkxheW91dChzZXR0aW5ncy5jb2x1bW5TaXplKTtcbiAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LnJlbW92ZUNsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0F1dG9TY3JvbGxfWCk7XG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWCk7XG5cbiAgICAgICAgICAgIGJ1aWxkRXF1YWxMYXlvdXQoc2V0dGluZ3MsIG11bHRpQ29sdW1uUGFyZW50LCBjb2x1bW5Db250ZW50RGl2cyk7XG5cbiAgICAgICAgICAgIHNldE1heENvbHVtbkhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbHVtbkNvbnRlbnREaXZzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgY29sdW1uU2l6ZXM6IEhUTUxTaXppbmdbXSA9IFtdO1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBoYXMgZGVmaW5lZCB0aGUgd2lkdGhzIGluZGl2aWR1YWxseSB0aGVuIHdlIGp1c3QgbmVlZCB0byBjcmVhdGVcbiAgICAgICAgLy8gZWFjaCBjb2x1bW4gaW5kaXZpZHVhbGx5IHdpdGggZWFjaCB3aWR0aCBzaXplLlxuICAgICAgICBpZihBcnJheS5pc0FycmF5KHNldHRpbmdzLmNvbHVtblNpemUpKSB7XG4gICAgICAgICAgICBjb2x1bW5TaXplcyA9IHNldHRpbmdzLmNvbHVtblNpemUuc2xpY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGNDb2x1bW5TaXplcyhzZXR0aW5ncywgY29sdW1uU2l6ZXMpXG4gICAgICAgIH1cblxuICAgICAgICBpZihjb2x1bW5TaXplcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbHVtblNpemVzLnB1c2goSFRNTFNpemluZy5jcmVhdGUoKS5zZXRXaWR0aCg1MCkuc2V0VW5pdHMoXCIlXCIpKVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNldHRpbmdzLm51bWJlck9mQ29sdW1uczsgaSsrKSB7XG5cbiAgICAgICAgICAgIGxldCBzaXppbmcgPSBnZXRJbmRleGVkQ2xhbXBlZEFycmF5VmFsdWUoaSwgY29sdW1uU2l6ZXMpO1xuXG4gICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9YCxcbiAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBgd2lkdGg6ICR7c2l6aW5nLnRvU3RyaW5nKCl9YH1cbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgaWYoaSAhPT0gc2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zIC0gMSkge1xuICAgICAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYG1jbS1jb2x1bW4tc3BhY2VyYCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1wic3R5bGVcIjogY29sdW1uU3BhY2luZ1N0YXRlKDAsIHNldHRpbmdzKX1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb2x1bW5Db250ZW50RGl2cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2c1tpXS5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Ob0ZsZXhTaHJpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0TWF4Q29sdW1uSGVpZ2h0KCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbHVtbkNvbnRlbnREaXZzO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldE1heENvbHVtbkhlaWdodCgpIHtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jb2x1bW5IZWlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5yZW1vdmVDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93QXV0b1Njcm9sbF9ZKTtcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5mb3JFYWNoKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnN0eWxlLmhlaWdodCA9IHNldHRpbmdzLmNvbHVtbkhlaWdodC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uc3R5bGUubWF4SGVpZ2h0ID0gc2V0dGluZ3MuY29sdW1uSGVpZ2h0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zdHlsZS5taW5IZWlnaHQgPSBzZXR0aW5ncy5jb2x1bW5IZWlnaHQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCByZW5kZXJSZWdpb25FbGVtZW50c1RvU2NyZWVuKCk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IGV4cG9ydFJlZ2lvbkVsZW1lbnRzVG9QREYocGRmUGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZW5kZXJSZWdpb25FbGVtZW50c1RvTGl2ZVByZXZpZXcocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkXG59XG5cbmZ1bmN0aW9uIGNhbGNDb2x1bW5TaXplcyhzZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncywgY29sdW1uU2l6ZXM6IEhUTUxTaXppbmdbXSkge1xuICAgIGxldCBsYXlvdXQgPSBzZXR0aW5ncy5jb2x1bW5TaXplIGFzIENvbHVtbkxheW91dDtcblxuICAgIGlmKHNldHRpbmdzLm51bWJlck9mQ29sdW1ucyA9PT0gMikge1xuICAgICAgICBzd2l0Y2gobGF5b3V0KSB7XG4gICAgICAgICAgICBjYXNlKFwic3RhbmRhcmRcIik6XG4gICAgICAgICAgICBjYXNlKFwibWlkZGxlXCIpOlxuICAgICAgICAgICAgY2FzZShcImNlbnRlclwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJ0aGlyZFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoNTApLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoNTApLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZShcImxlZnRcIik6XG4gICAgICAgICAgICBjYXNlKFwiZmlyc3RcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDc1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDI1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UoXCJyaWdodFwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJzZWNvbmRcIik6XG4gICAgICAgICAgICBjYXNlKFwibGFzdFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMjUpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoNzUpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoc2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zID09PSAzKSB7XG4gICAgICAgIHN3aXRjaChsYXlvdXQpIHtcbiAgICAgICAgICAgIGNhc2UoXCJzdGFuZGFyZFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMzMpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMzMpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMzMpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZShcImxlZnRcIik6XG4gICAgICAgICAgICBjYXNlKFwiZmlyc3RcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDUwKS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDI1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDI1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UoXCJtaWRkbGVcIik6XG4gICAgICAgICAgICBjYXNlKFwiY2VudGVyXCIpOlxuICAgICAgICAgICAgY2FzZShcInNlY29uZFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMjUpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoNTApLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBjb2x1bW5TaXplcy5wdXNoKEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoMjUpLnNldFVuaXRzKFwiJVwiKSlcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZShcInJpZ2h0XCIpOlxuICAgICAgICAgICAgY2FzZShcInRoaXJkXCIpOlxuICAgICAgICAgICAgY2FzZShcImxhc3RcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDI1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDI1KS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaChIVE1MU2l6aW5nLmNyZWF0ZSgpLnNldFdpZHRoKDUwKS5zZXRVbml0cyhcIiVcIikpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRDbGllbnRIZWlnaHQoZWxlbWVudDogSFRNTEVsZW1lbnQsIHBhcmVudFJlbmRlckVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KTogbnVtYmVyIHtcblxuICAgIGxldCBoZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICBpZihoZWlnaHQgPT09IDApIHtcbiAgICAgICAgcGFyZW50UmVuZGVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgcGFyZW50UmVuZGVyRWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGhlaWdodFxufVxuXG5mdW5jdGlvbiBidWlsZEVxdWFsTGF5b3V0KHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudDogSFRNTERpdkVsZW1lbnQsIGNvbHVtbkNvbnRlbnREaXZzOiBIVE1MRGl2RWxlbWVudFtdKSB7XG5cbiAgICBsZXQgcGVyY2VudCA9IE1hdGguY2VpbCgxMDAgLyBzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMpO1xuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNldHRpbmdzLm51bWJlck9mQ29sdW1uczsgaSsrKSB7XG4gICAgICAgIFxuICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH1gLFxuICAgICAgICAgICAgYXR0cjoge1wic3R5bGVcIjogYHdpZHRoOiAke3BlcmNlbnR9JWB9XG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZihpICE9PSBzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgLSAxKSB7XG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgIGNsczogYG1jbS1jb2x1bW4tc3BhY2VyYCxcbiAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMCwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkU3RhbmRhcmRMYXlvdXRzKHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudDogSFRNTERpdkVsZW1lbnQsIGNvbHVtbkNvbnRlbnREaXZzOiBIVE1MRGl2RWxlbWVudFtdKSB7XG5cbiAgICBsZXQgbGF5b3V0ID0gc2V0dGluZ3MuY29sdW1uU2l6ZSBhcyBDb2x1bW5MYXlvdXQ7XG5cbiAgICBpZihzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgPT09IDIpIHtcbiAgICAgICAgc3dpdGNoKGxheW91dCkge1xuICAgICAgICAgICAgY2FzZShcInN0YW5kYXJkXCIpOlxuICAgICAgICAgICAgY2FzZShcIm1pZGRsZVwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJjZW50ZXJcIik6XG4gICAgICAgICAgICBjYXNlKFwidGhpcmRcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5Ud29FcXVhbENvbHVtbnN9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGBtY20tY29sdW1uLXNwYWNlcmAsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcInN0eWxlXCI6IGNvbHVtblNwYWNpbmdTdGF0ZSgwLCBzZXR0aW5ncyl9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5Ud29FcXVhbENvbHVtbnN9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZShcImxlZnRcIik6XG4gICAgICAgICAgICBjYXNlKFwiZmlyc3RcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5Ud29Db2x1bW5MYXJnZX1gXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYG1jbS1jb2x1bW4tc3BhY2VyYCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1wic3R5bGVcIjogY29sdW1uU3BhY2luZ1N0YXRlKDAsIHNldHRpbmdzKX1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlR3b0NvbHVtblNtYWxsfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UoXCJyaWdodFwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJzZWNvbmRcIik6XG4gICAgICAgICAgICBjYXNlKFwibGFzdFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlR3b0NvbHVtblNtYWxsfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgbWNtLWNvbHVtbi1zcGFjZXJgLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMCwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzLnB1c2gobXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9ICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuVHdvQ29sdW1uTGFyZ2V9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoc2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zID09PSAzKSB7XG4gICAgICAgIHN3aXRjaChsYXlvdXQpIHtcbiAgICAgICAgICAgIGNhc2UoXCJzdGFuZGFyZFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlRocmVlRXF1YWxDb2x1bW5zfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgbWNtLWNvbHVtbi1zcGFjZXJgLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMCwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzLnB1c2gobXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9ICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuVGhyZWVFcXVhbENvbHVtbnN9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGBtY20tY29sdW1uLXNwYWNlcmAsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcInN0eWxlXCI6IGNvbHVtblNwYWNpbmdTdGF0ZSgxLCBzZXR0aW5ncyl9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5UaHJlZUVxdWFsQ29sdW1uc31gXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlKFwibGVmdFwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJmaXJzdFwiKTpcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlRocmVlQ29sdW1uX0xhcmdlfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgbWNtLWNvbHVtbi1zcGFjZXJgLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMCwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzLnB1c2gobXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9ICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuVGhyZWVDb2x1bW5fU21hbGx9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGBtY20tY29sdW1uLXNwYWNlcmAsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcInN0eWxlXCI6IGNvbHVtblNwYWNpbmdTdGF0ZSgxLCBzZXR0aW5ncyl9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5UaHJlZUNvbHVtbl9TbWFsbH1gXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlKFwibWlkZGxlXCIpOlxuICAgICAgICAgICAgY2FzZShcImNlbnRlclwiKTpcbiAgICAgICAgICAgIGNhc2UoXCJzZWNvbmRcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5UaHJlZUNvbHVtbl9TbWFsbH1gXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYG1jbS1jb2x1bW4tc3BhY2VyYCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1wic3R5bGVcIjogY29sdW1uU3BhY2luZ1N0YXRlKDAsIHNldHRpbmdzKX1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlRocmVlQ29sdW1uX0xhcmdlfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgbWNtLWNvbHVtbi1zcGFjZXJgLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMSwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzLnB1c2gobXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9ICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuVGhyZWVDb2x1bW5fU21hbGx9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZShcInJpZ2h0XCIpOlxuICAgICAgICAgICAgY2FzZShcInRoaXJkXCIpOlxuICAgICAgICAgICAgY2FzZShcImxhc3RcIik6XG4gICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnMucHVzaChtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQ29udGVudH0gJHtNdWx0aUNvbHVtbkxheW91dENTUy5UaHJlZUNvbHVtbl9TbWFsbH1gXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYG1jbS1jb2x1bW4tc3BhY2VyYCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1wic3R5bGVcIjogY29sdW1uU3BhY2luZ1N0YXRlKDAsIHNldHRpbmdzKX1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2cy5wdXNoKG11bHRpQ29sdW1uUGFyZW50LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Db250ZW50fSAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlRocmVlQ29sdW1uX1NtYWxsfWBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgbWNtLWNvbHVtbi1zcGFjZXJgLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XCJzdHlsZVwiOiBjb2x1bW5TcGFjaW5nU3RhdGUoMSwgc2V0dGluZ3MpfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzLnB1c2gobXVsdGlDb2x1bW5QYXJlbnQuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9ICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuVGhyZWVDb2x1bW5fTGFyZ2V9YFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZml4T25DbGljayhkb21FbGVtZW50OiBET01PYmplY3QpIHtcblxuICAgIGxldCBvcmlnaW5hbEVsZW1lbnQgPSBkb21FbGVtZW50Lm9yaWdpbmFsRWxlbWVudDtcbiAgICBsZXQgY2xvbmVkRWxlbWVudCA9IGRvbUVsZW1lbnQuY2xvbmVkRWxlbWVudDtcblxuICAgIGxldCBvcmlnaW5hbEJ1dHRvbiA9IG9yaWdpbmFsRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJ1dHRvblwiKVswXTtcbiAgICBsZXQgY2xvbmVkQnV0dG9uID0gY2xvbmVkRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJ1dHRvblwiKVswXTtcblxuICAgIGlmKG9yaWdpbmFsQnV0dG9uID09PSB1bmRlZmluZWQgfHwgY2xvbmVkQnV0dG9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNsb25lZEJ1dHRvbi5vbkNsaWNrRXZlbnQoKGV2KSA9PiB7XG5cbiAgICAgICAgb3JpZ2luYWxCdXR0b24uY2xpY2soKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoZG9tRWxlbWVudDogRE9NT2JqZWN0KSB7XG5cbiAgICBsZXQgb3JpZ2luYWxFbGVtZW50ID0gZG9tRWxlbWVudC5vcmlnaW5hbEVsZW1lbnQ7XG4gICAgbGV0IGNsb25lZEVsZW1lbnQgPSBkb21FbGVtZW50LmNsb25lZEVsZW1lbnQ7XG4gICAgbGV0IGNvbnRhaW5lckVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50ID0gZG9tRWxlbWVudC5lbGVtZW50Q29udGFpbmVyO1xuXG4gICAgZG9tRWxlbWVudC51cGRhdGVDbG9uZWRFbGVtZW50KG9yaWdpbmFsRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTERpdkVsZW1lbnQpO1xuICAgIGNsb25lZEVsZW1lbnQgPSBkb21FbGVtZW50LmNsb25lZEVsZW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB3ZSB1cGRhdGVkIHRoZSBjbG9uZWQgZWxlbWVudCwgd2Ugd2FudCB0byBhbHNvIHVwZGF0ZSB0aGVcbiAgICAgKiBlbGVtZW50IHJlbmRlcmVkIGluIHRoZSBwYXJlbnQgY29udGFpbmVyLlxuICAgICAqL1xuICAgIGZvciAobGV0IGkgPSBjb250YWluZXJFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnRhaW5lckVsZW1lbnQuY2hpbGRyZW5baV0uZGV0YWNoKCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIENTUywgd2UgYWRkIGNsb25lZCBjbGFzcyBhbmQgcmVtb3ZlIGNsYXNzZXMgZnJvbSBvcmlnaW5hbEVsZW1lbnQgdGhhdCBkbyBub3QgYXBwbHkuXG4gICAgY2xvbmVkRWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5DbG9uZWRFbGVtZW50VHlwZSk7XG4gICAgY2xvbmVkRWxlbWVudC5yZW1vdmVDbGFzc2VzKFtNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvbkNvbnRlbnQsIE11bHRpQ29sdW1uTGF5b3V0Q1NTLk9yaWdpbmFsRWxlbWVudFR5cGVdKTtcbiAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGNsb25lZEVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzQnV0dG9uUGx1Z2luVXBkYXRlKGRvbU9iamVjdDogRE9NT2JqZWN0KSB7XG5cbiAgICBkb21PYmplY3QuZWxlbWVudFR5cGUgPSBcImJ1dHRvblBsdWdpblwiXG4gICAgaWYoZG9tT2JqZWN0LmNsb25lZEVsZW1lbnRSZWFkeUZvclVwZGF0ZSgpID09PSB0cnVlKSB7XG4gICAgICAgIGNsb25lRWxlbWVudChkb21PYmplY3QpO1xuICAgICAgICBmaXhPbkNsaWNrKGRvbU9iamVjdCk7XG4gICAgfVxufSIsIi8qKlxuICogRmlsZTogL3NyYy9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9yZWdpb25ET01NYW5hZ2VyLnRzICAgICAgICAgICAgICAgICpcbiAqIENyZWF0ZWQgRGF0ZTogU3VuZGF5LCBNYXkgMjJuZCAyMDIyLCA3OjQ2IHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvcHlyaWdodCAoYykgMjAyMiBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKi9cblxuaW1wb3J0IHsgRE9NT2JqZWN0LCBET01PYmplY3RUYWcsIEVsZW1lbnRDb2x1bW5CcmVha1R5cGUsIFRhc2tMaXN0RE9NT2JqZWN0IH0gZnJvbSAnLi4vZG9tT2JqZWN0JztcbmltcG9ydCB7IE11bHRpQ29sdW1uU2V0dGluZ3MsIENvbnRlbnRPdmVyZmxvd1R5cGUsIEFsaWdubWVudFR5cGUsIHNob3VsZERyYXdDb2x1bW5Cb3JkZXIsIGNvbHVtbk92ZXJmbG93U3RhdGUsIGNvbHVtbkFsaWdubWVudFN0YXRlIH0gZnJvbSBcIi4uLy4uL3JlZ2lvblNldHRpbmdzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtbkxheW91dENTUywgTXVsdGlDb2x1bW5TdHlsZUNTUyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9jc3NEZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBNYXJrZG93blJlbmRlckNoaWxkIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgUmVnaW9uTWFuYWdlciB9IGZyb20gJy4vcmVnaW9uTWFuYWdlcic7XG5pbXBvcnQgeyBnZXRIZWFkaW5nQ29sbGFwc2VFbGVtZW50IH0gZnJvbSAnc3JjL3V0aWxpdGllcy9lbGVtZW50UmVuZGVyVHlwZVBhcnNlcic7XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZE11bHRpQ29sdW1uUmVnaW9uTWFuYWdlciBleHRlbmRzIFJlZ2lvbk1hbmFnZXIge1xuXG5cbiAgICBwdWJsaWMgcmVuZGVyUmVnaW9uRWxlbWVudHNUb1NjcmVlbigpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLnJlbmRlckNvbHVtbk1hcmtkb3duKHRoaXMucmVnaW9uUGFyZW50LCB0aGlzLmRvbUxpc3QsIHRoaXMucmVnaW9uYWxTZXR0aW5ncyk7XG4gICAgfVxuICAgIHB1YmxpYyBleHBvcnRSZWdpb25FbGVtZW50c1RvUERGKHBkZlBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cbiAgICAgICAgLy8gRGVmYXVsdCBzZXQgc2hhZG93IHRvIG9mZiBmb3IgZXhwb3J0aW5nIFBERnNcbiAgICAgICAgbGV0IHJlbmRlclNldHRpbmdzID0gdGhpcy5yZWdpb25hbFNldHRpbmdzO1xuICAgICAgICByZW5kZXJTZXR0aW5ncy5kcmF3U2hhZG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVuZGVyQ29sdW1uTWFya2Rvd24ocGRmUGFyZW50RWxlbWVudCwgdGhpcy5kb21MaXN0LnNsaWNlKCksIHJlbmRlclNldHRpbmdzKTtcbiAgICB9XG4gICAgcHVibGljIHJlbmRlclJlZ2lvbkVsZW1lbnRzVG9MaXZlUHJldmlldyhwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXG4gICAgICAgIHRoaXMucmVuZGVyQ29sdW1uTWFya2Rvd24ocGFyZW50RWxlbWVudCwgdGhpcy5kb21MaXN0LCB0aGlzLnJlZ2lvbmFsU2V0dGluZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGluIHRoZSBkYXRhIGZvciB0aGUgbXVsdGktY29sdW1uIHJlZ2lvbiBhbmQgc2V0cyB1cCB0aGUgXG4gICAgICogdXNlciBkZWZpbmVkIG51bWJlciBvZiBjaGlsZHJlbiB3aXRoIHRoZSBwcm9wZXIgY3NzIGNsYXNzZXMgdG8gYmUgcmVuZGVyZWQgcHJvcGVybHkuXG4gICAgICogXG4gICAgICogQHBhcmFtIHBhcmVudEVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCB0aGUgbXVsdGktY29sdW1uIHJlZ2lvbiB3aWxsIGJlIHJlbmRlcmVkIHVuZGVyLlxuICAgICAqIEBwYXJhbSByZWdpb25FbGVtZW50cyBUaGUgbGlzdCBvZiBET00gb2JqZWN0cyB0aGF0IHdpbGwgYmUgY29wcGllZCB1bmRlciB0aGUgcGFyZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyBUaGUgc2V0dGluZ3MgdGhlIHVzZXIgaGFzIGRlZmluZWQgZm9yIHRoZSByZWdpb24uXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW5kZXJDb2x1bW5NYXJrZG93bihwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgcmVnaW9uRWxlbWVudHM6IERPTU9iamVjdFtdLCBzZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncykge1xuXG4gICAgICAgIGxldCBtdWx0aUNvbHVtblBhcmVudCA9IGNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZ2lvbkNvbHVtbkNvbnRhaW5lckRpdn0gXFxcbiAgICAgICAgICAgICAgICAgICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93QXV0b1Njcm9sbF9YfSBcXFxuICAgICAgICAgICAgICAgICAgJHtNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWX07XG4gICAgICAgICAgICAgICAgICBgXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhc3Mgb3VyIHBhcmVudCBkaXYgYW5kIHNldHRpbmdzIHRvIHBhcnNlciB0byBjcmVhdGUgdGhlIHJlcXVpcmVkXG4gICAgICAgICAqIGNvbHVtbiBkaXZzIGFzIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgY29sdW1uQ29udGVudERpdnMgPSB0aGlzLmdldENvbHVtbkNvbnRlbnREaXZzKHNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudCk7XG4gICAgICAgIGlmKHNldHRpbmdzLmRyYXdTaGFkb3cgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uU2hhZG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb2x1bW5Db250ZW50RGl2cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBpZihzaG91bGREcmF3Q29sdW1uQm9yZGVyKGksIHNldHRpbmdzKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzW2ldLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQm9yZGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoc2V0dGluZ3MuZHJhd1NoYWRvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzW2ldLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uU2hhZG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBtYXJrZG93biByZW5kZXJlciB0byBwYXJzZSB0aGUgcGFzc2VkIG1hcmtkb3duXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIHRhZ3MuXG4gICAgICAgIGxldCBtYXJrZG93blJlbmRlckNoaWxkID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoXG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFJlbW92ZSBldmVyeSBvdGhlciBjaGlsZCBmcm9tIHRoZSBwYXJlbnQgc28gXG4gICAgICAgIC8vIHdlIGRvbnQgZW5kIHVwIHdpdGggbXVsdGlwbGUgc2V0cyBvZiBkYXRhLiBUaGlzIHNob3VsZFxuICAgICAgICAvLyByZWFsbHkgb25seSBuZWVkIHRvIGxvb3Agb25jZSBmb3IgaSA9IDAgYnV0IGxvb3AganVzdFxuICAgICAgICAvLyBpbiBjYXNlLlxuICAgICAgICBmb3IobGV0IGkgPSBwYXJlbnRFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LmNoaWxkcmVuW2ldLmRldGFjaCgpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobWFya2Rvd25SZW5kZXJDaGlsZC5jb250YWluZXJFbCk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50c1RvQ29sdW1ucyhyZWdpb25FbGVtZW50cywgY29sdW1uQ29udGVudERpdnMsIHNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGVuZEVsZW1lbnRzVG9Db2x1bW5zKHJlZ2lvbkVsZW1lbnRzOiBET01PYmplY3RbXSwgY29sdW1uQ29udGVudERpdnM6IEhUTUxEaXZFbGVtZW50W10sIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG5cbiAgICAgICAgbGV0IGNvbHVtbkluZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWdpb25FbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0udGFnID09PSBET01PYmplY3RUYWcubm9uZSB8fFxuICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyA9PT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBhIHN0YW5kYXJkIGVsZW1lbnQgY29udGFpbnMgYSBjb2x1bW4gYnJlYWsgdGFnIGFuZCBpdCBpcyBzZXQgYXMgYSBwcmUgY29udGVudCBicmVhayB0YWcgd2UgZmxpcCBvdXIgaW5kZXggaGVyZS5cbiAgICAgICAgICAgICAgICBpZihyZWdpb25FbGVtZW50c1tpXS50YWcgPT09IERPTU9iamVjdFRhZy5ub25lICYmIFxuICAgICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLmVsZW1lbnRJc0NvbHVtbkJyZWFrID09PSBFbGVtZW50Q29sdW1uQnJlYWtUeXBlLnByZUJyZWFrICYmIFxuICAgICAgICAgICAgICAgICAgIChjb2x1bW5JbmRleCArIDEpIDwgc2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV2Ugc3RvcmUgdGhlIGVsZW1lbnRzIGluIGEgd3JhcHBlciBjb250YWluZXIgdW50aWwgd2UgZGV0ZXJtaW5lXG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBjcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbHVtbkR1YWxFbGVtZW50Q29udGFpbmVyLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYoY29sdW1uT3ZlcmZsb3dTdGF0ZShjb2x1bW5JbmRleCwgc2V0dGluZ3MpID09PSBDb250ZW50T3ZlcmZsb3dUeXBlLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0hpZGRlbl9YKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dBdXRvU2Nyb2xsX1gpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGFsaWdubWVudCA9IGNvbHVtbkFsaWdubWVudFN0YXRlKGNvbHVtbkluZGV4LCBzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYoYWxpZ25tZW50ID09PSBBbGlnbm1lbnRUeXBlLmNlbnRlcikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkFsaWdubWVudENlbnRlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWxpZ25tZW50ID09PSBBbGlnbm1lbnRUeXBlLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQWxpZ25tZW50UmlnaHQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkFsaWdubWVudExlZnQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVnaW9uRWxlbWVudHNbaV0uZWxlbWVudENvbnRhaW5lciA9IGVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2Ugd2UganVzdCBtYWtlIGEgY29weSBvZiB0aGUgb3JpZ2luYWwgZWxlbWVudCB0byBkaXNwbGF5LlxuICAgICAgICAgICAgICAgIGxldCBjbG9uZWRFbGVtZW50ID0gcmVnaW9uRWxlbWVudHNbaV0ub3JpZ2luYWxFbGVtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgICAgICAgICBsZXQgaGVhZGluZ0NvbGxhcHNlRWxlbWVudCA9IGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQoY2xvbmVkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYoaGVhZGluZ0NvbGxhcHNlRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJlbW92ZXMgdGhlIGNvbGxhcHNlIGFycm93IGZyb20gdGhlIHZpZXcgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgICAgICAgICBoZWFkaW5nQ29sbGFwc2VFbGVtZW50LmRldGFjaCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLmNsb25lZEVsZW1lbnQgPSBjbG9uZWRFbGVtZW50O1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvbmVkRWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBUYXNrTGlzdERPTU9iamVjdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZml4Q2xvbmVkQ2hlY2tMaXN0QnV0dG9ucyhyZWdpb25FbGVtZW50c1tpXSBhcyBUYXNrTGlzdERPTU9iamVjdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IG51bGwgJiYgcmVnaW9uRWxlbWVudHNbaV0udGFnICE9PSBET01PYmplY3RUYWcuY29sdW1uQnJlYWspIHtcblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2c1tjb2x1bW5JbmRleF0uYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHRhZyBpcyBhIGNvbHVtbiBicmVhayB3ZSB1cGRhdGUgdGhlIGNvbHVtbiBpbmRleCBhZnRlclxuICAgICAgICAgICAgICAgICAqIGFwcGVuZGluZyB0aGUgaXRlbSB0byB0aGUgY29sdW1uIGRpdi4gVGhpcyBrZWVwcyB0aGUgbWFpbiBET01cbiAgICAgICAgICAgICAgICAgKiBjbGVhbmVyIGJ5IHJlbW92aW5nIG90aGVyIGl0ZW1zIGFuZCBwbGFjaW5nIHRoZW0gYWxsIHdpdGhpblxuICAgICAgICAgICAgICAgICAqIGEgcmVnaW9uIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0udGFnID09PSBET01PYmplY3RUYWcuY29sdW1uQnJlYWsgJiZcbiAgICAgICAgICAgICAgICAgICAgKGNvbHVtbkluZGV4ICsgMSkgPCBzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyA9PT0gRE9NT2JqZWN0VGFnLm5vbmUgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50SXNDb2x1bW5CcmVhayA9PT0gRWxlbWVudENvbHVtbkJyZWFrVHlwZS5wb3N0QnJlYWsgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29sdW1uSW5kZXggKyAxKSA8IHNldHRpbmdzLm51bWJlck9mQ29sdW1ucykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGEgc3RhbmRhcmQgZWxlbWVudCBjb250YWlucyBhIGNvbHVtbiBicmVhayB0YWcgYW5kIGl0IGlzIHNldCBhcyBhIHBvc3QgY29udGVudCBicmVhayB0YWcgd2UgZmxpcCBvdXIgaW5kZXggaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKipcbiAqIEZpbGU6IC9zcmMvZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvc2luZ2xlQ29sdW1uUmVnaW9uTWFuYWdlci50cyAgICAgICAqXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvcHlyaWdodCAoYykgMjAyMyBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKi9cblxuaW1wb3J0IHsgRE9NT2JqZWN0LCBET01PYmplY3RUYWcsIFRhc2tMaXN0RE9NT2JqZWN0IH0gZnJvbSAnLi4vZG9tT2JqZWN0JztcbmltcG9ydCB7IE11bHRpQ29sdW1uU2V0dGluZ3MsIENvbHVtbkxheW91dCwgQ29udGVudE92ZXJmbG93VHlwZSwgQWxpZ25tZW50VHlwZSwgY29sdW1uT3ZlcmZsb3dTdGF0ZSwgY29sdW1uQWxpZ25tZW50U3RhdGUsIHNob3VsZERyYXdDb2x1bW5Cb3JkZXIgfSBmcm9tIFwiLi4vLi4vcmVnaW9uU2V0dGluZ3NcIjtcbmltcG9ydCB7IE11bHRpQ29sdW1uTGF5b3V0Q1NTLCBNdWx0aUNvbHVtblN0eWxlQ1NTIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2Nzc0RlZmluaXRpb25zJztcbmltcG9ydCB7IE1hcmtkb3duUmVuZGVyQ2hpbGQgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyIH0gZnJvbSAnLi9yZWdpb25NYW5hZ2VyJztcbmltcG9ydCB7IGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQgfSBmcm9tICdzcmMvdXRpbGl0aWVzL2VsZW1lbnRSZW5kZXJUeXBlUGFyc2VyJztcblxuZXhwb3J0IGNsYXNzIFNpbmdsZUNvbHVtblJlZ2lvbk1hbmFnZXIgZXh0ZW5kcyBSZWdpb25NYW5hZ2VyIHtcblxuXG4gICAgcHVibGljIHJlbmRlclJlZ2lvbkVsZW1lbnRzVG9TY3JlZW4oKTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDb2x1bW5NYXJrZG93bih0aGlzLnJlZ2lvblBhcmVudCwgdGhpcy5kb21MaXN0LCB0aGlzLnJlZ2lvbmFsU2V0dGluZ3MpO1xuICAgIH1cbiAgICBwdWJsaWMgZXhwb3J0UmVnaW9uRWxlbWVudHNUb1BERihwZGZQYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXG4gICAgICAgIC8vIERlZmF1bHQgc2V0IHNoYWRvdyB0byBvZmYgZm9yIGV4cG9ydGluZyBQREZzXG4gICAgICAgIGxldCByZW5kZXJTZXR0aW5ncyA9IHRoaXMucmVnaW9uYWxTZXR0aW5ncztcbiAgICAgICAgcmVuZGVyU2V0dGluZ3MuZHJhd1NoYWRvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlbmRlckNvbHVtbk1hcmtkb3duKHBkZlBhcmVudEVsZW1lbnQsIHRoaXMuZG9tTGlzdC5zbGljZSgpLCByZW5kZXJTZXR0aW5ncyk7XG4gICAgfVxuICAgIHB1YmxpYyByZW5kZXJSZWdpb25FbGVtZW50c1RvTGl2ZVByZXZpZXcocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblxuICAgICAgICB0aGlzLnJlbmRlckNvbHVtbk1hcmtkb3duKHBhcmVudEVsZW1lbnQsIHRoaXMuZG9tTGlzdCwgdGhpcy5yZWdpb25hbFNldHRpbmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0YWtlcyBpbiB0aGUgZGF0YSBmb3IgdGhlIG11bHRpLWNvbHVtbiByZWdpb24gYW5kIHNldHMgdXAgdGhlXG4gICAgICogdXNlciBkZWZpbmVkIG51bWJlciBvZiBjaGlsZHJlbiB3aXRoIHRoZSBwcm9wZXIgY3NzIGNsYXNzZXMgdG8gYmUgcmVuZGVyZWQgcHJvcGVybHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyZW50RWxlbWVudCBUaGUgZWxlbWVudCB0aGF0IHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIHdpbGwgYmUgcmVuZGVyZWQgdW5kZXIuXG4gICAgICogQHBhcmFtIHJlZ2lvbkVsZW1lbnRzIFRoZSBsaXN0IG9mIERPTSBvYmplY3RzIHRoYXQgd2lsbCBiZSBjb3BwaWVkIHVuZGVyIHRoZSBwYXJlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHNldHRpbmdzIFRoZSBzZXR0aW5ncyB0aGUgdXNlciBoYXMgZGVmaW5lZCBmb3IgdGhlIHJlZ2lvbi5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVuZGVyQ29sdW1uTWFya2Rvd24ocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIHJlZ2lvbkVsZW1lbnRzOiBET01PYmplY3RbXSwgc2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcblxuICAgICAgICBsZXQgbXVsdGlDb2x1bW5QYXJlbnQgPSBjcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25Db2x1bW5Db250YWluZXJEaXZ9IFxcXG4gICAgICAgICAgICAgICAgICAke011bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0F1dG9TY3JvbGxfWH0gXFxcbiAgICAgICAgICAgICAgICAgICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93SGlkZGVuX1l9O1xuICAgICAgICAgICAgICAgICAgYFxuICAgICAgICB9KTtcblxuICAgICAgICBpZihpc0xlZnRMYXlvdXQodGhpcy5yZWdpb25hbFNldHRpbmdzLmNvbHVtblBvc2l0aW9uKSl7XG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5TaW5nbGVDb2x1bW5MZWZ0TGF5b3V0KVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoaXNSaWdodExheW91dCh0aGlzLnJlZ2lvbmFsU2V0dGluZ3MuY29sdW1uUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5TaW5nbGVDb2x1bW5SaWdodExheW91dClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLlNpbmdsZUNvbHVtbkNlbnRlckxheW91dClcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXNzIG91ciBwYXJlbnQgZGl2IGFuZCBzZXR0aW5ncyB0byBwYXJzZXIgdG8gY3JlYXRlIHRoZSByZXF1aXJlZFxuICAgICAgICAgKiBjb2x1bW4gZGl2cyBhcyBjaGlsZHJlbiBvZiB0aGUgcGFyZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGNvbHVtbkNvbnRlbnREaXYgPSB0aGlzLmNyZWF0ZUNvbHVtbkNvbnRlbnREaXZzKG11bHRpQ29sdW1uUGFyZW50KTtcbiAgICAgICAgaWYoc2hvdWxkRHJhd0NvbHVtbkJvcmRlcigwLCBzZXR0aW5ncykgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXYuYWRkQ2xhc3MoTXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Cb3JkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5kcmF3U2hhZG93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2LmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uU2hhZG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBtYXJrZG93biByZW5kZXJlciB0byBwYXJzZSB0aGUgcGFzc2VkIG1hcmtkb3duXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIHRhZ3MuXG4gICAgICAgIGxldCBtYXJrZG93blJlbmRlckNoaWxkID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoXG4gICAgICAgICAgICBtdWx0aUNvbHVtblBhcmVudFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFJlbW92ZSBldmVyeSBvdGhlciBjaGlsZCBmcm9tIHRoZSBwYXJlbnQgc28gXG4gICAgICAgIC8vIHdlIGRvbnQgZW5kIHVwIHdpdGggbXVsdGlwbGUgc2V0cyBvZiBkYXRhLiBUaGlzIHNob3VsZFxuICAgICAgICAvLyByZWFsbHkgb25seSBuZWVkIHRvIGxvb3Agb25jZSBmb3IgaSA9IDAgYnV0IGxvb3AganVzdFxuICAgICAgICAvLyBpbiBjYXNlLlxuICAgICAgICBmb3IgKGxldCBpID0gcGFyZW50RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5jaGlsZHJlbltpXS5kZXRhY2goKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKG1hcmtkb3duUmVuZGVyQ2hpbGQuY29udGFpbmVyRWwpO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudHNUb0NvbHVtbnMocmVnaW9uRWxlbWVudHMsIGNvbHVtbkNvbnRlbnREaXYsIHNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXBwZW5kRWxlbWVudHNUb0NvbHVtbnMocmVnaW9uRWxlbWVudHM6IERPTU9iamVjdFtdLCBjb2x1bW5Db250ZW50RGl2OiBIVE1MRGl2RWxlbWVudCwgc2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MpIHtcblxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVnaW9uRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgaWYgKHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyA9PT0gRE9NT2JqZWN0VGFnLm5vbmUgfHxcbiAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS50YWcgPT09IERPTU9iamVjdFRhZy5jb2x1bW5CcmVhaykge1xuXG4gICAgICAgICAgICAgICAgLy8gV2Ugc3RvcmUgdGhlIGVsZW1lbnRzIGluIGEgd3JhcHBlciBjb250YWluZXIgdW50aWwgd2UgZGV0ZXJtaW5lXG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBjcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbHVtbkR1YWxFbGVtZW50Q29udGFpbmVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLmVsZW1lbnRDb250YWluZXIgPSBlbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgaWYoY29sdW1uT3ZlcmZsb3dTdGF0ZSgwLCBzZXR0aW5ncykgPT09IENvbnRlbnRPdmVyZmxvd1R5cGUuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93SGlkZGVuX1gpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0F1dG9TY3JvbGxfWClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGFsaWdubWVudCA9IGNvbHVtbkFsaWdubWVudFN0YXRlKDAsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBpZihhbGlnbm1lbnQgPT09IEFsaWdubWVudFR5cGUuY2VudGVyKSB7ICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkFsaWdubWVudENlbnRlcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYWxpZ25tZW50ID09PSBBbGlnbm1lbnRUeXBlLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQWxpZ25tZW50UmlnaHQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkFsaWdubWVudExlZnQpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGp1c3QgbWFrZSBhIGNvcHkgb2YgdGhlIG9yaWdpbmFsIGVsZW1lbnQgdG8gZGlzcGxheS5cbiAgICAgICAgICAgICAgICBsZXQgY2xvbmVkRWxlbWVudCA9IHJlZ2lvbkVsZW1lbnRzW2ldLm9yaWdpbmFsRWxlbWVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgbGV0IGhlYWRpbmdDb2xsYXBzZUVsZW1lbnQgPSBnZXRIZWFkaW5nQ29sbGFwc2VFbGVtZW50KGNsb25lZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmKGhlYWRpbmdDb2xsYXBzZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByZW1vdmVzIHRoZSBjb2xsYXBzZSBhcnJvdyBmcm9tIHRoZSB2aWV3IGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgICAgICAgICAgaGVhZGluZ0NvbGxhcHNlRWxlbWVudC5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5jbG9uZWRFbGVtZW50ID0gY2xvbmVkRWxlbWVudDtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNsb25lZEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lvbkVsZW1lbnRzW2ldIGluc3RhbmNlb2YgVGFza0xpc3RET01PYmplY3QpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpeENsb25lZENoZWNrTGlzdEJ1dHRvbnMocmVnaW9uRWxlbWVudHNbaV0gYXMgVGFza0xpc3RET01PYmplY3QsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdi5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDb2x1bW5Db250ZW50RGl2cyhtdWx0aUNvbHVtblBhcmVudDogSFRNTERpdkVsZW1lbnQpOiBIVE1MRGl2RWxlbWVudCB7XG5cbiAgICAgICAgbGV0IGNvbnRlbnREaXYgPSBtdWx0aUNvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtbkNvbnRlbnR9YFxuICAgICAgICB9KTtcblxuICAgICAgICBpZih0aGlzLnJlZ2lvbmFsU2V0dGluZ3MuY29sdW1uU2l6ZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgICAgICAgICBjb250ZW50RGl2LmFkZENsYXNzKGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlNpbmdsZUNvbHVtblNtYWxsfWApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZih0aGlzLnJlZ2lvbmFsU2V0dGluZ3MuY29sdW1uU2l6ZSA9PT0gXCJsYXJnZVwiKSB7XG4gICAgICAgICAgICBjb250ZW50RGl2LmFkZENsYXNzKGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlNpbmdsZUNvbHVtbkxhcmdlfWApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZih0aGlzLnJlZ2lvbmFsU2V0dGluZ3MuY29sdW1uU2l6ZSA9PT0gXCJmdWxsXCIpIHtcbiAgICAgICAgICAgIGNvbnRlbnREaXYuYWRkQ2xhc3MoYCR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuU2luZ2xlQ29sdW1uRnVsbH1gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGVudERpdi5hZGRDbGFzcyhgJHtNdWx0aUNvbHVtbkxheW91dENTUy5TaW5nbGVDb2x1bW5NZWR9YClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZW50RGl2O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNDZW50ZXJlZChsYXlvdXQ6IENvbHVtbkxheW91dCk6IGJvb2xlYW4ge1xuXG4gICAgaWYobGF5b3V0ID09PSBcInN0YW5kYXJkXCIgfHxcbiAgICAgICBsYXlvdXQgPT09IFwibWlkZGxlXCIgICB8fFxuICAgICAgIGxheW91dCA9PT0gXCJjZW50ZXJcIiAgIHx8XG4gICAgICAgbGF5b3V0ID09PSBcInNlY29uZFwiICAgICkge1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc0xlZnRMYXlvdXQobGF5b3V0OiBDb2x1bW5MYXlvdXQpOiBib29sZWFuIHtcblxuICAgIGlmKGxheW91dCA9PT0gXCJsZWZ0XCIgfHxcbiAgICAgICBsYXlvdXQgPT09IFwiZmlyc3RcIiApIHtcbiBcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICB9XG4gXG4gICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBpc1JpZ2h0TGF5b3V0KGxheW91dDogQ29sdW1uTGF5b3V0KTogYm9vbGVhbiB7XG5cbiAgICBpZihsYXlvdXQgPT09IFwicmlnaHRcIiB8fFxuICAgICAgIGxheW91dCA9PT0gXCJ0aGlyZFwiIHx8XG4gICAgICAgbGF5b3V0ID09PSBcImxhc3RcIiApIHtcbiBcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICB9XG4gXG4gICAgIHJldHVybiBmYWxzZVxufSIsIi8qKlxuICogRmlsZTogL3NyYy9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9hdXRvTGF5b3V0UmVnaW9uTWFuYWdlci50cyAgICAgICAgICpcbiAqIENyZWF0ZWQgRGF0ZTogU3VuZGF5LCBNYXkgMjJuZCAyMDIyLCAxMDoyMyBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvcHlyaWdodCAoYykgMjAyMiBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKi9cblxuaW1wb3J0IHsgRE9NT2JqZWN0LCBET01PYmplY3RUYWcsIFRhc2tMaXN0RE9NT2JqZWN0IH0gZnJvbSAnLi4vZG9tT2JqZWN0JztcbmltcG9ydCB7IEFsaWdubWVudFR5cGUsIENvbnRlbnRPdmVyZmxvd1R5cGUsIE11bHRpQ29sdW1uU2V0dGluZ3MsIGNvbHVtbkFsaWdubWVudFN0YXRlLCBjb2x1bW5PdmVyZmxvd1N0YXRlLCBzaG91bGREcmF3Q29sdW1uQm9yZGVyIH0gZnJvbSBcIi4uLy4uL3JlZ2lvblNldHRpbmdzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtbkxheW91dENTUywgTXVsdGlDb2x1bW5TdHlsZUNTUyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9jc3NEZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyIH0gZnJvbSAnLi9yZWdpb25NYW5hZ2VyJztcbmltcG9ydCB7IGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQsIGhhc0hlYWRlciB9IGZyb20gJ3NyYy91dGlsaXRpZXMvZWxlbWVudFJlbmRlclR5cGVQYXJzZXInO1xuaW1wb3J0IHsgUmVnaW9uTWFuYWdlckRhdGEgfSBmcm9tICcuL3JlZ2lvbk1hbmFnZXJDb250YWluZXInO1xuXG5leHBvcnQgY2xhc3MgQXV0b0xheW91dFJlZ2lvbk1hbmFnZXIgZXh0ZW5kcyBSZWdpb25NYW5hZ2VyIHtcblxuICAgIHByaXZhdGUgYXV0b0xheW91dEJhbGFuY2VJdGVyYXRpb25zOiBudW1iZXIgPSA1O1xuXG4gICAgcHJpdmF0ZSBwcmV2aW91c0NvbHVtbkhlaWdodHM6IG51bWJlcltdID0gW11cblxuICAgIHByaXZhdGUgY29sdW1uUGFyZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcml2YXRlIGNvbHVtbkRpdnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgcHJpdmF0ZSBkb2NSZWZsb3c6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBSZWdpb25NYW5hZ2VyRGF0YSwgYmFsYW5jZUl0ZXJhdGlvbnM6IG51bWJlciA9IDUpIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIHRoaXMuYXV0b0xheW91dEJhbGFuY2VJdGVyYXRpb25zID0gYmFsYW5jZUl0ZXJhdGlvbnM7XG4gICAgICAgIHRoaXMuZG9jUmVmbG93ID0gZGF0YS5yZWdpb25hbFNldHRpbmdzLmZ1bGxEb2NSZWZsb3c7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlclJlZ2lvbkVsZW1lbnRzVG9TY3JlZW4oKTogdm9pZCB7XG5cbiAgICAgICAgIHRoaXMucmVuZGVyQ29sdW1uTWFya2Rvd24odGhpcy5yZWdpb25QYXJlbnQsIHRoaXMuZG9tTGlzdCwgdGhpcy5yZWdpb25hbFNldHRpbmdzKTtcbiAgICB9XG4gICAgcHVibGljIGV4cG9ydFJlZ2lvbkVsZW1lbnRzVG9QREYocGRmUGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblxuICAgICAgICAvLyBEZWZhdWx0IHNldCBzaGFkb3cgdG8gb2ZmIGZvciBleHBvcnRpbmcgUERGc1xuICAgICAgICBsZXQgcmVuZGVyU2V0dGluZ3MgPSB0aGlzLnJlZ2lvbmFsU2V0dGluZ3M7XG4gICAgICAgIHJlbmRlclNldHRpbmdzLmRyYXdTaGFkb3cgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb2x1bW5NYXJrZG93bihwZGZQYXJlbnRFbGVtZW50LCB0aGlzLmRvbUxpc3Quc2xpY2UoKSwgcmVuZGVyU2V0dGluZ3MpO1xuICAgIH1cbiAgICBwdWJsaWMgcmVuZGVyUmVnaW9uRWxlbWVudHNUb0xpdmVQcmV2aWV3KHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDb2x1bW5NYXJrZG93bihwYXJlbnRFbGVtZW50LCB0aGlzLmRvbUxpc3QsIHRoaXMucmVnaW9uYWxTZXR0aW5ncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gdGhlIGRhdGEgZm9yIHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIGFuZCBzZXRzIHVwIHRoZSBcbiAgICAgKiB1c2VyIGRlZmluZWQgbnVtYmVyIG9mIGNoaWxkcmVuIHdpdGggdGhlIHByb3BlciBjc3MgY2xhc3NlcyB0byBiZSByZW5kZXJlZCBwcm9wZXJseS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcGFyZW50RWxlbWVudCBUaGUgZWxlbWVudCB0aGF0IHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIHdpbGwgYmUgcmVuZGVyZWQgdW5kZXIuXG4gICAgICogQHBhcmFtIHJlZ2lvbkVsZW1lbnRzIFRoZSBsaXN0IG9mIERPTSBvYmplY3RzIHRoYXQgd2lsbCBiZSBjb3BwaWVkIHVuZGVyIHRoZSBwYXJlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHNldHRpbmdzIFRoZSBzZXR0aW5ncyB0aGUgdXNlciBoYXMgZGVmaW5lZCBmb3IgdGhlIHJlZ2lvbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlckNvbHVtbk1hcmtkb3duKHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCByZWdpb25FbGVtZW50czogRE9NT2JqZWN0W10sIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG5cbiAgICAgICAgbGV0IG11bHRpQ29sdW1uUGFyZW50ID0gY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogYCR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuUmVnaW9uQ29sdW1uQ29udGFpbmVyRGl2fSBcXFxuICAgICAgICAgICAgICAgICAgJHtNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dBdXRvU2Nyb2xsX1h9IFxcXG4gICAgICAgICAgICAgICAgICAke011bHRpQ29sdW1uTGF5b3V0Q1NTLkNvbnRlbnRPdmVyZmxvd0hpZGRlbl9ZfTtcbiAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29sdW1uUGFyZW50ID0gbXVsdGlDb2x1bW5QYXJlbnQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhc3Mgb3VyIHBhcmVudCBkaXYgYW5kIHNldHRpbmdzIHRvIHBhcnNlciB0byBjcmVhdGUgdGhlIHJlcXVpcmVkXG4gICAgICAgICAqIGNvbHVtbiBkaXZzIGFzIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbHVtbkRpdnMgPSB0aGlzLmdldENvbHVtbkNvbnRlbnREaXZzKHNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudCk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmRyYXdTaGFkb3cgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uU2hhZG93KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29sdW1uRGl2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYoc2hvdWxkRHJhd0NvbHVtbkJvcmRlcihpLCBzZXR0aW5ncykgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbkRpdnNbaV0uYWRkQ2xhc3MoTXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5Cb3JkZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuZHJhd1NoYWRvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uRGl2c1tpXS5hZGRDbGFzcyhNdWx0aUNvbHVtblN0eWxlQ1NTLkNvbHVtblNoYWRvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgZXZlcnkgb3RoZXIgY2hpbGQgZnJvbSB0aGUgcGFyZW50IHNvIFxuICAgICAgICAvLyB3ZSBkb250IGVuZCB1cCB3aXRoIG11bHRpcGxlIHNldHMgb2YgZGF0YS4gVGhpcyBzaG91bGRcbiAgICAgICAgLy8gcmVhbGx5IG9ubHkgbmVlZCB0byBsb29wIG9uY2UgZm9yIGkgPSAwIGJ1dCBsb29wIGp1c3RcbiAgICAgICAgLy8gaW4gY2FzZS5cbiAgICAgICAgZm9yIChsZXQgaSA9IHBhcmVudEVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuY2hpbGRyZW5baV0uZGV0YWNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChtdWx0aUNvbHVtblBhcmVudCk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50c1RvQ29sdW1ucyhyZWdpb25FbGVtZW50cywgdGhpcy5jb2x1bW5EaXZzLCBzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhcHBlbmRFbGVtZW50c1RvQ29sdW1ucyhyZWdpb25FbGVtZW50czogRE9NT2JqZWN0W10sIGNvbHVtbkNvbnRlbnREaXZzOiBIVE1MRGl2RWxlbWVudFtdLCBzZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncykge1xuXG4gICAgICAgIGZ1bmN0aW9uIGJhbGFuY2VFbGVtZW50cygpIHtcblxuICAgICAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gcmVnaW9uRWxlbWVudHMubWFwKChlbDogRE9NT2JqZWN0LCBpbmRleDogbnVtYmVyKSA9PiB7IFxuXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIGF0dGVtcHQgdG8gdXBkYXRlIHRoZSBlbGVtZW50UmVuZGVyZWRIZWlnaHQgaWYgaXQgaXMgMCBhbmQgaWYgaXQgaXMgbm90IGFuIHVucmVuZGVyZWQgZWxlbWVudCBzdWNoIGFzIGEgZW5kcmVnaW9uIHRhZy5cbiAgICAgICAgICAgICAgICBpZihlbC5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZWwudGFnICE9PSBET01PYmplY3RUYWcuY29sdW1uQnJlYWsgJiZcbiAgICAgICAgICAgICAgICAgICAgZWwudGFnICE9PSBET01PYmplY3RUYWcuZW5kUmVnaW9uICYmXG4gICAgICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLnJlZ2lvblNldHRpbmdzICYmXG4gICAgICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLnN0YXJ0UmVnaW9uKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBlbGVtZW50IHRvIHJlbmRlcmVkIGRpdiBzbyB3ZSBjYW4gZXh0cmFjdCB0aGUgcmVuZGVyZWQgaGVpZ2h0LlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2c1swXS5hcHBlbmRDaGlsZChlbC5vcmlnaW5hbEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGVsLmVsZW1lbnRSZW5kZXJlZEhlaWdodCA9IGVsLm9yaWdpbmFsRWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnNbMF0ucmVtb3ZlQ2hpbGQoZWwub3JpZ2luYWxFbGVtZW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuZWxlbWVudFJlbmRlcmVkSGVpZ2h0IFxuICAgICAgICAgICAgfSkucmVkdWNlKChwcmV2OiBudW1iZXIsIGN1cnI6IG51bWJlcikgPT4geyByZXR1cm4gcHJldiArIGN1cnIgfSwgMCk7XG4gICAgICAgICAgICBsZXQgbWF4Q29sdW1uQ29udGVudEhlaWdodCA9IE1hdGgudHJ1bmModG90YWxIZWlnaHQgLyBzZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMpO1xuXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgY29sdW1uQ29udGVudERpdnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gY29sdW1uQ29udGVudERpdnNbaV0uY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uQ29udGVudERpdnNbaV0uY2hpbGRyZW5bal0uZGV0YWNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY29sdW1uSW5kZXggPSAwO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRDb2x1bW5IZWlnaHQgPSAwO1xuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tTaG91bGRTd2l0Y2hDb2x1bW5zKG5leHRFbGVtZW50SGVpZ2h0OiBudW1iZXIpIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENvbHVtbkhlaWdodCArIG5leHRFbGVtZW50SGVpZ2h0ID4gbWF4Q29sdW1uQ29udGVudEhlaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICAoY29sdW1uSW5kZXggKyAxKSA8IHNldHRpbmdzLm51bWJlck9mQ29sdW1ucykge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29sdW1uSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVnaW9uRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIGlmIChyZWdpb25FbGVtZW50c1tpXS50YWcgPT09IERPTU9iamVjdFRhZy5ub25lIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyA9PT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBIZXJlIHdlIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3dhcCB0byB0aGUgbmV4dCBjb2x1bW4gZm9yIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAqIElmIHRoZSB1c2VyIHdhbnRzIHRvIGtlZXAgaGVhZGluZ3Mgd2l0aCB0aGUgY29udGVudCBiZWxvdyBpdCB3ZSBhbHNvIG1ha2Ugc3VyZVxuICAgICAgICAgICAgICAgICAgICAgKiB0aGF0IHRoZSBsYXN0IGl0ZW0gaW4gYSBjb2x1bW4gaXMgbm90IGEgaGVhZGVyIGVsZW1lbnQgYnkgdXNpbmcgdGhlIGhlYWRlciBhbmRcbiAgICAgICAgICAgICAgICAgICAgICogdGhlIG5leHQgZWxlbWVudCdzIGhlaWdodCBhcyB0aGUgaGVpZ2h0IHZhbHVlLiBcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmKGhhc0hlYWRlcihyZWdpb25FbGVtZW50c1tpXS5vcmlnaW5hbEVsZW1lbnQpID09PSB0cnVlKSB7IC8vIFRPRE86IEFkZCB0aGlzIGFzIHNlbGVjdGFibGUgb3B0aW9uLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRlckFuZE5leHRFbGVtZW50SGVpZ2h0ID0gcmVnaW9uRWxlbWVudHNbaV0uZWxlbWVudFJlbmRlcmVkSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaSA8IHJlZ2lvbkVsZW1lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJBbmROZXh0RWxlbWVudEhlaWdodCArPSByZWdpb25FbGVtZW50c1tpICsgMV0uZWxlbWVudFJlbmRlcmVkSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTaG91bGRTd2l0Y2hDb2x1bW5zKGhlYWRlckFuZE5leHRFbGVtZW50SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrU2hvdWxkU3dpdGNoQ29sdW1ucyhyZWdpb25FbGVtZW50c1tpXS5lbGVtZW50UmVuZGVyZWRIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2x1bW5IZWlnaHQgKz0gcmVnaW9uRWxlbWVudHNbaV0uZWxlbWVudFJlbmRlcmVkSGVpZ2h0XG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBXZSBzdG9yZSB0aGUgZWxlbWVudHMgaW4gYSB3cmFwcGVyIGNvbnRhaW5lciB1bnRpbCB3ZSBkZXRlcm1pbmUgaWYgd2Ugd2FudCB0byBcbiAgICAgICAgICAgICAgICAgICAgICogdXNlIHRoZSBvcmlnaW5hbCBlbGVtZW50IG9yIGEgY2xvbmUgb2YgdGhlIGVsZW1lbnQuIFRoaXMgaGVscHMgdXMgYnkgYWxsb3dpbmcgXG4gICAgICAgICAgICAgICAgICAgICAqIHVzIHRvIGNyZWF0ZSBhIHZpc3VhbCBvbmx5IGNsb25lIHdoaWxlIHRoZSB1cGRhdGUgbG9vcCBtb3ZlcyB0aGUgb3JpZ2luYWwgZWxlbWVudCBcbiAgICAgICAgICAgICAgICAgICAgICogaW50byB0aGUgY29sdW1ucy5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsczogTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29sdW1uRHVhbEVsZW1lbnRDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50Q29udGFpbmVyID0gZWxlbWVudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoY29sdW1uT3ZlcmZsb3dTdGF0ZShjb2x1bW5JbmRleCwgc2V0dGluZ3MpID09PSBDb250ZW50T3ZlcmZsb3dUeXBlLmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93QXV0b1Njcm9sbF9YKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgYWxpZ25tZW50ID0gY29sdW1uQWxpZ25tZW50U3RhdGUoY29sdW1uSW5kZXgsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYWxpZ25tZW50ID09PSBBbGlnbm1lbnRUeXBlLmNlbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5BbGlnbm1lbnRDZW50ZXIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWxpZ25tZW50ID09PSBBbGlnbm1lbnRUeXBlLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKE11bHRpQ29sdW1uTGF5b3V0Q1NTLkFsaWdubWVudFJpZ2h0KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5BbGlnbm1lbnRMZWZ0KVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsb25lZEVsZW1lbnQgPSByZWdpb25FbGVtZW50c1tpXS5jbG9uZWRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZihyZWdpb25FbGVtZW50c1tpXS5jbG9uZWRFbGVtZW50ID09PSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQgPSByZWdpb25FbGVtZW50c1tpXS5vcmlnaW5hbEVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhlYWRpbmdDb2xsYXBzZUVsZW1lbnQgPSBnZXRIZWFkaW5nQ29sbGFwc2VFbGVtZW50KGNsb25lZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaGVhZGluZ0NvbGxhcHNlRWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmVtb3ZlcyB0aGUgY29sbGFwc2UgYXJyb3cgZnJvbSB0aGUgdmlldyBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGluZ0NvbGxhcHNlRWxlbWVudC5kZXRhY2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5jbG9uZWRFbGVtZW50ID0gY2xvbmVkRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNsb25lZEVsZW1lbnQpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0gaW5zdGFuY2VvZiBUYXNrTGlzdERPTU9iamVjdCkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXhDbG9uZWRDaGVja0xpc3RCdXR0b25zKHJlZ2lvbkVsZW1lbnRzW2ldIGFzIFRhc2tMaXN0RE9NT2JqZWN0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbkNvbnRlbnREaXZzW2NvbHVtbkluZGV4XSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyAhPT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5Db250ZW50RGl2c1tjb2x1bW5JbmRleF0uYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSWYgdGhlIHRhZyBpcyBhIGNvbHVtbiBicmVhayB3ZSB1cGRhdGUgdGhlIGNvbHVtbiBpbmRleCBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgKiBhcHBlbmRpbmcgdGhlIGl0ZW0gdG8gdGhlIGNvbHVtbiBkaXYuIFRoaXMga2VlcHMgdGhlIG1haW4gRE9NXG4gICAgICAgICAgICAgICAgICAgICAqIGNsZWFuZXIgYnkgcmVtb3Zpbmcgb3RoZXIgaXRlbXMgYW5kIHBsYWNpbmcgdGhlbSBhbGwgd2l0aGluXG4gICAgICAgICAgICAgICAgICAgICAqIGEgcmVnaW9uIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAgICAqIFJlbW92aW5nIHRoZSBlbmQgY29sdW1uIHRhZyBhcyBhbiBvcHRpb24gZm9yIG5vdy5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChyZWdpb25FbGVtZW50c1tpXS50YWcgPT09IERPTU9iamVjdFRhZy5jb2x1bW5CcmVhayAmJlxuICAgICAgICAgICAgICAgICAgICAvLyAgICAoY29sdW1uSW5kZXggKyAxKSA8IHNldHRpbmdzLm51bWJlck9mQ29sdW1ucykge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGN1cnJlbnRDb2x1bW5IZWlnaHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEF0dGVtcHQgdG8gYmFsYW5jZWQgdGhlIGVsZW1lbnRzLiBXZSBuZWVkIHRvIGl0ZXJhdGUgb3ZlciB0aGUgZWxlbWVudHMgbXVsdGlwbGUgdGltZXMgYmVjYXVzZVxuICAgICAgICAgKiBvdXIgaW5pdGlhbCBiYWxhbmNlIGVzdGltYXRlIG1heSBub3QgYmUgcGVyZmVjdGx5IGJhbGFuY2VkIGR1ZSB0byBkaWZmZXJlbnQgY29sdW1uIHdpZHRocyBjYXVzaW5nIFxuICAgICAgICAgKiBlbGVtZW50cyB3aXRoaW4gdGhlbSB0byBiZSBvZiBkaWZmZXJlbnQgaGVpZ2h0cy4gVGhpcyBjYW4gY2F1c2UgdGhlIGVsZW1lbnRzIHRvIGp1bXAgYXJvdW5kIG9uIFxuICAgICAgICAgKiBzdWJzaXF1ZW50IHVwZGF0ZSBsb29wcyB3aGljaCBpcyBub3QgaWRlYWwuIEhlcmUgd2UgcmVuZGVyIHRoZSBlbGVtZW50cyB0byB0aGUgc2NyZWVuIGFuZCB1cGRhdGUgXG4gICAgICAgICAqIHRoZWlyIGhlaWdodCBhZnRlciBiZWluZyByZW5kZXJlZCBpbnRvIHRoZSBlc3RpbWF0ZWQgcG9zaXRpb24uIFxuICAgICAgICAgKiBcbiAgICAgICAgICogT25jZSBldmVyeXRoaW5nIGlzIHJlbmRlcmVkIHdlIGNoZWNrIGFsbCBvZiB0aGUgY29sdW1uIGhlaWdodHMgYWdhaW5zdCBvdXIgbGFzdCBpdGVyYXRpb24gYW5kIFxuICAgICAgICAgKiBpZiBub3RoaW5nIGhhcyBjaGFuZ2VkIHdlIGtub3cgd2UgYXJlIGJhbGFuY2VkLlxuICAgICAgICAgKiBcbiAgICAgICAgICogVGhlcmUgaXMgcHJvYmFibHkgYSBiZXR0ZXIgd2F5IG9mIGFjY29tcGxpc2hpbmcgdGhpcyB0YXNrIGJ1dCB0aGlzIHdvcmtzIGZvciB0aGUgdGltZSBiZWluZy5cbiAgICAgICAgICovXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmF1dG9MYXlvdXRCYWxhbmNlSXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJhbGFuY2VFbGVtZW50cygpXG5cbiAgICAgICAgICAgIGxldCBiYWxhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgY29sdW1uQ29udGVudERpdnMubGVuZ3RoOyBqKyspIHtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjb2x1bW4gaGVpZ2h0cyBhcmUgdW5kZWZpbmVkIHdlIHNldCBkZWZhdWx0IHRvIHplcm8gc28gbm90IHRvIGVuY291bnRlciBhbiBlcnJvci5cbiAgICAgICAgICAgICAgICBpZighdGhpcy5wcmV2aW91c0NvbHVtbkhlaWdodHNbal0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0NvbHVtbkhlaWdodHMucHVzaCgwKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgcmVuZGVyIGhlaWdodCBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzIGhlaWdodCB3ZSBhcmUgc3RpbGwgYmFsYW5jaW5nLlxuICAgICAgICAgICAgICAgIGlmKHRoaXMucHJldmlvdXNDb2x1bW5IZWlnaHRzW2pdICE9PSBjb2x1bW5Db250ZW50RGl2c1tqXS5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0NvbHVtbkhlaWdodHNbal0gPSBjb2x1bW5Db250ZW50RGl2c1tqXS5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZWQgPSBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgd2UgbWFkZSBpdCBvdXQgb2YgdGhlIGxvb3AgYW5kIGFsbCBvZiB0aGUgY29sdW1ucyBhcmUgdGhlIHNhbWUgaGVpZ2h0IGFzIGxhc3QgdXBkYXRlXG4gICAgICAgICAgICAvLyB3ZSdyZSBiYWxhbmNlZCBzbyB3ZSBjYW4gYnJlYWsgb3V0IG9mIHRoZSBsb29wLlxuICAgICAgICAgICAgaWYoYmFsYW5jZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVSZW5kZXJlZE1hcmtkb3duKCkge1xuXG4gICAgICAgIGlmKHRoaXMuZG9jUmVmbG93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdXBlci51cGRhdGVSZW5kZXJlZE1hcmtkb3duKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZG9tTGlzdC5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBsZXQgZWwgPSB0aGlzLmRvbUxpc3RbaV1cbiAgICAgICAgICAgIGxldCBvcmlnaW5hbENsaWVudEhlaWdodCA9IDA7XG4gICAgICAgICAgICBpZiAoZWwub3JpZ2luYWxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDbGllbnRIZWlnaHQgPSBlbC5vcmlnaW5hbEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2xvbmVkQ2xpZW50SGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmIChlbC5jbG9uZWRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY2xvbmVkQ2xpZW50SGVpZ2h0ID0gZWwuY2xvbmVkRWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ2xpZW50SGVpZ2h0IDwgY2xvbmVkQ2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kb21MaXN0W2ldLmVsZW1lbnRSZW5kZXJlZEhlaWdodCA9IGNsb25lZENsaWVudEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9tTGlzdFtpXS5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPSBvcmlnaW5hbENsaWVudEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWxpZENvbHVtbnMgPSB0cnVlO1xuICAgICAgICBpZih0aGlzLmNvbHVtblBhcmVudCAhPT0gbnVsbCAmJiB0aGlzLmNvbHVtbkRpdnMgIT09IG51bGwgJiYgdGhpcy5jb2x1bW5EaXZzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuY29sdW1uRGl2cy5sZW5ndGggPT09IHRoaXMucmVnaW9uYWxTZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMpIHtcblxuICAgICAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGhpcy5kb21MaXN0Lm1hcCgoZWw6IERPTU9iamVjdCwgaW5kZXg6IG51bWJlcikgPT4geyBcblxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBhdHRlbXB0IHRvIHVwZGF0ZSB0aGUgZWxlbWVudFJlbmRlcmVkSGVpZ2h0IGlmIGl0IGlzIDAgYW5kIGlmIGl0IGlzIG5vdCBhbiB1bnJlbmRlcmVkIGVsZW1lbnQgc3VjaCBhcyBhIGVuZHJlZ2lvbiB0YWcuXG4gICAgICAgICAgICAgICAgaWYoZWwuZWxlbWVudFJlbmRlcmVkSGVpZ2h0ID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrICYmXG4gICAgICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLmVuZFJlZ2lvbiAmJlxuICAgICAgICAgICAgICAgICAgICBlbC50YWcgIT09IERPTU9iamVjdFRhZy5yZWdpb25TZXR0aW5ncyAmJlxuICAgICAgICAgICAgICAgICAgICBlbC50YWcgIT09IERPTU9iamVjdFRhZy5zdGFydFJlZ2lvbikge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZWxlbWVudCB0byByZW5kZXJlZCBkaXYgc28gd2UgY2FuIGV4dHJhY3QgdGhlIHJlbmRlcmVkIGhlaWdodC5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5QYXJlbnQuYXBwZW5kQ2hpbGQoZWwub3JpZ2luYWxFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICBlbC5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPSBlbC5vcmlnaW5hbEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uUGFyZW50LnJlbW92ZUNoaWxkKGVsLm9yaWdpbmFsRWxlbWVudClcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmVsZW1lbnRSZW5kZXJlZEhlaWdodCBcbiAgICAgICAgICAgIH0pLnJlZHVjZSgocHJldjogbnVtYmVyLCBjdXJyOiBudW1iZXIpID0+IHsgcmV0dXJuIHByZXYgKyBjdXJyIH0sIDApO1xuICAgICAgICAgICAgbGV0IG1heENvbHVtbkNvbnRlbnRIZWlnaHQgPSBNYXRoLnRydW5jKHRvdGFsSGVpZ2h0IC8gdGhpcy5yZWdpb25hbFNldHRpbmdzLm51bWJlck9mQ29sdW1ucyk7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbkRpdnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uSGVpZ2h0ID0gMFxuICAgICAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbkRpdnNbaV0uY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uSGVpZ2h0ICs9IHRoaXMuY29sdW1uRGl2c1tpXS5jaGlsZHJlbltqXS5jbGllbnRIZWlnaHRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZihjb2x1bW5IZWlnaHQgPiBtYXhDb2x1bW5Db250ZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkQ29sdW1ucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZih2YWxpZENvbHVtbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ29sdW1uTWFya2Rvd24odGhpcy5yZWdpb25QYXJlbnQsIHRoaXMuZG9tTGlzdCwgdGhpcy5yZWdpb25hbFNldHRpbmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLnVwZGF0ZVJlbmRlcmVkTWFya2Rvd24oKTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogRmlsZTogL3NyYy9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9yZWZsb3dSZWdpb25NYW5hZ2VyLnRzICAgICAgICAgICAgICpcbiAqIENyZWF0ZWQgRGF0ZTogVGh1cnNkYXksIE1heSAxMXRoIDIwMjMsIDk6NTkgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdXRob3I6IENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvcHlyaWdodCAoYykgMjAyMyBDYW1lcm9uIFJvYmluc29uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKi9cblxuaW1wb3J0IHsgRE9NT2JqZWN0LCBET01PYmplY3RUYWcsIFRhc2tMaXN0RE9NT2JqZWN0IH0gZnJvbSAnLi4vZG9tT2JqZWN0JztcbmltcG9ydCB7IEFsaWdubWVudFR5cGUsIENvbnRlbnRPdmVyZmxvd1R5cGUsIE11bHRpQ29sdW1uU2V0dGluZ3MsIGNvbHVtbkFsaWdubWVudFN0YXRlLCBjb2x1bW5PdmVyZmxvd1N0YXRlLCBzaG91bGREcmF3Q29sdW1uQm9yZGVyIH0gZnJvbSBcIi4uLy4uL3JlZ2lvblNldHRpbmdzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtbkxheW91dENTUywgTXVsdGlDb2x1bW5TdHlsZUNTUyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9jc3NEZWZpbml0aW9ucyc7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyIH0gZnJvbSAnLi9yZWdpb25NYW5hZ2VyJztcbmltcG9ydCB7IGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQsIGhhc0hlYWRlciB9IGZyb20gJ3NyYy91dGlsaXRpZXMvZWxlbWVudFJlbmRlclR5cGVQYXJzZXInO1xuXG5leHBvcnQgY2xhc3MgUmVmbG93UmVnaW9uTWFuYWdlciBleHRlbmRzIFJlZ2lvbk1hbmFnZXIge1xuXG4gICAgcHVibGljIHJlbmRlclJlZ2lvbkVsZW1lbnRzVG9TY3JlZW4oKTogdm9pZCB7XG5cbiAgICAgICAgIHRoaXMucmVuZGVyQ29sdW1uTWFya2Rvd24odGhpcy5yZWdpb25QYXJlbnQsIHRoaXMuZG9tTGlzdCwgdGhpcy5yZWdpb25hbFNldHRpbmdzKTtcbiAgICB9XG4gICAgcHVibGljIGV4cG9ydFJlZ2lvbkVsZW1lbnRzVG9QREYocGRmUGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcblxuICAgICAgICAvLyBEZWZhdWx0IHNldCBzaGFkb3cgdG8gb2ZmIGZvciBleHBvcnRpbmcgUERGc1xuICAgICAgICBsZXQgcmVuZGVyU2V0dGluZ3MgPSB0aGlzLnJlZ2lvbmFsU2V0dGluZ3M7XG4gICAgICAgIHJlbmRlclNldHRpbmdzLmRyYXdTaGFkb3cgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb2x1bW5NYXJrZG93bihwZGZQYXJlbnRFbGVtZW50LCB0aGlzLmRvbUxpc3Quc2xpY2UoKSwgcmVuZGVyU2V0dGluZ3MpO1xuICAgIH1cbiAgICBwdWJsaWMgcmVuZGVyUmVnaW9uRWxlbWVudHNUb0xpdmVQcmV2aWV3KHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDb2x1bW5NYXJrZG93bihwYXJlbnRFbGVtZW50LCB0aGlzLmRvbUxpc3QsIHRoaXMucmVnaW9uYWxTZXR0aW5ncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW4gdGhlIGRhdGEgZm9yIHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIGFuZCBzZXRzIHVwIHRoZSBcbiAgICAgKiB1c2VyIGRlZmluZWQgbnVtYmVyIG9mIGNoaWxkcmVuIHdpdGggdGhlIHByb3BlciBjc3MgY2xhc3NlcyB0byBiZSByZW5kZXJlZCBwcm9wZXJseS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gcGFyZW50RWxlbWVudCBUaGUgZWxlbWVudCB0aGF0IHRoZSBtdWx0aS1jb2x1bW4gcmVnaW9uIHdpbGwgYmUgcmVuZGVyZWQgdW5kZXIuXG4gICAgICogQHBhcmFtIHJlZ2lvbkVsZW1lbnRzIFRoZSBsaXN0IG9mIERPTSBvYmplY3RzIHRoYXQgd2lsbCBiZSBjb3BwaWVkIHVuZGVyIHRoZSBwYXJlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHNldHRpbmdzIFRoZSBzZXR0aW5ncyB0aGUgdXNlciBoYXMgZGVmaW5lZCBmb3IgdGhlIHJlZ2lvbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbmRlckNvbHVtbk1hcmtkb3duKHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCByZWdpb25FbGVtZW50czogRE9NT2JqZWN0W10sIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG5cbiAgICAgICAgbGV0IHZlcnRpY2FsQ29sdW1uUGFyZW50ID0gY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogYGBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhc3Mgb3VyIHBhcmVudCBkaXYgYW5kIHNldHRpbmdzIHRvIHBhcnNlciB0byBjcmVhdGUgdGhlIHJlcXVpcmVkXG4gICAgICAgICAqIGNvbHVtbiBkaXZzIGFzIGNoaWxkcmVuIG9mIHRoZSBwYXJlbnQuXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8vIFJlbW92ZSBldmVyeSBvdGhlciBjaGlsZCBmcm9tIHRoZSBwYXJlbnQgc28gXG4gICAgICAgIC8vIHdlIGRvbnQgZW5kIHVwIHdpdGggbXVsdGlwbGUgc2V0cyBvZiBkYXRhLiBUaGlzIHNob3VsZFxuICAgICAgICAvLyByZWFsbHkgb25seSBuZWVkIHRvIGxvb3Agb25jZSBmb3IgaSA9IDAgYnV0IGxvb3AganVzdFxuICAgICAgICAvLyBpbiBjYXNlLlxuICAgICAgICBmb3IgKGxldCBpID0gcGFyZW50RWxlbWVudC5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5jaGlsZHJlbltpXS5kZXRhY2goKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHZlcnRpY2FsQ29sdW1uUGFyZW50KTtcblxuICAgICAgICB0aGlzLmFwcGVuZEVsZW1lbnRzVG9Db2x1bW5zKHZlcnRpY2FsQ29sdW1uUGFyZW50LCByZWdpb25FbGVtZW50cywgc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwZW5kRWxlbWVudHNUb0NvbHVtbnModmVydGljYWxDb2x1bW5QYXJlbnQ6IEhUTUxEaXZFbGVtZW50LCByZWdpb25FbGVtZW50czogRE9NT2JqZWN0W10sIHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKSB7XG5cbiAgICAgICAgdGhpcy5kb21MaXN0LmZvckVhY2goKGVsOiBET01PYmplY3QsIGluZGV4OiBudW1iZXIpID0+IHsgXG5cbiAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBhdHRlbXB0IHRvIHVwZGF0ZSB0aGUgZWxlbWVudFJlbmRlcmVkSGVpZ2h0IGlmIGl0IGlzIDAgYW5kIGlmIGl0IGlzIG5vdCBhbiB1bnJlbmRlcmVkIGVsZW1lbnQgc3VjaCBhcyBhIGVuZHJlZ2lvbiB0YWcuXG4gICAgICAgICAgICBpZihlbC5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPT09IDAgJiZcbiAgICAgICAgICAgICAgICBlbC50YWcgIT09IERPTU9iamVjdFRhZy5jb2x1bW5CcmVhayAmJlxuICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLmVuZFJlZ2lvbiAmJlxuICAgICAgICAgICAgICAgIGVsLnRhZyAhPT0gRE9NT2JqZWN0VGFnLnJlZ2lvblNldHRpbmdzICYmXG4gICAgICAgICAgICAgICAgZWwudGFnICE9PSBET01PYmplY3RUYWcuc3RhcnRSZWdpb24pIHtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBlbGVtZW50IHRvIHJlbmRlcmVkIGRpdiBzbyB3ZSBjYW4gZXh0cmFjdCB0aGUgcmVuZGVyZWQgaGVpZ2h0LlxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ29sdW1uUGFyZW50LmFwcGVuZENoaWxkKGVsLm9yaWdpbmFsRWxlbWVudClcbiAgICAgICAgICAgICAgICBlbC5lbGVtZW50UmVuZGVyZWRIZWlnaHQgPSBlbC5vcmlnaW5hbEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICAgICAgdmVydGljYWxDb2x1bW5QYXJlbnQucmVtb3ZlQ2hpbGQoZWwub3JpZ2luYWxFbGVtZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGxldCBtYXhDb2x1bW5Db250ZW50SGVpZ2h0ID0gc2V0dGluZ3MuY29sdW1uSGVpZ2h0LnNpemVWYWx1ZVxuXG4gICAgICAgIGxldCBjb2x1bW5JbmRleCA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50Q29sdW1uSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IGRpdkNvdW50ID0gMTtcbiAgICAgICAgbGV0IGNvbERpdnNDYWxsYmFjayA9IChzZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncywgbXVsdGlDb2x1bW5QYXJlbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2x1bW5Db250ZW50RGl2cyhzZXR0aW5ncywgbXVsdGlDb2x1bW5QYXJlbnQpO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgY29sdW1ucyA9IGdldEZvcm1hdHRlZENvbHVtbkRpdnMoc2V0dGluZ3MsIHZlcnRpY2FsQ29sdW1uUGFyZW50LCBjb2xEaXZzQ2FsbGJhY2ssIGRpdkNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWdpb25FbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0udGFnID09PSBET01PYmplY3RUYWcubm9uZSB8fFxuICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLnRhZyA9PT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKSB7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBIZXJlIHdlIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3dhcCB0byB0aGUgbmV4dCBjb2x1bW4gZm9yIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHVzZXIgd2FudHMgdG8ga2VlcCBoZWFkaW5ncyB3aXRoIHRoZSBjb250ZW50IGJlbG93IGl0IHdlIGFsc28gbWFrZSBzdXJlXG4gICAgICAgICAgICAgICAgICogdGhhdCB0aGUgbGFzdCBpdGVtIGluIGEgY29sdW1uIGlzIG5vdCBhIGhlYWRlciBlbGVtZW50IGJ5IHVzaW5nIHRoZSBoZWFkZXIgYW5kXG4gICAgICAgICAgICAgICAgICogdGhlIG5leHQgZWxlbWVudCdzIGhlaWdodCBhcyB0aGUgaGVpZ2h0IHZhbHVlLiBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZihoYXNIZWFkZXIocmVnaW9uRWxlbWVudHNbaV0ub3JpZ2luYWxFbGVtZW50KSA9PT0gdHJ1ZSkgeyAvLyBUT0RPOiBBZGQgdGhpcyBhcyBzZWxlY3RhYmxlIG9wdGlvbi5cblxuICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyQW5kTmV4dEVsZW1lbnRIZWlnaHQgPSByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50UmVuZGVyZWRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmKGkgPCByZWdpb25FbGVtZW50cy5sZW5ndGggLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckFuZE5leHRFbGVtZW50SGVpZ2h0ICs9IHJlZ2lvbkVsZW1lbnRzW2kgKyAxXS5lbGVtZW50UmVuZGVyZWRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjaGVja1Nob3VsZFN3aXRjaENvbHVtbnMoaGVhZGVyQW5kTmV4dEVsZW1lbnRIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjaGVja1Nob3VsZFN3aXRjaENvbHVtbnMocmVnaW9uRWxlbWVudHNbaV0uZWxlbWVudFJlbmRlcmVkSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudENvbHVtbkhlaWdodCArPSByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50UmVuZGVyZWRIZWlnaHRcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdlIHN0b3JlIHRoZSBlbGVtZW50cyBpbiBhIHdyYXBwZXIgY29udGFpbmVyIHVudGlsIHdlIGRldGVybWluZSBpZiB3ZSB3YW50IHRvIFxuICAgICAgICAgICAgICAgICAqIHVzZSB0aGUgb3JpZ2luYWwgZWxlbWVudCBvciBhIGNsb25lIG9mIHRoZSBlbGVtZW50LiBUaGlzIGhlbHBzIHVzIGJ5IGFsbG93aW5nIFxuICAgICAgICAgICAgICAgICAqIHVzIHRvIGNyZWF0ZSBhIHZpc3VhbCBvbmx5IGNsb25lIHdoaWxlIHRoZSB1cGRhdGUgbG9vcCBtb3ZlcyB0aGUgb3JpZ2luYWwgZWxlbWVudCBcbiAgICAgICAgICAgICAgICAgKiBpbnRvIHRoZSBjb2x1bW5zLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBNdWx0aUNvbHVtbkxheW91dENTUy5Db2x1bW5EdWFsRWxlbWVudENvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZWdpb25FbGVtZW50c1tpXS5lbGVtZW50Q29udGFpbmVyID0gZWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmKGNvbHVtbk92ZXJmbG93U3RhdGUoY29sdW1uSW5kZXgsIHNldHRpbmdzKSA9PT0gQ29udGVudE92ZXJmbG93VHlwZS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dIaWRkZW5fWClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93QXV0b1Njcm9sbF9YKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgYWxpZ25tZW50ID0gY29sdW1uQWxpZ25tZW50U3RhdGUoY29sdW1uSW5kZXgsIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBpZihhbGlnbm1lbnQgPT09IEFsaWdubWVudFR5cGUuY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQWxpZ25tZW50Q2VudGVyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhbGlnbm1lbnQgPT09IEFsaWdubWVudFR5cGUucmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhNdWx0aUNvbHVtbkxheW91dENTUy5BbGlnbm1lbnRSaWdodClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5MYXlvdXRDU1MuQWxpZ25tZW50TGVmdClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgY2xvbmVkRWxlbWVudCA9IHJlZ2lvbkVsZW1lbnRzW2ldLmNsb25lZEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYocmVnaW9uRWxlbWVudHNbaV0uY2xvbmVkRWxlbWVudCA9PT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZEVsZW1lbnQgPSByZWdpb25FbGVtZW50c1tpXS5vcmlnaW5hbEVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGluZ0NvbGxhcHNlRWxlbWVudCA9IGdldEhlYWRpbmdDb2xsYXBzZUVsZW1lbnQoY2xvbmVkRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGhlYWRpbmdDb2xsYXBzZUVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmVtb3ZlcyB0aGUgY29sbGFwc2UgYXJyb3cgZnJvbSB0aGUgdmlldyBpZiBpdCBleGlzdHMuXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nQ29sbGFwc2VFbGVtZW50LmRldGFjaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbkVsZW1lbnRzW2ldLmNsb25lZEVsZW1lbnQgPSBjbG9uZWRFbGVtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNsb25lZEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lvbkVsZW1lbnRzW2ldIGluc3RhbmNlb2YgVGFza0xpc3RET01PYmplY3QpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpeENsb25lZENoZWNrTGlzdEJ1dHRvbnMocmVnaW9uRWxlbWVudHNbaV0gYXMgVGFza0xpc3RET01PYmplY3QsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBudWxsICYmIFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zW2NvbHVtbkluZGV4XSAmJiBcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uRWxlbWVudHNbaV0udGFnICE9PSBET01PYmplY3RUYWcuY29sdW1uQnJlYWspIHtcblxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zW2NvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uRWxlbWVudHNbaV0uZWxlbWVudFJlbmRlcmVkSGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHRhZyBpcyBhIGNvbHVtbiBicmVhayB3ZSB1cGRhdGUgdGhlIGNvbHVtbiBpbmRleCBhZnRlclxuICAgICAgICAgICAgICAgICAqIGFwcGVuZGluZyB0aGUgaXRlbSB0byB0aGUgY29sdW1uIGRpdi4gVGhpcyBrZWVwcyB0aGUgbWFpbiBET01cbiAgICAgICAgICAgICAgICAgKiBjbGVhbmVyIGJ5IHJlbW92aW5nIG90aGVyIGl0ZW1zIGFuZCBwbGFjaW5nIHRoZW0gYWxsIHdpdGhpblxuICAgICAgICAgICAgICAgICAqIGEgcmVnaW9uIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocmVnaW9uRWxlbWVudHNbaV0udGFnID09PSBET01PYmplY3RUYWcuY29sdW1uQnJlYWspIHtcblxuICAgICAgICAgICAgICAgICAgICBjaGVja0NyZWF0ZU5ld0NvbHVtbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbHVtbkhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tTaG91bGRTd2l0Y2hDb2x1bW5zKG5leHRFbGVtZW50SGVpZ2h0OiBudW1iZXIpIHtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb2x1bW5IZWlnaHQgKyBuZXh0RWxlbWVudEhlaWdodCA8IG1heENvbHVtbkNvbnRlbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoZWNrQ3JlYXRlTmV3Q29sdW1ucygpO1xuICAgICAgICAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgIGN1cnJlbnRDb2x1bW5IZWlnaHQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDcmVhdGVOZXdDb2x1bW5zKCkge1xuICAgICAgICAgICAgaWYgKChjb2x1bW5JbmRleCArIDEpID49IGNvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGl2Q291bnQrKztcbiAgICAgICAgICAgICAgICBjb2x1bW5zID0gY29sdW1ucy5jb25jYXQoZ2V0Rm9ybWF0dGVkQ29sdW1uRGl2cyhzZXR0aW5ncywgdmVydGljYWxDb2x1bW5QYXJlbnQsIGNvbERpdnNDYWxsYmFjaywgZGl2Q291bnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkQ29sdW1uRGl2cyhcbiAgICBzZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncywgXG4gICAgdmVydGljYWxDb2x1bW5QYXJlbnQ6IEhUTUxEaXZFbGVtZW50LCBcbiAgICBnZXRDb2x1bW5Db250ZW50RGl2czogKHNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudDogSFRNTERpdkVsZW1lbnQpID0+IEhUTUxEaXZFbGVtZW50W10sXG4gICAgZGl2Q291bnQ6IG51bWJlcikge1xuICAgICAgICBcbiAgICBsZXQgbXVsdGlDb2x1bW5QYXJlbnQgPSB2ZXJ0aWNhbENvbHVtblBhcmVudC5jcmVhdGVEaXYoe1xuICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZ2lvbkNvbHVtbkNvbnRhaW5lckRpdn0gXFxcbiAgICAgICAgICAgICAgJHtNdWx0aUNvbHVtbkxheW91dENTUy5Db250ZW50T3ZlcmZsb3dBdXRvU2Nyb2xsX1h9IFxcXG4gICAgICAgICAgICAgICR7TXVsdGlDb2x1bW5MYXlvdXRDU1MuQ29udGVudE92ZXJmbG93SGlkZGVuX1l9O1xuICAgICAgICAgICAgICBgXG4gICAgfSk7XG4gICAgaWYoZGl2Q291bnQgPiAxKSB7XG4gICAgICAgIG11bHRpQ29sdW1uUGFyZW50LmFkZENsYXNzKGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZmxvd0NvbnRhaW5lckRpdn1gKTtcbiAgICB9XG5cbiAgICBsZXQgY29sdW1uRGl2cyA9IGdldENvbHVtbkNvbnRlbnREaXZzKHNldHRpbmdzLCBtdWx0aUNvbHVtblBhcmVudCk7XG4gICAgaWYgKHNldHRpbmdzLmRyYXdTaGFkb3cgPT09IHRydWUpIHtcbiAgICAgICAgbXVsdGlDb2x1bW5QYXJlbnQuYWRkQ2xhc3MoTXVsdGlDb2x1bW5TdHlsZUNTUy5SZWdpb25TaGFkb3cpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbkRpdnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNob3VsZERyYXdDb2x1bW5Cb3JkZXIoaSwgc2V0dGluZ3MpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb2x1bW5EaXZzW2ldLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uQm9yZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5kcmF3U2hhZG93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb2x1bW5EaXZzW2ldLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuQ29sdW1uU2hhZG93KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2x1bW5EaXZzXG59IiwiLyoqXG4gKiBGaWxlOiAvc3JjL2RvbV9tYW5hZ2VyL3JlZ2lvbmFsX21hbmFnZXJzL3JlZ2lvbk1hbmFnZXJDb250YWluZXIudHMgICAgICAgICAgKlxuICogQ3JlYXRlZCBEYXRlOiBTdW5kYXksIE1heSAyMm5kIDIwMjIsIDc6NTAgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDIyIENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqL1xuXG5pbXBvcnQgeyBwYXJzZUNvbHVtblNldHRpbmdzLCBwYXJzZVNpbmdsZUNvbHVtblNldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy9zZXR0aW5nc1BhcnNlclwiO1xuaW1wb3J0IHsgRE9NT2JqZWN0IH0gZnJvbSAnLi4vZG9tT2JqZWN0JztcbmltcG9ydCB7IE11bHRpQ29sdW1uU2V0dGluZ3MsIGdldERlZmF1bHRNdWx0aUNvbHVtblNldHRpbmdzIH0gZnJvbSBcIi4uLy4uL3JlZ2lvblNldHRpbmdzXCI7XG5pbXBvcnQgeyBGaWxlRE9NTWFuYWdlciB9IGZyb20gJy4uL2RvbU1hbmFnZXInO1xuaW1wb3J0IHsgU3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXIgYXMgU3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXIgfSBmcm9tICcuL3N0YW5kYXJkTXVsdGlDb2x1bW5SZWdpb25NYW5hZ2VyJztcbmltcG9ydCB7IFNpbmdsZUNvbHVtblJlZ2lvbk1hbmFnZXIgfSBmcm9tIFwiLi9zaW5nbGVDb2x1bW5SZWdpb25NYW5hZ2VyXCI7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyIH0gZnJvbSBcIi4vcmVnaW9uTWFuYWdlclwiO1xuaW1wb3J0IHsgQXV0b0xheW91dFJlZ2lvbk1hbmFnZXIgfSBmcm9tICcuL2F1dG9MYXlvdXRSZWdpb25NYW5hZ2VyJztcbmltcG9ydCB7IFJlZmxvd1JlZ2lvbk1hbmFnZXIgfSBmcm9tIFwiLi9yZWZsb3dSZWdpb25NYW5hZ2VyXCI7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBhY3RzIGFzIGFuIGFic3RyYWN0aW9uIGZvciB0aGUgYWN0dWFsIHJlZ2lvbmFsIG1hbmFnZXIuIEl0IGlzIHVzZWQgdG8gdXBkYXRlIHRoZVxuICogc3ViY2xhc3Mgb2YgUmVnaW9uYWxNYW5hZ2VyIGRlcGVuZGluZyBvbiB1c2VyIHByZWZlcmVuY2VzIHRvIG1ha2UgcmVuZGVyaW5nIG1vcmUgc2ltcGxpZmllZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlZ2lvbk1hbmFnZXJDb250YWluZXIge1xuXG4gICAgcHJvdGVjdGVkIHJlZ2lvbjogUmVnaW9uTWFuYWdlcjtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnRGaWxlTWFuYWdlcjogRmlsZURPTU1hbmFnZXIsIHJlZ2lvbktleTogc3RyaW5nLCByb290RWxlbWVudDogSFRNTEVsZW1lbnQsIHJlZ2lvblBhcmVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5yZWdpb24gPSBuZXcgU3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXIoY3JlYXRlRGVmYXVsdFJlZ2lvbk1hbmFnZXJEYXRhKHJlZ2lvblBhcmVudCwgcGFyZW50RmlsZU1hbmFnZXIsIHJlZ2lvbktleSwgcm9vdEVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmVnaW9uKCk6IFJlZ2lvbk1hbmFnZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpb247XG4gICAgfVxuXG4gICAgcHVibGljIHNldFJlZ2lvblNldHRpbmdzKHNldHRpbmdzVGV4dDogc3RyaW5nKTogUmVnaW9uTWFuYWdlciB7XG5cbiAgICAgICAgbGV0IHJlZ2lvbmFsU2V0dGluZ3MgPSBwYXJzZUNvbHVtblNldHRpbmdzKHNldHRpbmdzVGV4dCk7XG4gICAgICAgIGlmIChyZWdpb25hbFNldHRpbmdzLm51bWJlck9mQ29sdW1ucyA9PT0gMSkge1xuXG4gICAgICAgICAgICByZWdpb25hbFNldHRpbmdzID0gcGFyc2VTaW5nbGVDb2x1bW5TZXR0aW5ncyhzZXR0aW5nc1RleHQsIHJlZ2lvbmFsU2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNldFJlZ2lvblBhcnNlZFNldHRpbmdzKHJlZ2lvbmFsU2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRSZWdpb25QYXJzZWRTZXR0aW5ncyhyZWdpb25hbFNldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzKTogUmVnaW9uTWFuYWdlciB7XG5cbiAgICAgICAgdGhpcy5yZWdpb24uc2V0UmVnaW9uYWxTZXR0aW5ncyhyZWdpb25hbFNldHRpbmdzKTtcblxuICAgICAgICBpZiAocmVnaW9uYWxTZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgPT09IDEpIHtcblxuICAgICAgICAgICAgaWYodGhpcy5yZWdpb24gaW5zdGFuY2VvZiBTaW5nbGVDb2x1bW5SZWdpb25NYW5hZ2VyID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIkNvbnZlcnRpbmcgcmVnaW9uIHRvIHNpbmdsZSBjb2x1bW4uXCIpXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0VG9TaW5nbGVDb2x1bW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmKHJlZ2lvbmFsU2V0dGluZ3MuYXV0b0xheW91dCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZih0aGlzLnJlZ2lvbiBpbnN0YW5jZW9mIEF1dG9MYXlvdXRSZWdpb25NYW5hZ2VyID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5kZWJ1ZyhcIkNvbnZlcnRpbmcgcmVnaW9uIHRvIGF1dG8gbGF5b3V0LlwiKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVydFRvQXV0b0xheW91dCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihyZWdpb25hbFNldHRpbmdzLmZ1bGxEb2NSZWZsb3cgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmKHRoaXMucmVnaW9uIGluc3RhbmNlb2YgUmVmbG93UmVnaW9uTWFuYWdlciA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJDb252ZXJ0aW5nIHJlZ2lvbiB0byBhdXRvIGxheW91dC5cIilcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRUb0RvY1JlZmxvdygpXG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlZ2lvbmFsU2V0dGluZ3MubnVtYmVyT2ZDb2x1bW5zID49IDIpIHtcblxuICAgICAgICAgICAgaWYodGhpcy5yZWdpb24gaW5zdGFuY2VvZiBTdGFuZGFyZE11bHRpQ29sdW1uUmVnaW9uTWFuYWdlciA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcoXCJDb252ZXJ0aW5nIHJlZ2lvbiB0byBzdGFuZGFyZCBtdWx0aS1jb2x1bW5cIilcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRUb1N0YW5kYXJkTXVsdGlDb2x1bW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnZlcnRUb1NpbmdsZUNvbHVtbigpOiBTaW5nbGVDb2x1bW5SZWdpb25NYW5hZ2VyIHtcblxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMucmVnaW9uLmdldFJlZ2lvbkRhdGEoKTtcbiAgICAgICAgdGhpcy5yZWdpb24gPSBuZXcgU2luZ2xlQ29sdW1uUmVnaW9uTWFuYWdlcihkYXRhKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpb24gYXMgU2luZ2xlQ29sdW1uUmVnaW9uTWFuYWdlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbnZlcnRUb1N0YW5kYXJkTXVsdGlDb2x1bW4oKTogU3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXIge1xuXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5yZWdpb24uZ2V0UmVnaW9uRGF0YSgpO1xuICAgICAgICB0aGlzLnJlZ2lvbiA9IG5ldyBTdGFuZGFyZE11bHRpQ29sdW1uUmVnaW9uTWFuYWdlcihkYXRhKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpb24gYXMgU3RhbmRhcmRNdWx0aUNvbHVtblJlZ2lvbk1hbmFnZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0VG9BdXRvTGF5b3V0KCk6IEF1dG9MYXlvdXRSZWdpb25NYW5hZ2VyIHtcblxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMucmVnaW9uLmdldFJlZ2lvbkRhdGEoKTtcbiAgICAgICAgdGhpcy5yZWdpb24gPSBuZXcgQXV0b0xheW91dFJlZ2lvbk1hbmFnZXIoZGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaW9uIGFzIEF1dG9MYXlvdXRSZWdpb25NYW5hZ2VyO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29udmVydFRvRG9jUmVmbG93KCk6IFJlZmxvd1JlZ2lvbk1hbmFnZXIge1xuXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5yZWdpb24uZ2V0UmVnaW9uRGF0YSgpO1xuICAgICAgICB0aGlzLnJlZ2lvbiA9IG5ldyBSZWZsb3dSZWdpb25NYW5hZ2VyKGRhdGEpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lvbiBhcyBSZWZsb3dSZWdpb25NYW5hZ2VyO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdFJlZ2lvbk1hbmFnZXJEYXRhKHJlZ2lvblBhcmVudDogSFRNTEVsZW1lbnQsIGZpbGVNYW5hZ2VyOiBGaWxlRE9NTWFuYWdlciwgcmVnaW9uS2V5OiBzdHJpbmcsIHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudCk6IFJlZ2lvbk1hbmFnZXJEYXRhIHtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGRvbUxpc3Q6IFtdLFxuICAgICAgICBkb21PYmplY3RNYXA6IG5ldyBNYXAoKSxcbiAgICAgICAgcmVnaW9uUGFyZW50OiByZWdpb25QYXJlbnQsXG4gICAgICAgIGZpbGVNYW5hZ2VyOiBmaWxlTWFuYWdlcixcbiAgICAgICAgcmVnaW9uYWxTZXR0aW5nczogZ2V0RGVmYXVsdE11bHRpQ29sdW1uU2V0dGluZ3MoKSxcbiAgICAgICAgcmVnaW9uS2V5OiByZWdpb25LZXksXG4gICAgICAgIHJvb3RFbGVtZW50OiByb290RWxlbWVudFxuICAgIH07XG59XG5cbmV4cG9ydCB0eXBlIFJlZ2lvbk1hbmFnZXJEYXRhID0ge1xuICAgIGRvbUxpc3Q6IERPTU9iamVjdFtdO1xuICAgIGRvbU9iamVjdE1hcDogTWFwPHN0cmluZywgRE9NT2JqZWN0PjtcbiAgICByZWdpb25QYXJlbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgZmlsZU1hbmFnZXI6IEZpbGVET01NYW5hZ2VyO1xuICAgIHJlZ2lvbmFsU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3M7XG5cbiAgICByZWdpb25LZXk6IHN0cmluZztcbiAgICByb290RWxlbWVudDogSFRNTEVsZW1lbnQ7XG59O1xuIiwiLypcbiAqIEZpbGU6IG11bHRpLWNvbHVtbi1tYXJrZG93bi9zcmMvZG9tTWFuYWdlci50c1xuICogQ3JlYXRlZCBEYXRlOiBTYXR1cmRheSwgSmFudWFyeSAzMHRoIDIwMjIsIDM6MTY6MzIgcG1cbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvblxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvblxuICovXG5cbmltcG9ydCB7IFJlZ2lvbk1hbmFnZXIgfSBmcm9tIFwiLi9yZWdpb25hbF9tYW5hZ2Vycy9yZWdpb25NYW5hZ2VyXCI7XG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyQ29udGFpbmVyIH0gZnJvbSBcIi4vcmVnaW9uYWxfbWFuYWdlcnMvcmVnaW9uTWFuYWdlckNvbnRhaW5lclwiO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyB0aGUgZ2xvYmFsIG1hbmFnZXJzIGtlZXBpbmcgdHJhY2sgb2YgYWxsIG9wZW4gZmlsZXMgdGhhdFxuICogY29udGFpbiBNQ00tUmVnaW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEdsb2JhbERPTU1hbmFnZXIge1xuICAgIG1hbmFnZXJzOiBNYXA8c3RyaW5nLCBGaWxlRE9NTWFuYWdlcj47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VycyA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRmlsZU1hbmFnZXJDYWxsYmFjayhrZXk6IHN0cmluZykge1xuICAgICAgICBpZih0aGlzLm1hbmFnZXJzLmhhcyhrZXkpID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZpbGVNYW5hZ2VyKGtleTogc3RyaW5nKSB7XG5cbiAgICAgICAgbGV0IGZpbGVNYW5hZ2VyID0gbnVsbDtcbiAgICAgICAgaWYodGhpcy5tYW5hZ2Vycy5oYXMoa2V5KSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZmlsZU1hbmFnZXIgPSB0aGlzLm1hbmFnZXJzLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZmlsZU1hbmFnZXIgPSBjcmVhdGVGaWxlRE9NTWFuYWdlcih0aGlzLCBrZXkpO1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2Vycy5zZXQoa2V5LCBmaWxlTWFuYWdlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsZU1hbmFnZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFsbEZpbGVNYW5hZ2VycygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5tYW5hZ2Vycy52YWx1ZXMoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBGaWxlRE9NTWFuYWdlciA9IHtcbiAgICByZWdpb25NYXA6IE1hcDxzdHJpbmcsIFJlZ2lvbk1hbmFnZXJDb250YWluZXI+LFxuICAgIGhhc1N0YXJ0VGFnOiBib29sZWFuLFxuICAgIGNyZWF0ZVJlZ2lvbmFsTWFuYWdlcjogKHJlZ2lvbktleTogc3RyaW5nLCByb290RWxlbWVudDogSFRNTEVsZW1lbnQsIGVycm9yRWxlbWVudDogSFRNTEVsZW1lbnQsIHJlbmRlclJlZ2lvbkVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiBSZWdpb25NYW5hZ2VyXG4gICAgZ2V0UmVnaW9uYWxDb250YWluZXI6IChyZWdpb25LZXk6IHN0cmluZykgPT4gUmVnaW9uTWFuYWdlckNvbnRhaW5lciB8IG51bGwsXG4gICAgZ2V0QWxsUmVnaW9uYWxNYW5hZ2VyczogKCkgPT4gUmVnaW9uTWFuYWdlcltdLFxuICAgIHJlbW92ZVJlZ2lvbjogKHJlZ2lvbktleTogc3RyaW5nKSA9PiB2b2lkLFxuICAgIHNldEhhc1N0YXJ0VGFnOiAoKSA9PiB2b2lkLFxuICAgIGdldEhhc1N0YXJ0VGFnOiAoKSA9PiBib29sZWFuLFxuICAgIGdldE51bWJlck9mUmVnaW9uczogKCkgPT4gbnVtYmVyLFxuICAgIGNoZWNrS2V5RXhpc3RzOiAoY2hlY2tLZXk6IHN0cmluZykgPT4gYm9vbGVhblxufVxuZnVuY3Rpb24gY3JlYXRlRmlsZURPTU1hbmFnZXIocGFyZW50TWFuYWdlcjogR2xvYmFsRE9NTWFuYWdlciwgZmlsZUtleTogc3RyaW5nKTogRmlsZURPTU1hbmFnZXIge1xuICAgIFxuICAgIGxldCByZWdpb25NYXA6IE1hcDxzdHJpbmcsIFJlZ2lvbk1hbmFnZXJDb250YWluZXI+ID0gbmV3IE1hcCgpO1xuICAgIGxldCBoYXNTdGFydFRhZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlUmVnaW9uKHJlZ2lvbktleTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICAgICAgbGV0IHJlZ2lvbkNvbnRhaW5lciA9IHJlZ2lvbk1hcC5nZXQocmVnaW9uS2V5KTtcbiAgICAgICAgaWYocmVnaW9uQ29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZWdpb25hbE1hbmFnZXIgPSByZWdpb25Db250YWluZXIuZ2V0UmVnaW9uKCk7XG4gICAgICAgIHJlZ2lvbmFsTWFuYWdlci5kaXNwbGF5T3JpZ2luYWxFbGVtZW50cygpO1xuXG4gICAgICAgIHJlZ2lvbk1hcC5kZWxldGUocmVnaW9uS2V5KTtcbiAgICAgICAgXG4gICAgICAgIGlmKHJlZ2lvbk1hcC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBwYXJlbnRNYW5hZ2VyLnJlbW92ZUZpbGVNYW5hZ2VyQ2FsbGJhY2soZmlsZUtleSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWdpb25hbE1hbmFnZXIocmVnaW9uS2V5OiBzdHJpbmcsIHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudCwgZXJyb3JFbGVtZW50OiBIVE1MRWxlbWVudCwgcmVuZGVyUmVnaW9uRWxlbWVudDogSFRNTEVsZW1lbnQpOiBSZWdpb25NYW5hZ2VyIHtcblxuICAgICAgICAvL1RPRE86IFVzZSB0aGUgZXJyb3IgZWxlbWVudCB3aGVuZXZlciB0aGVyZSBpcyBhbiBlcnJvci5cblxuICAgICAgICBsZXQgcmVnb25hbENvbnRhaW5lciA9IG5ldyBSZWdpb25NYW5hZ2VyQ29udGFpbmVyKHRoaXMsIHJlZ2lvbktleSwgcm9vdEVsZW1lbnQsIHJlbmRlclJlZ2lvbkVsZW1lbnQpO1xuICAgICAgICByZWdpb25NYXAuc2V0KHJlZ2lvbktleSwgcmVnb25hbENvbnRhaW5lcik7XG4gICAgICAgIHJldHVybiByZWdvbmFsQ29udGFpbmVyLmdldFJlZ2lvbigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJlZ2lvbmFsQ29udGFpbmVyKHJlZ2lvbktleTogc3RyaW5nKTogUmVnaW9uTWFuYWdlckNvbnRhaW5lciB8IG51bGwge1xuXG4gICAgICAgIGxldCByZWdvbmFsTWFuYWdlciA9IG51bGw7XG4gICAgICAgIGlmKHJlZ2lvbk1hcC5oYXMocmVnaW9uS2V5KSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmVnb25hbE1hbmFnZXIgPSByZWdpb25NYXAuZ2V0KHJlZ2lvbktleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnb25hbE1hbmFnZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QWxsUmVnaW9uYWxNYW5hZ2VycygpOiBSZWdpb25NYW5hZ2VyW10ge1xuXG4gICAgICAgIGxldCBjb250YWluZXJzID0gQXJyYXkuZnJvbShyZWdpb25NYXAudmFsdWVzKCkpXG4gICAgICAgIGxldCByZWdpb25zOiBSZWdpb25NYW5hZ2VyW10gPSBjb250YWluZXJzLm1hcCgoY3VycikgPT4geyByZXR1cm4gY3Vyci5nZXRSZWdpb24oKSB9KTtcbiAgICAgICAgcmV0dXJuIHJlZ2lvbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0SGFzU3RhcnRUYWcoKSB7XG4gICAgICAgIGhhc1N0YXJ0VGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRIYXNTdGFydFRhZygpIHtcbiAgICAgICAgcmV0dXJuIGhhc1N0YXJ0VGFnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldE51bWJlck9mUmVnaW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lvbk1hcC5zaXplXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tLZXlFeGlzdHMoY2hlY2tLZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVnaW9uTWFwLmhhcyhjaGVja0tleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmVnaW9uTWFwOiByZWdpb25NYXAsIFxuICAgICAgICBoYXNTdGFydFRhZzogaGFzU3RhcnRUYWcsICBcbiAgICAgICAgY3JlYXRlUmVnaW9uYWxNYW5hZ2VyOiBjcmVhdGVSZWdpb25hbE1hbmFnZXIsIFxuICAgICAgICBnZXRSZWdpb25hbENvbnRhaW5lcjogZ2V0UmVnaW9uYWxDb250YWluZXIsXG4gICAgICAgIGdldEFsbFJlZ2lvbmFsTWFuYWdlcnM6IGdldEFsbFJlZ2lvbmFsTWFuYWdlcnMsXG4gICAgICAgIHJlbW92ZVJlZ2lvbjogcmVtb3ZlUmVnaW9uLCBcbiAgICAgICAgc2V0SGFzU3RhcnRUYWc6IHNldEhhc1N0YXJ0VGFnLCBcbiAgICAgICAgZ2V0SGFzU3RhcnRUYWc6IGdldEhhc1N0YXJ0VGFnLFxuICAgICAgICBnZXROdW1iZXJPZlJlZ2lvbnM6IGdldE51bWJlck9mUmVnaW9ucyxcbiAgICAgICAgY2hlY2tLZXlFeGlzdHM6IGNoZWNrS2V5RXhpc3RzXG4gICAgfVxufSIsIi8qXG4gKiBGaWxlbmFtZTogbXVsdGktY29sdW1uLW1hcmtkb3duL3NyYy9saXZlX3ByZXZpZXcvTXVsdGlDb2x1bW5NYXJrZG93bl9XaWRnZXQudHNcbiAqIENyZWF0ZWQgRGF0ZTogVHVlc2RheSwgQXVndXN0IDE2dGggMjAyMiwgNDozODo0MyBwbVxuICogQXV0aG9yOiBDYW1lcm9uIFJvYmluc29uXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAyMiBDYW1lcm9uIFJvYmluc29uXG4gKi9cblxuaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJDaGlsZCwgTWFya2Rvd25SZW5kZXJlciwgVEZpbGUsIFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFdpZGdldFR5cGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE11bHRpQ29sdW1uU2V0dGluZ3MsIE11bHRpQ29sdW1uU2V0dGluZ3MgfSBmcm9tIFwiLi4vcmVnaW9uU2V0dGluZ3NcIjtcbmltcG9ydCB7IHBhcnNlU2luZ2xlQ29sdW1uU2V0dGluZ3MgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NldHRpbmdzUGFyc2VyXCI7XG5pbXBvcnQgeyBTdGFuZGFyZE11bHRpQ29sdW1uUmVnaW9uTWFuYWdlciB9IGZyb20gXCIuLi9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9zdGFuZGFyZE11bHRpQ29sdW1uUmVnaW9uTWFuYWdlclwiO1xuaW1wb3J0IHsgUmVnaW9uTWFuYWdlckRhdGEgfSBmcm9tIFwiLi4vZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvcmVnaW9uTWFuYWdlckNvbnRhaW5lclwiO1xuaW1wb3J0IHsgZ2V0VUlEIH0gZnJvbSBcIi4uL3V0aWxpdGllcy91dGlsc1wiO1xuaW1wb3J0IHsgRE9NT2JqZWN0IH0gZnJvbSBcIi4uL2RvbV9tYW5hZ2VyL2RvbU9iamVjdFwiO1xuaW1wb3J0IHsgUmVnaW9uTWFuYWdlciB9IGZyb20gXCIuLi9kb21fbWFuYWdlci9yZWdpb25hbF9tYW5hZ2Vycy9yZWdpb25NYW5hZ2VyXCI7XG5pbXBvcnQgeyBTaW5nbGVDb2x1bW5SZWdpb25NYW5hZ2VyIH0gZnJvbSBcIi4uL2RvbV9tYW5hZ2VyL3JlZ2lvbmFsX21hbmFnZXJzL3NpbmdsZUNvbHVtblJlZ2lvbk1hbmFnZXJcIjtcbmltcG9ydCB7IEF1dG9MYXlvdXRSZWdpb25NYW5hZ2VyIH0gZnJvbSBcIi4uL2RvbV9tYW5hZ2VyL3JlZ2lvbmFsX21hbmFnZXJzL2F1dG9MYXlvdXRSZWdpb25NYW5hZ2VyXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtblN0eWxlQ1NTIH0gZnJvbSBcInNyYy91dGlsaXRpZXMvY3NzRGVmaW5pdGlvbnNcIjtcbmltcG9ydCB7IGlzQnV0dG9uUGx1Z2luX0Nyb3NzQ29tcGF0aWJpbHR5IH0gZnJvbSBcInNyYy91dGlsaXRpZXMvZWxlbWVudFJlbmRlclR5cGVQYXJzZXJcIjtcblxuZXhwb3J0IGNsYXNzIE11bHRpQ29sdW1uTWFya2Rvd25fTGl2ZVByZXZpZXdfV2lkZ2V0IGV4dGVuZHMgV2lkZ2V0VHlwZSB7XG5cbiAgICBjb250ZW50RGF0YTogc3RyaW5nO1xuICAgIHRlbXBQYXJlbnQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIGRvbUxpc3Q6IERPTU9iamVjdFtdID0gW107XG4gICAgc2V0dGluZ3NUZXh0OiBzdHJpbmc7XG4gICAgcmVnaW9uU2V0dGluZ3M6IE11bHRpQ29sdW1uU2V0dGluZ3MgPSBnZXREZWZhdWx0TXVsdGlDb2x1bW5TZXR0aW5ncygpO1xuICAgIHJlZ2lvbk1hbmFnZXI6IFJlZ2lvbk1hbmFnZXI7XG4gICAgc291cmNlRmlsZTogVEZpbGU7XG4gICAgc291cmNlUGF0aDogc3RyaW5nID0gXCJcIjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnREYXRhOiBzdHJpbmcsIHVzZXJTZXR0aW5nczogTXVsdGlDb2x1bW5TZXR0aW5ncywgc291cmNlRmlsZTogVEZpbGUsIHNldHRpbmdzVGV4dDogc3RyaW5nID0gXCJcIikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbnRlbnREYXRhID0gY29udGVudERhdGE7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NUZXh0ID0gc2V0dGluZ3NUZXh0O1xuICAgICAgICB0aGlzLnNvdXJjZUZpbGUgPSBzb3VyY2VGaWxlO1xuICAgICAgICBpZih0aGlzLnNvdXJjZUZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlUGF0aCA9IHNvdXJjZUZpbGUucGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHVzZXJTZXR0aW5ncyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yZWdpb25TZXR0aW5ncyA9IHVzZXJTZXR0aW5ncztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbmRlciB0aGUgbWFya2Rvd24gY29udGVudCB0byBvdXIgdGVtcCBwYXJlbnQgZWxlbWVudC5cbiAgICAgICAgdGhpcy50ZW1wUGFyZW50ID0gY3JlYXRlRGl2KCk7XG4gICAgICAgIGxldCBlbGVtZW50TWFya2Rvd25SZW5kZXJlciA9IG5ldyBNYXJrZG93blJlbmRlckNoaWxkKHRoaXMudGVtcFBhcmVudCk7XG4gICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24odGhpcy5jb250ZW50RGF0YSwgdGhpcy50ZW1wUGFyZW50LCB0aGlzLnNvdXJjZVBhdGgsIGVsZW1lbnRNYXJrZG93blJlbmRlcmVyKTtcblxuICAgICAgICAvLyB0YWtlIGFsbCBlbGVtZW50cywgaW4gb3JkZXIsIGFuZCBjcmVhdGUgb3VyIERPTSBsaXN0LlxuICAgICAgICBsZXQgYXJyID0gQXJyYXkuZnJvbSh0aGlzLnRlbXBQYXJlbnQuY2hpbGRyZW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICBsZXQgZWwgPSB0aGlzLmZpeEVsZW1lbnRSZW5kZXIoYXJyW2ldKTtcbiAgICAgICAgICAgIHRoaXMuZG9tTGlzdC5wdXNoKG5ldyBET01PYmplY3QoZWwgYXMgSFRNTEVsZW1lbnQsIFtcIlwiXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHVwIHRoZSByZWdpb24gbWFuYWdlciBkYXRhIGJlZm9yZSB0aGVuIGNyZWF0aW5nIG91ciByZWdpb24gbWFuYWdlci5cbiAgICAgICAgbGV0IHJlZ2lvbkRhdGE6IFJlZ2lvbk1hbmFnZXJEYXRhID0ge1xuICAgICAgICAgICAgZG9tTGlzdDogdGhpcy5kb21MaXN0LFxuICAgICAgICAgICAgZG9tT2JqZWN0TWFwOiBuZXcgTWFwPHN0cmluZywgRE9NT2JqZWN0PigpLFxuICAgICAgICAgICAgcmVnaW9uUGFyZW50OiBjcmVhdGVEaXYoKSxcbiAgICAgICAgICAgIGZpbGVNYW5hZ2VyOiBudWxsLFxuICAgICAgICAgICAgcmVnaW9uYWxTZXR0aW5nczogdGhpcy5yZWdpb25TZXR0aW5ncyxcbiAgICAgICAgICAgIHJlZ2lvbktleTogZ2V0VUlEKCksXG4gICAgICAgICAgICByb290RWxlbWVudDogY3JlYXRlRGl2KClcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBGaW5hbGx5IHNldHVwIHRoZSB0eXBlIG9mIHJlZ2lvbiBtYW5hZ2VyIHJlcXVpcmVkLlxuICAgICAgICBpZiAodGhpcy5yZWdpb25TZXR0aW5ncy5udW1iZXJPZkNvbHVtbnMgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaW9uU2V0dGluZ3MgPSBwYXJzZVNpbmdsZUNvbHVtblNldHRpbmdzKHRoaXMuc2V0dGluZ3NUZXh0LCB0aGlzLnJlZ2lvblNldHRpbmdzKTtcbiAgICAgICAgICAgIHRoaXMucmVnaW9uTWFuYWdlciA9IG5ldyBTaW5nbGVDb2x1bW5SZWdpb25NYW5hZ2VyKHJlZ2lvbkRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucmVnaW9uU2V0dGluZ3MuYXV0b0xheW91dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWdpb25NYW5hZ2VyID0gbmV3IEF1dG9MYXlvdXRSZWdpb25NYW5hZ2VyKHJlZ2lvbkRhdGEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWdpb25NYW5hZ2VyID0gbmV3IFN0YW5kYXJkTXVsdGlDb2x1bW5SZWdpb25NYW5hZ2VyKHJlZ2lvbkRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZml4RWxlbWVudFJlbmRlcihlbDogRWxlbWVudCk6IEVsZW1lbnQge1xuXG4gICAgICAgIGxldCBmaXhlZEVsID0gZml4SW1hZ2VSZW5kZXIoZWwsIHRoaXMuc291cmNlUGF0aCk7XG4gICAgICAgIGZpeGVkRWwgPSBmaXhQREZSZW5kZXIoZml4ZWRFbCwgdGhpcy5zb3VyY2VQYXRoKTtcbiAgICAgICAgZml4ZWRFbCA9IGZpeEZpbGVFbWJlZChmaXhlZEVsLCB0aGlzLnNvdXJjZVBhdGgpO1xuICAgICAgICBmaXhlZEVsID0gZml4VGFibGVSZW5kZXIoZml4ZWRFbCk7XG4gICAgICAgIGZpeGVkRWwgPSBmaXhVblN1cHBvcnRlZFJlbmRlcihmaXhlZEVsKTtcbiAgICAgICAgcmV0dXJuIGZpeGVkRWw7XG4gICAgfVxuXG4gICAgdG9ET00oKSB7XG4gICAgICAgIC8vIENyZWF0ZSBvdXIgZWxlbWVudCB0byBob2xkIGFsbCBvZiB0aGUgbGl2ZSBwcmV2aWV3IGVsZW1lbnRzLlxuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBcIm1jbS1jbS1wcmV2aWV3XCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZvciBzaXR1YXRpb25zIHdoZXJlIHdlIG5lZWQgdG8ga25vdyB0aGUgcmVuZGVyZWQgaGVpZ2h0LCBBdXRvTGF5b3V0LCBcbiAgICAgICAgICogdGhlIGVsZW1lbnQgbXVzdCBiZSByZW5kZXJlZCBvbnRvIHRoZSBzY3JlZW4gdG8gZ2V0IHRoZSBpbmZvLCBldmVuIGlmIFxuICAgICAgICAgKiBvbmx5IGZvciBhIG1vbWVudC4gSGVyZSB3ZSBhdHRlbXB0IHRvIGdldCBhIGxlYWYgZnJvbSB0aGUgYXBwIHNvIHdlIFxuICAgICAgICAgKiBjYW4gYnJpZWZseSBhcHBlbmQgb3VyIGVsZW1lbnQsIGNoZWNrIGFueSBkYXRhIGlmIHJlcXVpcmVkLCBhbmQgdGhlblxuICAgICAgICAgKiByZW1vdmUgaXQuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgbGVhZjogV29ya3NwYWNlTGVhZiA9IG51bGw7XG4gICAgICAgIGlmIChhcHApIHtcbiAgICAgICAgICAgIGxldCBsZWF2ZXMgPSBhcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcIm1hcmtkb3duXCIpO1xuICAgICAgICAgICAgaWYgKGxlYXZlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGVhZiA9IGxlYXZlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlZ2lvbk1hbmFnZXIpIHtcblxuICAgICAgICAgICAgaWYgKGxlYWYpIHtcbiAgICAgICAgICAgICAgICBsZWFmLnZpZXcuY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlZ2lvbk1hbmFnZXIucmVuZGVyUmVnaW9uRWxlbWVudHNUb0xpdmVQcmV2aWV3KGVsKTtcblxuICAgICAgICAgICAgaWYgKGxlYWYpIHtcbiAgICAgICAgICAgICAgICBsZWFmLnZpZXcuY29udGFpbmVyRWwucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZml4RXh0ZXJuYWxMaW5rcyhlbClcblxuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTXVsdGlDb2x1bW5NYXJrZG93bl9EZWZpbmVkU2V0dGluZ3NfTGl2ZVByZXZpZXdfV2lkZ2V0IGV4dGVuZHMgV2lkZ2V0VHlwZSB7XG5cbiAgICBjb250ZW50RGF0YTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29udGVudERhdGE6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY29udGVudERhdGEgPSBjb250ZW50RGF0YTtcbiAgICB9XG5cbiAgICB0b0RPTSgpIHtcbiAgICAgICAgLy8gQ3JlYXRlIG91ciBlbGVtZW50IHRvIGhvbGQgYWxsIG9mIHRoZSBsaXZlIHByZXZpZXcgZWxlbWVudHMuXG4gICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IFwibWNtLWNtLXNldHRpbmdzLXByZXZpZXdcIjtcblxuICAgICAgICBsZXQgbGFiZWxEaXYgPSBlbC5jcmVhdGVEaXYoKVxuICAgICAgICBsZXQgbGFiZWwgPSBsYWJlbERpdi5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgIGNsczogXCJtY20tY29sLXNldHRpbmdzLXByZXZpZXdcIlxuICAgICAgICB9KVxuICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IFwiQ29sdW1uIFNldHRpbmdzOlwiO1xuXG4gICAgICAgIGxldCBsaXN0ID0gZWwuY3JlYXRlRWwoXCJ1bFwiKVxuICAgICAgICBsZXQgbGluZXMgPSB0aGlzLmNvbnRlbnREYXRhLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gbGlzdC5jcmVhdGVFbChcImxpXCIpXG4gICAgICAgICAgICBpdGVtLnRleHRDb250ZW50ID0gbGluZXNbaV1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG59XG5cbmNvbnN0IE9CU0lESUFOX0xJVkVQUkVWSUVXX1RBQkxFX0NMQVNTRVMgPSBcImNtLWVtYmVkLWJsb2NrIG1hcmtkb3duLXJlbmRlcmVkIGNtLXRhYmxlLXdpZGdldCBzaG93LWluZGVudGF0aW9uLWd1aWRlXCJcbmZ1bmN0aW9uIGZpeFRhYmxlUmVuZGVyKGVsOiBFbGVtZW50KTogRWxlbWVudCB7XG5cbiAgICBpZihlbC50YWdOYW1lICE9PSBcIlRBQkxFXCIpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIGxldCBwYXJlbnREaXYgPSBjcmVhdGVEaXYoe1xuICAgICAgICBcImNsc1wiOiBPQlNJRElBTl9MSVZFUFJFVklFV19UQUJMRV9DTEFTU0VTXG4gICAgfSlcbiAgICBwYXJlbnREaXYuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHJldHVybiBwYXJlbnREaXY7XG59XG5cbmZ1bmN0aW9uIGZpeEZpbGVFbWJlZChlbDogRWxlbWVudCwgc291cmNlOiBzdHJpbmcpOiBFbGVtZW50IHtcblxuICAgIGxldCBlbWJlZCA9IGdldEVtYmVkKGVsKTtcbiAgICBpZihlbWJlZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgbGV0IGFsdCA9IGVtYmVkLmdldEF0dHIoXCJhbHRcIilcbiAgICBsZXQgc3JjID0gZW1iZWQuZ2V0QXR0cihcInNyY1wiKVxuICAgIGlmKHNyYyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgbGV0IGZpbGU6IFRGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3Qoc3JjLCBzb3VyY2UpO1xuICAgIGlmKGZpbGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBcbiAgICBpZihpc01ERXh0ZW5zaW9uKGZpbGUuZXh0ZW5zaW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGZvdW5kIHRoZSByZXNvdXJjZSBwYXRoIHRoZW4gd2UgdXBkYXRlIHRoZSBlbGVtZW50IHRvIGJlIGEgcHJvcGVyIFBERiByZW5kZXIuXG4gICAgbGV0IGZpeGVkRWwgPSBjcmVhdGVEaXYoe1xuICAgICAgICBjbHM6IFwiaW50ZXJuYWwtZW1iZWQgbWFya2Rvd24tZW1iZWQgaW5saW5lLWVtYmVkIGlzLWxvYWRlZFwiLFxuICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICBcInRhYmluZGV4XCI6IFwiLTFcIixcbiAgICAgICAgICAgIFwiY29udGVudGVkaXRhYmxlXCI6IFwiZmFsc2VcIlxuICAgICAgICB9XG4gICAgfSlcbiAgICBmaXhlZEVsLnNldEF0dHIoXCJhbHRcIiwgYWx0KTtcbiAgICBmaXhlZEVsLnNldEF0dHIoXCJzcmNcIiwgYGFwcDovL29ic2lkaWFuLm1kLyR7c3JjfWApXG4gICAgZml4ZWRFbC5hcHBlbmRDaGlsZChjcmVhdGVEaXYoXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiY2xzXCI6IFwiZW1iZWQtdGl0bGUgbWFya2Rvd24tZW1iZWQtdGl0bGVcIixcbiAgICAgICAgfVxuICAgICkpO1xuICAgIGxldCBjb250ZW50RWwgPSBmaXhlZEVsLmNyZWF0ZURpdih7XG4gICAgICAgIFwiY2xzXCI6IGBtYXJrZG93bi1lbWJlZC1jb250ZW50YCxcbiAgICB9KTtcbiAgICBsZXQgcGFyYWdyYXBoID0gY29udGVudEVsLmNyZWF0ZUVsKFwicFwiLCB7XG4gICAgICAgIFwiY2xzXCI6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uRXJyb3JNZXNzYWdlfSwgJHtNdWx0aUNvbHVtblN0eWxlQ1NTLlNtYWxsRm9udH1gXG4gICAgfSk7XG4gICAgcGFyYWdyYXBoLmlubmVyVGV4dCA9IFwiRmlsZSBlbWJlZHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gTGl2ZSBQcmV2aWV3LlxcblBsZWFzZSB1c2UgcmVhZGluZyBtb2RlIHRvIHZpZXcuXCJcblxuICAgIHJldHVybiBmaXhlZEVsO1xufVxuXG5mdW5jdGlvbiBmaXhQREZSZW5kZXIoZWw6IEVsZW1lbnQsIHNvdXJjZTogc3RyaW5nKTogRWxlbWVudCB7XG5cbiAgICBsZXQgZW1iZWQgPSBnZXRFbWJlZChlbCk7XG4gICAgaWYoZW1iZWQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIGxldCBhbHQgPSBlbWJlZC5nZXRBdHRyKFwiYWx0XCIpXG4gICAgbGV0IHNyYyA9IGVtYmVkLmdldEF0dHIoXCJzcmNcIilcbiAgICBpZihzcmMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIGxldCBmaWxlOiBURmlsZSA9IGFwcC5tZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHNyYywgc291cmNlKTtcbiAgICBpZihmaWxlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgXG4gICAgaWYoaXNQREZFeHRlbnNpb24oZmlsZS5leHRlbnNpb24pID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgbGV0IHJlc291cmNlUGF0aCA9IGFwcC52YXVsdC5nZXRSZXNvdXJjZVBhdGgoZmlsZSk7XG5cbiAgICAvLyBJZiB3ZSBmb3VuZCB0aGUgcmVzb3VyY2UgcGF0aCB0aGVuIHdlIHVwZGF0ZSB0aGUgZWxlbWVudCB0byBiZSBhIHByb3BlciBQREYgcmVuZGVyLlxuICAgIGxldCBmaXhlZEVsID0gY3JlYXRlRGl2KHtcbiAgICAgICAgY2xzOiBcImludGVybmFsLWVtYmVkIHBkZi1lbWJlZCBpcy1sb2FkZWRcIixcbiAgICB9KVxuICAgIGZpeGVkRWwuc2V0QXR0cihcImFsdFwiLCBhbHQpO1xuXG4gICAgbGV0IGlmcmFtZSA9IGZpeGVkRWwuY3JlYXRlRWwoXCJpZnJhbWVcIiwge1xuICAgICAgICBcImF0dHJcIjoge1xuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7XCJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmcmFtZS5zZXRBdHRyKFwic3JjXCIsIHJlc291cmNlUGF0aCk7XG4gICAgcmV0dXJuIGZpeGVkRWw7XG59XG5cbmZ1bmN0aW9uIGZpeEltYWdlUmVuZGVyKGVsOiBFbGVtZW50LCBzb3VyY2U6IHN0cmluZyk6IEVsZW1lbnQge1xuXG4gICAgbGV0IGVtYmVkID0gZ2V0RW1iZWQoZWwpO1xuICAgIGlmKGVtYmVkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICBsZXQgY3VzdG9tV2lkdGggPSBlbWJlZC5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbShcIndpZHRoXCIpXG4gICAgbGV0IGFsdCA9IGVtYmVkLmdldEF0dHIoXCJhbHRcIilcbiAgICBsZXQgc3JjID0gZW1iZWQuZ2V0QXR0cihcInNyY1wiKVxuICAgIGlmKHNyYyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuXG4gICAgbGV0IGZpbGU6IFRGaWxlID0gYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3Qoc3JjLCBzb3VyY2UpO1xuICAgIGlmKGZpbGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiB0aGUgbGluayBzb3VyY2UgaXMgbm90IGFuIGltYWdlIHdlIGRvbnQgd2FudCB0byBtYWtlIGFueSBhZGp1c3RtZW50cy5cbiAgICBpZihpc0ltYWdlRXh0ZW5zaW9uKGZpbGUuZXh0ZW5zaW9uKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIGxldCBmaXhlZEVsID0gY3JlYXRlRGl2KHtcbiAgICAgICAgY2xzOiBcImludGVybmFsLWVtYmVkIGltYWdlLWVtYmVkIGlzLWxvYWRlZFwiLFxuICAgIH0pXG4gICAgZml4ZWRFbC5zZXRBdHRyKFwiYWx0XCIsIGFsdCk7XG5cbiAgICBsZXQgcmVzb3VyY2VQYXRoID0gYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKTtcbiAgICBsZXQgaW1hZ2UgPSBmaXhlZEVsLmNyZWF0ZUVsKFwiaW1nXCIpO1xuICAgIGltYWdlLnNldEF0dHIoXCJzcmNcIiwgcmVzb3VyY2VQYXRoKTtcblxuICAgIGlmKGN1c3RvbVdpZHRoICE9PSBudWxsKSB7XG4gICAgICAgIGltYWdlLnNldEF0dHIoXCJ3aWR0aFwiLCBjdXN0b21XaWR0aC52YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpeGVkRWw7XG59XG5cbmZ1bmN0aW9uIGZpeEV4dGVybmFsTGlua3MoZWw6IEVsZW1lbnQpOiBFbGVtZW50IHtcblxuICAgIGxldCBpdGVtcyA9IGVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJleHRlcm5hbC1saW5rXCIpO1xuICAgIGZvcihsZXQgbGlua0VsIG9mIEFycmF5LmZyb20oaXRlbXMpKSB7XG5cbiAgICAgICAgbGV0IGxpbmsgPSBsaW5rRWwgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGlmKGxpbmsgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICBsaW5rID09PSBudWxsICkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGhyZWYgZnJvbSB0aGUgbGluayBhbmQgc2V0dXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gb3BlbiB0aGUgbGluayBpbiB0aGUgZGVmYXVsdCBicm93c2VyLlxuICAgICAgICBsZXQgaHJlZiA9IGxpbmsuZ2V0QXR0cihcImhyZWZcIilcbiAgICAgICAgbGluay5yZW1vdmVBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldikgPT4ge1xuXG4gICAgICAgICAgICB3aW5kb3cub3BlbihocmVmKTsgXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGl0ZW1zID0gZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImludGVybmFsLWxpbmtcIik7XG4gICAgZm9yKGxldCBsaW5rRWwgb2YgQXJyYXkuZnJvbShpdGVtcykpIHtcblxuICAgICAgICBsZXQgbGluayA9IGxpbmtFbCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgaWYobGluayA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgIGxpbmsgPT09IG51bGwgKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92aW5nIHRoZSBocmVmIGZyb20gaW50ZXJuYWwgbGlua3MgaXMgYWxsIHRoYXQgc2VlbXMgdG8gYmUgcmVxdWlyZWQgdG8gZml4IHRoZSBvbmNsaWNrLlxuICAgICAgICBsaW5rLnJlbW92ZUF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBnZXRFbWJlZChlbDogRWxlbWVudCk6IEVsZW1lbnQgfCBudWxsIHtcblxuICAgIC8vIGVtYmVkcyBjYW4gZWl0aGVyIGJlIGEgPGRpdiBjbGFzcz1cImludGVybmFsLWVtYmVkXCIgb3IgPHA+PGRpdiBjbGFzcz1cImludGVybmFsLWVtYmVkXCJcbiAgICAvLyBkZXBlbmRpbmcgb24gdGhlIHN5bnRheCB0aGlzIGFkZGl0aW9uYWwgY2hlY2sgaXMgdG8gZml4IGZhbHNlIG5lZ2F0aXZlcyB3aGVuIGVtYmVkIGlzXG4gICAgLy8gdGhlIGZpcnN0IGNhc2UuXG4gICAgaWYoZWwuaGFzQ2xhc3MoXCJpbnRlcm5hbC1lbWJlZFwiKSkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIGVsc2Uge1xuXG4gICAgICAgIGxldCBpdGVtcyA9IGVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpbnRlcm5hbC1lbWJlZFwiKTtcbiAgICAgICAgaWYoaXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbXNbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNJbWFnZUV4dGVuc2lvbihleHRlbnNpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuXG4gICAgZXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgc3dpdGNoKGV4dGVuc2lvbikge1xuICAgICAgICBjYXNlIFwicG5nXCI6XG4gICAgICAgIGNhc2UgXCJqcGdcIjpcbiAgICAgICAgY2FzZSBcImpwZWdcIjpcbiAgICAgICAgY2FzZSBcImdpZlwiOlxuICAgICAgICBjYXNlIFwiYm1wXCI6XG4gICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgY2FzZSBcIndlYnBcIjpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzUERGRXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpID09PSBcInBkZlwiO1xufVxuXG5mdW5jdGlvbiBpc01ERXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpID09PSBcIm1kXCI7XG59XG5cbmZ1bmN0aW9uIGZpeFVuU3VwcG9ydGVkUmVuZGVyKGVsOiBFbGVtZW50KTogRWxlbWVudCB7XG5cbiAgICBpZihpc0J1dHRvblBsdWdpbl9Dcm9zc0NvbXBhdGliaWx0eShlbCBhcyBIVE1MRWxlbWVudCkpIHtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBidXR0b24uXCIpXG4gICAgICAgIGxldCBmaXhlZEVsID0gY3JlYXRlRGl2KClcbiAgICAgICAgbGV0IHBhcmFncmFwaCA9IGZpeGVkRWwuY3JlYXRlRWwoXCJwXCIsIHtcbiAgICAgICAgICAgIFwiY2xzXCI6IGAke011bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uRXJyb3JNZXNzYWdlfSAke011bHRpQ29sdW1uU3R5bGVDU1MuU21hbGxGb250fWBcbiAgICAgICAgfSk7XG4gICAgICAgIHBhcmFncmFwaC5pbm5lclRleHQgPSBcIkJ1dHRvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gTGl2ZSBQcmV2aWV3LlxcblBsZWFzZSB1c2UgcmVhZGluZyBtb2RlLlwiXG4gICAgICAgIHJldHVybiBmaXhlZEVsO1xuICAgIH1cblxuICAgIHJldHVybiBlbDtcbn0iLCIvKlxuICogRmlsZW5hbWU6IG11bHRpLWNvbHVtbi1tYXJrZG93bi9zcmMvbGl2ZV9wcmV2aWV3L2NtNl9saXZlUHJldmlldy50c1xuICogQ3JlYXRlZCBEYXRlOiBNb25kYXksIEF1Z3VzdCAxc3QgMjAyMiwgMTo1MToxNiBwbVxuICogQXV0aG9yOiBDYW1lcm9uIFJvYmluc29uXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAyMiBDYW1lcm9uIFJvYmluc29uXG4gKi9cblxuaW1wb3J0IHsgRXh0ZW5zaW9uLCBMaW5lLCBSYW5nZVNldEJ1aWxkZXIsIFN0YXRlRmllbGQsIFRyYW5zYWN0aW9uIH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IHN5bnRheFRyZWUsIHRva2VuQ2xhc3NOb2RlUHJvcCB9IGZyb20gXCJAY29kZW1pcnJvci9sYW5ndWFnZVwiO1xuaW1wb3J0IHsgY29udGFpbnNSZWdpb25TdGFydCwgZmluZEVuZFRhZywgZmluZFNldHRpbmdzQ29kZWJsb2NrLCBmaW5kU3RhcnRDb2RlYmxvY2ssIGZpbmRTdGFydFRhZyB9IGZyb20gXCIuLi91dGlsaXRpZXMvdGV4dFBhcnNlclwiO1xuaW1wb3J0IHsgUGFuZG9jUmVnZXhEYXRhLCBmaW5kUGFuZG9jLCBwYXJzZVBhbmRvY1NldHRpbmdzIH0gZnJvbSBcInNyYy91dGlsaXRpZXMvcGFuZG9jUGFyc2VyXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtbk1hcmtkb3duX0RlZmluZWRTZXR0aW5nc19MaXZlUHJldmlld19XaWRnZXQsIE11bHRpQ29sdW1uTWFya2Rvd25fTGl2ZVByZXZpZXdfV2lkZ2V0IH0gZnJvbSBcIi4vbWNtX2xpdmVQcmV2aWV3X3dpZGdldFwiO1xuaW1wb3J0IHsgZWRpdG9ySW5mb0ZpZWxkLCBlZGl0b3JMaXZlUHJldmlld0ZpZWxkIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBSZWdpb25UeXBlLCBTdGFydFRhZ1JlZ2V4TWF0Y2gsIG1vdXNlU3RhdGUgfSBmcm9tIFwic3JjL3V0aWxpdGllcy9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBNdWx0aUNvbHVtblNldHRpbmdzIH0gZnJvbSBcInNyYy9yZWdpb25TZXR0aW5nc1wiO1xuaW1wb3J0IHsgcGFyc2VDb2x1bW5TZXR0aW5ncyB9IGZyb20gXCJzcmMvdXRpbGl0aWVzL3NldHRpbmdzUGFyc2VyXCI7XG5cbmxldCBzZWxlY3RpbmcgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBtdWx0aUNvbHVtbk1hcmtkb3duX1N0YXRlRmllbGQgPSBTdGF0ZUZpZWxkLmRlZmluZTxEZWNvcmF0aW9uU2V0Pih7XG5cdGNyZWF0ZShzdGF0ZSk6IERlY29yYXRpb25TZXQge1xuXHRcdHJldHVybiBEZWNvcmF0aW9uLm5vbmU7XG5cdH0sXG5cdHVwZGF0ZShvbGRTdGF0ZTogRGVjb3JhdGlvblNldCwgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogRGVjb3JhdGlvblNldCB7XG5cdFx0Y29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKTtcbiAgICAgICAgbGV0IGlnbm9yZUZ1cnRoZXJJdGVyYXRpb25zID0gZmFsc2U7XG5cblx0XHQvLyBDaGVjayBpZiB2aWV3IGlzIGluIGxpdmUgcHJldmlldyBzdGF0ZS5cblx0XHRpZih0cmFuc2FjdGlvbi5zdGF0ZS5maWVsZChlZGl0b3JMaXZlUHJldmlld0ZpZWxkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuXHRcdH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hlbiB3ZSBoYXZlIHRoZSB3aGlsZSBmaWxlIHdlIHRoZW4gZ2V0IHRoZSBlbnRpcmUgZG9jIHRleHQgYW5kIGNoZWNrIGlmIGl0IFxuICAgICAgICAgKiBjb250YWlucyBhIE1DTSByZWdpb24gc28gd2Uga25vdyB0byBicmVhayBvciBub3QuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgZG9jTGVuZ3RoID0gdHJhbnNhY3Rpb24uc3RhdGUuZG9jLmxlbmd0aFxuICAgICAgICBsZXQgZG9jVGV4dCA9IHRyYW5zYWN0aW9uLnN0YXRlLmRvYy5zbGljZVN0cmluZygwLCBkb2NMZW5ndGgpO1xuICAgICAgICBpZiAoY29udGFpbnNSZWdpb25TdGFydChkb2NUZXh0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuICAgICAgICB9XG5cblx0XHRpZihzZWxlY3RpbmcgJiYgbW91c2VTdGF0ZSA9PT0gXCJkb3duXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuXHRcdH1cblx0XHRlbHNlIGlmKG1vdXNlU3RhdGUgPT09IFwidXBcIikge1xuXHRcdFx0c2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0bGV0IGlzU2VsZWN0aW5nID0gY2hlY2tVc2VyU2VsZWN0aW5nKHRyYW5zYWN0aW9uKTtcblx0XHRpZihpc1NlbGVjdGluZykge1xuXHRcdFx0c2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuXHRcdH1cblxuXHRcdHN5bnRheFRyZWUodHJhbnNhY3Rpb24uc3RhdGUpLml0ZXJhdGUoe1xuXHRcdFx0ZW50ZXIobm9kZSkge1xuXG5cdFx0XHRcdC8vIElmIHdlIGZpbmQgdGhhdCB0aGUgZmlsZSBkb2VzIG5vdCBjb250YWluIGFueSBNQ00gcmVnaW9ucyB3ZSBjYW4gZmxpcCB0aGlzXG5cdFx0XHRcdC8vIGZsYWcgYW5kIHNraXAgYWxsIG90aGVyIG5vZGUgaXRlcmF0aW9ucywgcG90ZW50aWFsbHkgc2F2aW5nIGEgbG90IG9mIGNvbXB1dGUgdGltZS5cblx0XHRcdFx0Ly8gXG4gICAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHJ1biB0aGUgZ2VuZXJhdGlvbiBvbmNlIHBlciBzdGF0ZSBjaGFuZ2UuIElmXG4gICAgICAgICAgICAgICAgLy8gYSBwcmV2aW91cyBub2RlIGhhcyBzdWNlc3NmdWxseSBnZW5lcmF0ZWQgcmVnaW9ucyB3ZSBpZ25vcmUgYWxsXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgbm9kZXMgaW4gdGhlIHN0YXRlLlxuICAgICAgICAgICAgICAgIGlmKGlnbm9yZUZ1cnRoZXJJdGVyYXRpb25zID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cblx0XHRcdFx0Ly8gV2Ugd2FudCB0byBydW4gb24gdGhlIHdob2xlIGZpbGUgc28gd2UgZG9udCBqdXN0IGxvb2sgZm9yIGEgc2luZ2xlIHRva2VuLlxuXHRcdFx0XHRjb25zdCB0b2tlblByb3BzID0gbm9kZS50eXBlLnByb3A8c3RyaW5nPih0b2tlbkNsYXNzTm9kZVByb3ApO1xuXHRcdFx0XHRpZiAodG9rZW5Qcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2Ugd2FudCB0byBrbm93IHdoZXJlIHRoZSB1c2VyJ3MgY3Vyc29yIGlzLCBpdCBjYW4gYmVcblx0XHRcdFx0Ly8gc2VsZWN0aW5nIG11bHRpcGxlIHJlZ2lvbnMgb2YgdGV4dCBhcyB3ZWxsIHNvIHdlIG5lZWQgdG8ga25vd1xuXHRcdFx0XHQvLyBhbGwgbG9jYXRpb25zLiBVc2VkIHRvIGtub3cgaWYgd2Ugc2hvdWxkIHJlbmRlciByZWdpb24gYXMgdGV4dCBvciBhcyBwcmV2aWV3LlxuXHRcdFx0XHRsZXQgcmFuZ2VzID0gZ2V0Q3Vyc29yTGluZUxvY2F0aW9ucygpO1xuXG5cdFx0XHRcdC8vIFNldHVwIG91ciBsb29wIHRvIHJlbmRlciB0aGUgcmVnaW9ucyBhcyBNQ00uIFxuXHRcdFx0XHRsZXQgd29ya2luZ0ZpbGVUZXh0ID0gZG9jVGV4dDtcblxuXHRcdFx0XHRsZXQgbG9vcEluZGV4ID0gMDtcblx0XHRcdFx0bGV0IHN0YXJ0SW5kZXhPZmZzZXQgPSAwO1xuXHRcdFx0XHR3aGlsZSAodHJ1ZSkge1xuXG5cdFx0XHRcdFx0bGV0IHJlZ2lvbkRhdGE6IFJlZ2lvbkRhdGEgPSBnZXROZXh0UmVnaW9uKHdvcmtpbmdGaWxlVGV4dCwgc3RhcnRJbmRleE9mZnNldCwgZG9jVGV4dCk7XG5cdFx0XHRcdFx0aWYocmVnaW9uRGF0YSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGV0IGVsZW1lbnRUZXh0ICA9IHJlZ2lvbkRhdGEucmVnaW9uVGV4dDtcblx0XHRcdFx0XHR3b3JraW5nRmlsZVRleHQgID0gcmVnaW9uRGF0YS5yZW1haW5pbmdUZXh0O1xuXHRcdFx0XHRcdGxldCBzdGFydEluZGV4ICAgPSByZWdpb25EYXRhLnN0YXJ0SW5kZXg7XG5cdFx0XHRcdFx0bGV0IGVuZEluZGV4ICAgICA9IHJlZ2lvbkRhdGEuZW5kSW5kZXg7XG5cdFx0XHRcdFx0c3RhcnRJbmRleE9mZnNldCA9IGVuZEluZGV4O1xuXG5cdFx0XHRcdFx0Ly8gSGVyZSB3ZSBjaGVjayBpZiB0aGUgY3Vyc29yIGlzIGluIHRoaXMgc3BlY2lmaWMgcmVnaW9uLlxuXHRcdFx0XHRcdGxldCBjdXJzb3JJblJlZ2lvbiA9IGNoZWNrQ3Vyc29ySW5SZWdpb24oc3RhcnRJbmRleCwgZW5kSW5kZXgsIHJhbmdlcyk7XG5cdFx0XHRcdFx0aWYoY3Vyc29ySW5SZWdpb24gPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIGN1cnNvciBpcyB3aXRoaW4gdGhlIHJlZ2lvbiB3ZSB0aGVuIG5lZWQgdG8ga25vdyBpZlxuXHRcdFx0XHRcdFx0Ly8gaXQgaXMgd2l0aGluIG91ciBzZXR0aW5ncyBibG9jayAoaWYgaXQgZXhpc3RzLilcblx0XHRcdFx0XHRcdGxldCBzZXR0aW5nc1N0YXJ0RGF0YSA9IGZpbmRTdGFydENvZGVibG9jayhlbGVtZW50VGV4dCk7XG5cdFx0XHRcdFx0XHRpZihzZXR0aW5nc1N0YXJ0RGF0YS5mb3VuZCA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdFx0c2V0dGluZ3NTdGFydERhdGEgPSBmaW5kU2V0dGluZ3NDb2RlYmxvY2soZWxlbWVudFRleHQpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZihzZXR0aW5nc1N0YXJ0RGF0YS5mb3VuZCA9PT0gdHJ1ZSkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNpbmNlIHRoZSBzZXR0aW5ncyBibG9jayBleGlzdHMgY2hlY2sgaWYgdGhlIGN1cnNvciBpcyB3aXRoaW4gdGhhdCByZWdpb24uXG5cdFx0XHRcdFx0XHRcdGxldCBjb2RlYmxvY2tTdGFydEluZGV4ID0gc3RhcnRJbmRleCArIHNldHRpbmdzU3RhcnREYXRhLnN0YXJ0UG9zaXRpb247XG5cdFx0XHRcdFx0XHRcdGxldCBjb2RlYmxvY2tFbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBzZXR0aW5nc1N0YXJ0RGF0YS5lbmRQb3NpdGlvbjtcblx0XHRcdFx0XHRcdFx0bGV0IHNldHRpbmdzVGV4dCA9IGRvY1RleHQuc2xpY2UoY29kZWJsb2NrU3RhcnRJbmRleCwgY29kZWJsb2NrRW5kSW5kZXggKVxuXG5cdFx0XHRcdFx0XHRcdGxldCBjdXJzb3JJbkNvZGVibG9jayA9IGNoZWNrQ3Vyc29ySW5SZWdpb24oY29kZWJsb2NrU3RhcnRJbmRleCwgY29kZWJsb2NrRW5kSW5kZXgsIHJhbmdlcyk7XG5cdFx0XHRcdFx0XHRcdGlmKGN1cnNvckluQ29kZWJsb2NrID09PSBmYWxzZSkge1xuXHRcblx0XHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgY3Vyc29yIGlzIG5vdCB3aXRoaW4gdGhlIHJlZ2lvbiB3ZSBwYXNzIHRoZSBkYXRhIHRvIHRoZVxuXHRcdFx0XHRcdFx0XHRcdC8vIHNldHRpbmdzIHZpZXcgc28gaXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUgcmVnaW9uLlxuXHRcdFx0XHRcdFx0XHRcdGJ1aWxkZXIuYWRkKFxuXHRcdFx0XHRcdFx0XHRcdFx0Y29kZWJsb2NrU3RhcnRJbmRleCxcblx0XHRcdFx0XHRcdFx0XHRcdGNvZGVibG9ja0VuZEluZGV4ICsgMSxcblx0XHRcdFx0XHRcdFx0XHRcdERlY29yYXRpb24ucmVwbGFjZSh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHdpZGdldDogbmV3IE11bHRpQ29sdW1uTWFya2Rvd25fRGVmaW5lZFNldHRpbmdzX0xpdmVQcmV2aWV3X1dpZGdldChzZXR0aW5nc1RleHQpLFxuXHRcdFx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRsZXQgZm91bmRTZXR0aW5ncyA9IGdldFNldHRpbmdzRGF0YShyZWdpb25EYXRhKTtcblx0XHRcdFx0XHRcdGxldCB1c2VyU2V0dGluZ3MgPSBudWxsO1xuXHRcdFx0XHRcdFx0bGV0IHNldHRpbmdzVGV4dCA9IFwiXCJcblx0XHRcdFx0XHRcdGlmKGZvdW5kU2V0dGluZ3MgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGVsZW1lbnRUZXh0ID0gZm91bmRTZXR0aW5ncy5jb250ZW50RGF0YTtcblx0XHRcdFx0XHRcdFx0dXNlclNldHRpbmdzID0gZm91bmRTZXR0aW5ncy5zZXR0aW5ncztcblx0XHRcdFx0XHRcdFx0c2V0dGluZ3NUZXh0ID0gZm91bmRTZXR0aW5ncy5zZXR0aW5nc1RleHQ7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnN0IGVkaXRvckluZm8gPSB0cmFuc2FjdGlvbi5zdGF0ZS5maWVsZChlZGl0b3JJbmZvRmllbGQpO1xuXG5cdFx0XHRcdFx0XHQvLyBBdCB0aGlzIHBvaW50IGlmIHRoZSBjdXJzb3IgaXNudCBpbiB0aGUgcmVnaW9uIHdlIHBhc3MgdGhlIGRhdGEgdG8gdGhlXG5cdFx0XHRcdFx0XHQvLyBlbGVtZW50IHRvIGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdFx0YnVpbGRlci5hZGQoXG5cdFx0XHRcdFx0XHRcdHN0YXJ0SW5kZXgsXG5cdFx0XHRcdFx0XHRcdGVuZEluZGV4LFxuXHRcdFx0XHRcdFx0XHREZWNvcmF0aW9uLnJlcGxhY2Uoe1xuXHRcdFx0XHRcdFx0XHRcdHdpZGdldDogbmV3IE11bHRpQ29sdW1uTWFya2Rvd25fTGl2ZVByZXZpZXdfV2lkZ2V0KGVsZW1lbnRUZXh0LCB1c2VyU2V0dGluZ3MsIGVkaXRvckluZm8uZmlsZSwgc2V0dGluZ3NUZXh0KSxcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlnbm9yZUZ1cnRoZXJJdGVyYXRpb25zID0gdHJ1ZTtcblxuXHRcdFx0XHRcdC8vIEluZmluaXRlIGxvb3AgcHJvdGVjdGlvbi5cblx0XHRcdFx0XHRsb29wSW5kZXgrKztcblx0XHRcdFx0XHRpZihsb29wSW5kZXggPiAxMDApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBvdGVudGlhbCBpc3N1ZSB3aXRoIHJlbmRlcmluZyBNdWx0aS1Db2x1bW4gTWFya2Rvd24gbGl2ZSBwcmV2aWV3IHJlZ2lvbnMuIElmIHByb2JsZW0gcGVyc2lzdHMgcGxlYXNlIGZpbGUgYSBidWcgcmVwb3J0IHdpdGggZGV2ZWxvcGVyLlwiKVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH0pO1xuIFxuXHRcdHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0Q3Vyc29yTGluZUxvY2F0aW9ucygpOiB7IGxpbmU6IExpbmUsIHBvc2l0aW9uOiBudW1iZXIgfVtdIHtcblxuXHRcdFx0bGV0IHJhbmdlczogeyBsaW5lOiBMaW5lLCBwb3NpdGlvbjogbnVtYmVyIH1bXSA9IFtdO1xuXG5cdFx0XHRpZiAodHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuXG5cdFx0XHRcdHJhbmdlcyA9IHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMuZmlsdGVyKChyYW5nZSkgPT4ge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJhbmdlLmVtcHR5O1xuXHRcdFx0XHR9KS5tYXAoKHJhbmdlKSA9PiB7XG5cblx0XHRcdFx0XHRsZXQgbGluZSA9IHRyYW5zYWN0aW9uLnN0YXRlLmRvYy5saW5lQXQocmFuZ2UuaGVhZCk7XG5cdFx0XHRcdFx0bGV0IHRleHQgPSBgJHtsaW5lLm51bWJlcn06JHtyYW5nZS5oZWFkIC0gbGluZS5mcm9tfWA7XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0bGluZTogbGluZSxcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiByYW5nZS5oZWFkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJhbmdlcztcblx0XHR9XG5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVJc0luUmFuZ2UodmFsdWU6IG51bWJlciwgbWluVmFsOiBudW1iZXIsIG1heFZhbDogbnVtYmVyLCBpbmNsdXNpdmU6IGJvb2xlYW4gPSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmKGluY2x1c2l2ZSA9PT0gdHJ1ZSAmJiAodmFsdWUgPT09IG1pblZhbCB8fCB2YWx1ZSA9PT0gbWF4VmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWluVmFsIDwgdmFsdWUgJiYgdmFsdWUgPCBtYXhWYWwpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuXHRcdGZ1bmN0aW9uIGNoZWNrQ3Vyc29ySW5SZWdpb24oc3RhcnRJbmRleDogbnVtYmVyLFxuXHRcdFx0XHRcdFx0XHRcdGVuZEluZGV4OiBudW1iZXIsIFxuXHRcdFx0XHRcdFx0XHRcdHJhbmdlczogeyBsaW5lOiBMaW5lLCBwb3NpdGlvbjogbnVtYmVyIH1bXSApOiBib29sZWFuIHtcblxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0XHQvLyBUT0RPOiBNYXliZSBsb29rIGludG8gbGltaXRpbmcgdGhpcyB0byB0aGUgc2Vjb25kIGFuZCBzZWNvbmQgdG8gbGFzdCBsaW5lXG5cdFx0XHRcdC8vIG9mIHRoZSByZWdpb24gYXMgY2xpY2tpbmcgcmlnaHQgYXQgdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIHJlZ2lvblxuXHRcdFx0XHQvLyBzd2FwcyBpdCB0byB1bnJlbmRlcmVkLlxuXHRcdFx0XHRsZXQgcmFuZ2UgPSByYW5nZXNbaV07XG5cdFx0XHRcdGlmKHZhbHVlSXNJblJhbmdlKHJhbmdlLnBvc2l0aW9uLCBzdGFydEluZGV4LCBlbmRJbmRleCkgPT09IHRydWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0cmFuc2FjdGlvbi5zdGF0ZS5zZWxlY3Rpb24pe1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMubGVuZ3RoOyBpKyspIHtcblxuXHRcdFx0XHRcdGxldCByYW5nZSA9IHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXNbaV07XG5cblx0XHRcdFx0XHQvLyBJZiBlaXRoZXIgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgc2VsZWN0aW9uIGlzIHdpdGhpbiB0aGVcblx0XHRcdFx0XHQvLyByZWdpb24gcmFuZ2Ugd2UgZG8gbm90IHJlbmRlciBsaXZlIHByZXZpZXcuXG5cdFx0XHRcdFx0aWYodmFsdWVJc0luUmFuZ2UocmFuZ2UuZnJvbSwgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHx8IFxuXHRcdFx0XHRcdCAgIHZhbHVlSXNJblJhbmdlKHJhbmdlLnRvLCBzdGFydEluZGV4LCBlbmRJbmRleCkpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIC8vIE9yIGlmIHRoZSBlbnRpcmUgcmVnaW9uIGlzIHdpdGhpbiB0aGUgc2VsZWN0aW9uIHJhbmdlXG5cdFx0XHRcdFx0Ly8gd2UgZG8gbm90IHJlbmRlciB0aGUgbGl2ZSBwcmV2aWV3LlxuXHRcdFx0XHRcdGlmKHZhbHVlSXNJblJhbmdlKHN0YXJ0SW5kZXgsIHJhbmdlLmZyb20sIHJhbmdlLnRvKSAmJiBcblx0XHRcdFx0XHQgICB2YWx1ZUlzSW5SYW5nZShlbmRJbmRleCwgcmFuZ2UuZnJvbSwgcmFuZ2UudG8pKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0cHJvdmlkZShmaWVsZDogU3RhdGVGaWVsZDxEZWNvcmF0aW9uU2V0Pik6IEV4dGVuc2lvbiB7XG5cdFx0cmV0dXJuIEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmaWVsZCk7XG5cdH0sXG59KTtcblxuaW50ZXJmYWNlIFJlZ2lvbkRhdGEge1xuXHRyZWdpb25UeXBlOiBSZWdpb25UeXBlO1xuXHRyZWdpb25UZXh0OiBzdHJpbmc7XG5cdHJlbWFpbmluZ1RleHQ6IHN0cmluZztcblx0c3RhcnRJbmRleDogbnVtYmVyO1xuXHRlbmRJbmRleDogbnVtYmVyO1xufVxuaW50ZXJmYWNlIFBhbmRvY1JlZ2lvbkRhdGEgZXh0ZW5kcyBSZWdpb25EYXRhIHtcblx0Y29sdW1uQ291bnQ6IHN0cmluZztcblx0dXNlclNldHRpbmdzOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRSZWdpb24od29ya2luZ0ZpbGVUZXh0OiBzdHJpbmcsIHN0YXJ0SW5kZXhPZmZzZXQ6IG51bWJlciwgd2hvbGVEb2M6IHN0cmluZyk6IFJlZ2lvbkRhdGEgfCBudWxsIHtcblxuXHRsZXQgcmVnaW9uID0gZmluZE5leHRSZWdpb24od29ya2luZ0ZpbGVUZXh0KTtcblx0aWYocmVnaW9uID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRpZihyZWdpb24uZGF0YVR5cGUgPT09IFwiQ09ERUJMT0NLXCIgfHwgcmVnaW9uLmRhdGFUeXBlID09PSBcIkRFUFJFQ0lBVEVEXCIpIHtcblxuXHRcdC8vIFNlYXJjaCBmb3IgdGhlIGZpcnN0IGVuZCB0YWcgYWZ0ZXIgYSBzdGFydCBibG9jay4gKE5vIHJlY3Vyc2l2ZSBjb2x1bW5zLilcblx0XHRsZXQgZW5kVGFnRGF0YSA9IGZpbmRFbmRUYWcod29ya2luZ0ZpbGVUZXh0LnNsaWNlKHJlZ2lvbi5kYXRhLnN0YXJ0UG9zaXRpb24pKTtcblx0XHRpZihlbmRUYWdEYXRhLmZvdW5kID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogRm9yIHRoZSByZWdpb24gd2UgZm91bmQgZ2V0IHRoZSBzdGFydCBhbmQgZW5kIHBvc2l0aW9uIG9mIHRoZSB0YWdzIHNvIHdlIFxuXHRcdCAqIGNhbiBzbGljZSBpdCBvdXQgb2YgdGhlIGRvY3VtZW50LlxuXHRcdCAqL1xuXHRcdGxldCBzdGFydEluZGV4ID0gc3RhcnRJbmRleE9mZnNldCArIHJlZ2lvbi5kYXRhLnN0YXJ0UG9zaXRpb247XG5cdFx0bGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIGVuZFRhZ0RhdGEuc3RhcnRQb3NpdGlvbiArIGVuZFRhZ0RhdGEubWF0Y2hMZW5ndGggLy8gV2l0aG91dCB0aGUgbWF0Y2hMZW5ndGggd2lsbCBsZWF2ZSB0aGUgZW5kIHRhZyBvbiB0aGUgc2NyZWVuLlxuXG5cdFx0Ly8gVGhpcyB0ZXh0IGlzIHRoZSBlbnRpcmUgcmVnaW9uIGRhdGEgaW5jbHVkaW5nIHRoZSBzdGFydCBhbmQgZW5kIHRhZ3MuXG5cdFx0bGV0IGVsZW1lbnRUZXh0ID0gd2hvbGVEb2Muc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpXG5cdFx0d29ya2luZ0ZpbGVUZXh0ID0gd2hvbGVEb2Muc2xpY2UoZW5kSW5kZXgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlIG91ciBzdGFydCBvZmZzZXQgYW5kIHRoZSB3b3JraW5nIHRleHQgb2YgdGhlIGZpbGUgc28gb3VyIG5leHQgXG5cdFx0ICogaXRlcmF0aW9uIGtub3dzIHdoZXJlIHdlIGxlZnQgb2ZmXG5cdFx0ICovXG5cdFx0bGV0IGRhdGE6IFJlZ2lvbkRhdGEgPSB7XG5cdFx0XHRyZWdpb25UeXBlOiByZWdpb24uZGF0YVR5cGUsXG5cdFx0XHRyZWdpb25UZXh0OiBlbGVtZW50VGV4dCxcblx0XHRcdHJlbWFpbmluZ1RleHQ6IHdvcmtpbmdGaWxlVGV4dCxcblx0XHRcdHN0YXJ0SW5kZXg6IHN0YXJ0SW5kZXgsXG5cdFx0XHRlbmRJbmRleDogZW5kSW5kZXhcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRpZihyZWdpb24uZGF0YVR5cGUgPT09IFwiUEFET0NcIikge1xuXG5cdFx0bGV0IHBhbmRvY0RhdGE6IFBhbmRvY1JlZ2V4RGF0YSA9IHJlZ2lvbi5kYXRhIGFzIFBhbmRvY1JlZ2V4RGF0YTtcblx0XHRsZXQgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXhPZmZzZXQgKyBwYW5kb2NEYXRhLnN0YXJ0UG9zaXRpb247XG5cdFx0bGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleE9mZnNldCArIHBhbmRvY0RhdGEuZW5kUG9zaXRpb247XG5cdFx0d29ya2luZ0ZpbGVUZXh0ID0gd2hvbGVEb2Muc2xpY2UoZW5kSW5kZXgpO1xuXHRcdGxldCBkYXRhOiBQYW5kb2NSZWdpb25EYXRhID0ge1xuXHRcdFx0cmVnaW9uVHlwZTogcmVnaW9uLmRhdGFUeXBlLFxuXHRcdFx0cmVnaW9uVGV4dDogcGFuZG9jRGF0YS5jb250ZW50LFxuXHRcdFx0cmVtYWluaW5nVGV4dDogd29ya2luZ0ZpbGVUZXh0LFxuXHRcdFx0c3RhcnRJbmRleDogc3RhcnRJbmRleCxcblx0XHRcdGVuZEluZGV4OiBlbmRJbmRleCxcblx0XHRcdGNvbHVtbkNvdW50OiBwYW5kb2NEYXRhLmNvbHVtbkNvdW50LFxuXHRcdFx0dXNlclNldHRpbmdzOiBwYW5kb2NEYXRhLnVzZXJTZXR0aW5nc1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufVxuXG5mdW5jdGlvbiBmaW5kTmV4dFJlZ2lvbih3b3JraW5nRmlsZVRleHQ6IHN0cmluZyk6IHsgZGF0YVR5cGU6IFJlZ2lvblR5cGUsIGRhdGE6IFN0YXJ0VGFnUmVnZXhNYXRjaCB8IFBhbmRvY1JlZ2V4RGF0YSB9IHtcblxuXHQvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUga2luZHMgb2Ygc3RhcnQgYmxvY2tzLCB0aGUgb2xkIHdheSBvZiBwYXJzaW5nIHdvdWxkIGNhdXNlIGlzc3Vlcy5cblx0Ly8gTm93IHNlYXJjaCBmb3IgYm90aCBraW5kcyBhbmQgZGV0ZXJtaW5lIHdoYXQgdG8gZG8gYWZ0ZXIgc2VhcmNoLlxuXHRsZXQgc3RhcnRUYWdEYXRhX2NvZGVibG9ja1N0YXJ0OiB7IGRhdGFUeXBlOiBSZWdpb25UeXBlLCBkYXRhOiBTdGFydFRhZ1JlZ2V4TWF0Y2ggfSA9IHtkYXRhVHlwZTogXCJDT0RFQkxPQ0tcIiwgZGF0YTogZmluZFN0YXJ0Q29kZWJsb2NrKHdvcmtpbmdGaWxlVGV4dCkgfTtcblx0bGV0IHN0YXJ0VGFnRGF0YV9kZXByZWNpYXRlZFN0YXJ0OiB7IGRhdGFUeXBlOiBSZWdpb25UeXBlLCBkYXRhOiBTdGFydFRhZ1JlZ2V4TWF0Y2ggfSA9IHtkYXRhVHlwZTogXCJERVBSRUNJQVRFRFwiLCBkYXRhOiBmaW5kU3RhcnRUYWcod29ya2luZ0ZpbGVUZXh0KSB9O1xuXHRsZXQgcGFuZG9jRGF0YTogeyBkYXRhVHlwZTogUmVnaW9uVHlwZSwgZGF0YTogUGFuZG9jUmVnZXhEYXRhIH0gPSB7ZGF0YVR5cGU6IFwiUEFET0NcIiwgZGF0YTogZmluZFBhbmRvYyh3b3JraW5nRmlsZVRleHQpIH1cblxuXHRpZihzdGFydFRhZ0RhdGFfY29kZWJsb2NrU3RhcnQuZGF0YS5mb3VuZCA9PT0gZmFsc2UgJiYgXG5cdCAgIHN0YXJ0VGFnRGF0YV9kZXByZWNpYXRlZFN0YXJ0LmRhdGEuZm91bmQgPT09IGZhbHNlICYmXG5cdCAgIHBhbmRvY0RhdGEuZGF0YS5mb3VuZCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxldCByZWdpb25zRm91bmQgPSBbc3RhcnRUYWdEYXRhX2NvZGVibG9ja1N0YXJ0LCBzdGFydFRhZ0RhdGFfZGVwcmVjaWF0ZWRTdGFydCwgcGFuZG9jRGF0YV0uZmlsdGVyKCh2YWwpID0+IHsgcmV0dXJuIHZhbC5kYXRhLmZvdW5kID09PSB0cnVlIH0pO1xuXHRpZihyZWdpb25zRm91bmQubGVuZ3RoID4gMSkge1xuXG5cdFx0bGV0IHNvcnRlZCA9IHJlZ2lvbnNGb3VuZC5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRyZXR1cm4gYS5kYXRhLnN0YXJ0UG9zaXRpb24gLSBiLmRhdGEuZW5kUG9zaXRpb247XG5cdFx0fSlcblx0XHRyZXR1cm4gc29ydGVkLmZpcnN0KCk7XG5cdH1cblx0XG5cdGlmKHN0YXJ0VGFnRGF0YV9jb2RlYmxvY2tTdGFydC5kYXRhLmZvdW5kID09PSB0cnVlKSB7XG5cdFx0cmV0dXJuIHN0YXJ0VGFnRGF0YV9jb2RlYmxvY2tTdGFydDtcblx0fVxuXHRcblx0aWYoc3RhcnRUYWdEYXRhX2RlcHJlY2lhdGVkU3RhcnQuZGF0YS5mb3VuZCA9PT0gdHJ1ZSl7XG5cdFx0cmV0dXJuIHN0YXJ0VGFnRGF0YV9kZXByZWNpYXRlZFN0YXJ0O1xuXHR9XG5cdFxuXHRpZihwYW5kb2NEYXRhLmRhdGEuZm91bmQgPT09IHRydWUpIHtcblx0XHRyZXR1cm4gcGFuZG9jRGF0YTtcblx0fVxuXG5cdHRocm93KFwiVW5rbm93biB0eXBlIGZvdW5kIHdoZW4gcGFyc2luZyByZWdpb24uXCIpXG59XG5cbmZ1bmN0aW9uIGdldFNldHRpbmdzRGF0YShyZWdpb25EYXRhOiBSZWdpb25EYXRhKToge3NldHRpbmdzOiBNdWx0aUNvbHVtblNldHRpbmdzLCBzZXR0aW5nc1RleHQ6IHN0cmluZywgY29udGVudERhdGE6IHN0cmluZ30ge1xuXG5cdGxldCBjb250ZW50RGF0YSA9IHJlZ2lvbkRhdGEucmVnaW9uVGV4dFxuXHRmdW5jdGlvbiBwYXJzZUNvZGVCbG9ja1NldHRpbmdzKHNldHRpbmdzU3RhcnREYXRhOiBTdGFydFRhZ1JlZ2V4TWF0Y2gpIHtcblxuXHRcdGxldCBzZXR0aW5nc1RleHQgPSBjb250ZW50RGF0YS5zbGljZShzZXR0aW5nc1N0YXJ0RGF0YS5zdGFydFBvc2l0aW9uLCBzZXR0aW5nc1N0YXJ0RGF0YS5lbmRQb3NpdGlvbik7XG5cdFx0Y29udGVudERhdGEgPSBjb250ZW50RGF0YS5yZXBsYWNlKHNldHRpbmdzVGV4dCwgXCJcIik7XG5cblx0XHRsZXQgc2V0dGluZ3MgPSBwYXJzZUNvbHVtblNldHRpbmdzKHNldHRpbmdzVGV4dCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c2V0dGluZ3M6IHNldHRpbmdzLFxuXHRcdFx0c2V0dGluZ3NUZXh0OiBzZXR0aW5nc1RleHQsXG5cdFx0XHRjb250ZW50RGF0YTogY29udGVudERhdGFcblx0XHR9XG5cdH1cblxuXHRpZihyZWdpb25EYXRhLnJlZ2lvblR5cGUgPT09IFwiQ09ERUJMT0NLXCIpIHtcblx0XHRsZXQgc2V0dGluZ3NTdGFydERhdGEgPSBmaW5kU3RhcnRDb2RlYmxvY2soY29udGVudERhdGEpO1xuXHRcdGlmIChzZXR0aW5nc1N0YXJ0RGF0YS5mb3VuZCA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHJldHVybiBwYXJzZUNvZGVCbG9ja1NldHRpbmdzKHNldHRpbmdzU3RhcnREYXRhKVxuXHR9XG5cblx0aWYocmVnaW9uRGF0YS5yZWdpb25UeXBlID09PSBcIkRFUFJFQ0lBVEVEXCIpIHtcblx0XHRsZXQgc2V0dGluZ3NTdGFydERhdGEgPSBmaW5kU2V0dGluZ3NDb2RlYmxvY2soY29udGVudERhdGEpO1xuXHRcdGlmIChzZXR0aW5nc1N0YXJ0RGF0YS5mb3VuZCA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyc2VDb2RlQmxvY2tTZXR0aW5ncyhzZXR0aW5nc1N0YXJ0RGF0YSlcblx0fVxuXG5cdGlmKHJlZ2lvbkRhdGEucmVnaW9uVHlwZSA9PT0gXCJQQURPQ1wiKSB7XG5cblx0XHRsZXQgcGFuZG9jRGF0YSA9IHJlZ2lvbkRhdGEgYXMgUGFuZG9jUmVnaW9uRGF0YVxuXHRcdHJldHVybiB7XG5cdFx0XHRzZXR0aW5nczogcGFyc2VQYW5kb2NTZXR0aW5ncyhwYW5kb2NEYXRhLnVzZXJTZXR0aW5ncywgcGFuZG9jRGF0YS5jb2x1bW5Db3VudCksXG5cdFx0XHRzZXR0aW5nc1RleHQ6IFwiXCIsXG5cdFx0XHRjb250ZW50RGF0YTogcmVnaW9uRGF0YS5yZWdpb25UZXh0XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGNoZWNrVXNlclNlbGVjdGluZyh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBib29sZWFuIHtcblx0XG5cdGxldCBpc1NlbGVjdGluZyA9IGZhbHNlO1xuXHRpZih0cmFuc2FjdGlvbi5pc1VzZXJFdmVudChcInNlbGVjdC5wb2ludGVyXCIpICYmIFxuXHRcdHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMgJiYgXG5cdFx0dHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlcy5sZW5ndGggPiAwKSB7XG5cblx0XHRmb3IobGV0IHJhbmdlIG9mIHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMpIHtcblxuXHRcdFx0aWYocmFuZ2UudG8gLSByYW5nZS5mcm9tID4gMSkge1xuXG5cdFx0XHRcdGlzU2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGlzU2VsZWN0aW5nXG59IiwiLyoqXG4gKiBGaWxlOiAvc3JjL2xpdmVfcHJldmlldy9jbTZfbGl2ZVByZWl2ZXdfb25DbGlja0ZpeC50cyAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ3JlYXRlZCBEYXRlOiBGcmlkYXksIE1hcmNoIDI0dGggMjAyMywgNjoxMCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvcjogQ2FtZXJvbiBSb2JpbnNvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDIzIENhbWVyb24gUm9iaW5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqL1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGlzIG1vc3RseSBhIGJvZGdlZCBmaXggZm9yIHRoZSBMaXZlIFByZXZpZXcgc2Nyb2xsaW5nIGlzc3VlIGNyZWF0ZWQgd2hlblxuICogbGFyZ2UgLyBsb25nIGNvbnRlbnQgKHN1Y2ggYXMgTUNNKSBpcyBiZWluZyByZW5kZXJlZCB0aHJvdWdoIGEgQ002IFN0YXRlRmllbGQuXG4gKiBUaGUgY29yZSBwcm9ibGVtIHRoaXMgbW9kdWxlIGFpbXMgdG8gXCJmaXhcIiBpcyBPYnNpZGlhbidzIHJlZHJhdyBhbmQgbWVtb3J5XG4gKiBtYW5hZ2VtZW50IHdoaWNoIGNhdXNlcyB0aGUgdmlld3BvcnQgdG8gc25hcCB0byB0aGUgYm90dG9tIG9mIHRoZSBkb2N1bWVudFxuICogb24gdXNlciBjbGljayBpbnRlcmFjdGlvbi4gXG4gKiBcbiAqIFRoaXMgQ002IHBsdWdpbiBtYWtlIHRoZSBlZGl0aW5nIGV4cGVyaWVuY2Ugd2l0aCBNQ00gbW9yZSB1c2VyIGZpZW5kbHkgYnkgc25hcHBpbmcgXG4gKiB0aGUgdmlldyBiYWNrIHRvIHRoZSBjdXJzb3IgYWZ0ZXIgT2JzaWRpYW4gaGFzIHBlcmZvcm1lZCBpdCdzIGZ1bGwgTFAgcmVkcmF3LCBhbmQgXG4gKiBjdWxsZWQgb3V0IHVubmVlZGVkIGVsZW1lbnRzIGZyb20gdGhlIExQIHZpZXcuXG4gKiBcbiAqIElmIHRoZSBjb3JlIHByb2JsZW0gaXMgZXZlciBmaXhlZCBieSBPYnNpZGlhbiwgdGhpcyBtb2R1bGUgd2lsbCBiZWNvbWUgb2Jzb2xldGVcbiAqIGFuZCBiZSByZW1vdmVkLlxuICovXG5cbmltcG9ydCB7IEVkaXRvclNlbGVjdGlvbiwgRXh0ZW5zaW9uLCBSYW5nZVNldEJ1aWxkZXIsIFNlbGVjdGlvblJhbmdlLCBTdGF0ZUZpZWxkLCBUcmFuc2FjdGlvbiwgVHJhbnNhY3Rpb25TcGVjLCBUZXh0IH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBFZGl0b3JWaWV3IH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcbmltcG9ydCB7IGNvbnRhaW5zRW5kVGFnLCBjb250YWluc1JlZ2lvblN0YXJ0IH0gZnJvbSBcIi4uL3V0aWxpdGllcy90ZXh0UGFyc2VyXCI7XG5pbXBvcnQgeyBlZGl0b3JFZGl0b3JGaWVsZCwgZWRpdG9yTGl2ZVByZXZpZXdGaWVsZCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgTW91c2VTdGF0ZSwgbW91c2VTdGF0ZSB9IGZyb20gXCJzcmMvdXRpbGl0aWVzL2ludGVyZmFjZXNcIjtcblxuY29uc3QgRURJVE9SX1ZJRVdfR0NfVElNRU9VVF9NUyA9IDE1MDAwMCAvLyAyLjVtIGluIG1zXG5cbmFic3RyYWN0IGNsYXNzIEVkaXRvckNhbGxiYWNrTWFuYWdlciB7XG5cdHByb3RlY3RlZCBfcmVnYWluZWRGb2N1czogYm9vbGVhbiA9IHRydWU7XG5cdHB1YmxpYyBnZXQgcmVnYWluZWRGb2N1cygpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVnYWluZWRGb2N1cztcblx0fVxuXG5cdHByb3RlY3RlZCBfbG9zdEZvY3VzOiBib29sZWFuID0gdHJ1ZTtcblx0cHVibGljIGdldCBsb3N0Rm9jdXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX2xvc3RGb2N1cztcblx0fVxuXG5cdHByb3RlY3RlZCBfaGFzRm9jdXM6IGJvb2xlYW47XG5cdHB1YmxpYyBnZXQgaGFzRm9jdXMoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX2hhc0ZvY3VzO1xuXHR9XG5cdHB1YmxpYyBzZXQgaGFzRm9jdXModmFsdWU6IGJvb2xlYW4pIHtcblxuXHRcdGlmKHZhbHVlID09PSB0cnVlKSB7XG5cdFx0XHRpZih0aGlzLl9oYXNGb2N1cyA9PT0gZmFsc2UpIHtcblx0XHRcdFx0dGhpcy5fcmVnYWluZWRGb2N1cyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dGhpcy5fcmVnYWluZWRGb2N1cyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGlmKHRoaXMuX2hhc0ZvY3VzID09PSB0cnVlKSB7XG5cdFx0XHRcdHRoaXMuX2xvc3RGb2N1cyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dGhpcy5fbG9zdEZvY3VzID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5faGFzRm9jdXMgPSB2YWx1ZTtcblx0fVxufVxuXG5jbGFzcyBFZGl0b3JWaWV3U2Nyb2xsU3RhdGVNYW5hZ2VyIGV4dGVuZHMgRWRpdG9yQ2FsbGJhY2tNYW5hZ2Vye1xuXG5cdHByaXZhdGUgbGFzdFVzZVRpbWVzdGFtcDogbnVtYmVyID0gRGF0ZS5ub3coKTtcblxuXHQvLyBUT0RPOiBGaW5kIGEgd2F5IHRvIG5vdCByZXF1aXJlIHRoZSBlZGl0b3Igdmlldz8/XG5cdHByaXZhdGUgX2VkaXRvclZpZXc6IEVkaXRvclZpZXc7XG5cdHB1YmxpYyBnZXQgZWRpdG9yVmlldygpOiBFZGl0b3JWaWV3IHtcblx0XHRyZXR1cm4gdGhpcy5fZWRpdG9yVmlldztcblx0fVxuXG5cdHByaXZhdGUgX2xhc3REb2NTdGF0ZTogVGV4dDtcblx0cHVibGljIGdldCBsYXN0RG9jU3RhdGUoKTogVGV4dCB7XG5cdFx0cmV0dXJuIHRoaXMuX2xhc3REb2NTdGF0ZTtcblx0fVxuXHRwdWJsaWMgc2V0IGxhc3REb2NTdGF0ZSh2YWx1ZTogVGV4dCkge1xuXHRcdHRoaXMuX2xhc3REb2NTdGF0ZSA9IHZhbHVlO1xuXHR9XG5cblx0Ly8gQ3VycmVudGx5IHVudXNlZC4gS2VlcGluZyBzdG9yZWQgZm9yIGVhc3kgYWNjZXNzIGluIGZ1dHVyZS5cblx0cHJpdmF0ZSBfZG9jVGl0bGU6IHN0cmluZ1xuXHRwdWJsaWMgZ2V0IGRvY1RpdGxlKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMuX2RvY1RpdGxlXG5cdH1cblx0cHVibGljIHNldCBkb2NUaXRsZSh2YWx1ZTogc3RyaW5nKSB7XG5cblx0XHRsZXQgcGFyc2VkRG9jVGl0bGUgPSBhdHRlbXB0UGFyc2VEb2NUaXRsZSh2YWx1ZSlcblx0XHRpZihwYXJzZWREb2NUaXRsZSAhPT0gXCJcIikge1xuXG5cdFx0XHR0aGlzLl9kb2NUaXRsZSA9IHBhcnNlZERvY1RpdGxlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9kb2NUaXRsZSA9IHZhbHVlO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoZWRpdG9yVmlldzogRWRpdG9yVmlldykge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9lZGl0b3JWaWV3ID0gZWRpdG9yVmlldztcblx0XHR0aGlzLmhhc0ZvY3VzID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBoYXNCZWVuQWNjZXNzZWQoKSB7XG5cdFx0dGhpcy5sYXN0VXNlVGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblx0fVxuXG5cdGdldCBpc1JlYWR5Rm9yR0MoKTogYm9vbGVhbiB7XG5cblx0XHRpZih0aGlzLl9lZGl0b3JWaWV3ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgZGVsdGEgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0VXNlVGltZXN0YW1wO1xuXHRcdGlmKCB0aGlzLl9lZGl0b3JWaWV3LmluVmlldyA9PT0gZmFsc2UgJiZcblx0XHQgICAgdGhpcy5fZWRpdG9yVmlldy5oYXNGb2N1cyA9PT0gZmFsc2UgJiYgXG5cdFx0XHRkZWx0YSA+IEVESVRPUl9WSUVXX0dDX1RJTUVPVVRfTVMpIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbmNsYXNzIEVkaXRvckRlbGF5Q2FsbGJhY2sgZXh0ZW5kcyBFZGl0b3JDYWxsYmFja01hbmFnZXIge1xuXG5cdHB1YmxpYyBjYWxsYmFjazogKCkgPT4gdm9pZFxuXHRwcml2YXRlIGNyZWF0aW9uVGltZXN0YW1wOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuXG5cdGdldCBjYWxsYmFja1Nob3VsZFRpbWVvdXQoKTogYm9vbGVhbiB7XG5cdFxuXHRcdGxldCBjdXJyZW50VGltZU1TID0gRGF0ZS5ub3coKTtcblx0XG5cdFx0bGV0IGRlbHRhID0gY3VycmVudFRpbWVNUyAtIHRoaXMuY3JlYXRpb25UaW1lc3RhbXBcblx0XG5cdFx0bGV0IG1heERlbHRhVGltZU1TID0gMjAwXG5cdFx0aWYoZGVsdGEgPiBtYXhEZWx0YVRpbWVNUykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5jb25zdCBjbGlja0RlbGF5Q2FsbGJhY2tzOiBNYXA8c3RyaW5nLCBFZGl0b3JEZWxheUNhbGxiYWNrPiA9IG5ldyBNYXAoKTtcbmNvbnN0IG9wZW5FZGl0b3JWaWV3czogTWFwPEVkaXRvclZpZXcsIEVkaXRvclZpZXdTY3JvbGxTdGF0ZU1hbmFnZXI+ID0gbmV3IE1hcCgpO1xubGV0IGxhc3RHQ1Bhc3MgPSBEYXRlLm5vdygpO1xubGV0IGVkaXRvck1vdXNlU3RhdGU6IE1vdXNlU3RhdGUgPSBcInVwXCI7XG5cbmV4cG9ydCBjb25zdCBNdWx0aUNvbHVtbk1hcmtkb3duX09uQ2xpY2tGaXggPSBTdGF0ZUZpZWxkLmRlZmluZTxEZWNvcmF0aW9uU2V0Pih7XG5cdGNyZWF0ZShzdGF0ZSk6IERlY29yYXRpb25TZXQge1xuXHRcdHJldHVybiBEZWNvcmF0aW9uLm5vbmU7XG5cdH0sXG5cdHVwZGF0ZShvbGRTdGF0ZTogRGVjb3JhdGlvblNldCwgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogRGVjb3JhdGlvblNldCB7XG5cdFx0Y29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKTtcblxuXHRcdGlmKCBzaG91bGRSdW5HQ09uRWRpdG9yTWFwKCkgKSB7XG5cblx0XHRcdGZvcihsZXQgW2VkaXRvclZpZXcsIHNjcm9sbFN0YXRlTWFuYWdlcl0gb2Ygb3BlbkVkaXRvclZpZXdzKSB7XG5cblx0XHRcdFx0aWYoc2Nyb2xsU3RhdGVNYW5hZ2VyLmlzUmVhZHlGb3JHQykge1xuXHRcdFx0XHRcdG9wZW5FZGl0b3JWaWV3cy5kZWxldGUoZWRpdG9yVmlldyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cbiAgICAgICAgaWYodHJhbnNhY3Rpb24uc3RhdGUuZmllbGQoZWRpdG9yTGl2ZVByZXZpZXdGaWVsZCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcbiAgICAgICAgfVxuXG5cdFx0aWYoIGlzVHJhbnNhY3Rpb25SYW5nZVNlbGVjdGlvbih0cmFuc2FjdGlvbikgPT09IHRydWUgKSB7XG5cdFx0XHRyZXR1cm4gYnVpbGRlci5maW5pc2goKTtcblx0XHR9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gd2UgaGF2ZSB0aGUgd2hpbGUgZmlsZSB3ZSB0aGVuIGdldCB0aGUgZW50aXJlIGRvYyB0ZXh0IGFuZCBjaGVjayBpZiBpdCBcbiAgICAgICAgICogY29udGFpbnMgYSBNQ00gcmVnaW9uIHNvIHdlIGtub3cgdG8gYnJlYWsgb3Igbm90LlxuICAgICAgICAgKi9cbiAgICAgICAgbGV0IGRvY0xlbmd0aCA9IHRyYW5zYWN0aW9uLnN0YXRlLmRvYy5sZW5ndGhcbiAgICAgICAgbGV0IGRvY1RleHQgPSB0cmFuc2FjdGlvbi5zdGF0ZS5kb2Muc2xpY2VTdHJpbmcoMCwgZG9jTGVuZ3RoKTtcbiAgICAgICAgaWYgKGNvbnRhaW5zUmVnaW9uU3RhcnQoZG9jVGV4dCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcbiAgICAgICAgfVxuXG5cdFx0aWYobW91c2VTdGF0ZSA9PT0gXCJkb3duXCIpIHtcblx0XHRcdGVkaXRvck1vdXNlU3RhdGUgPSBtb3VzZVN0YXRlO1xuXHRcdH1cblxuXHRcdGNvbnN0IGVkaXRvclZpZXcgPSB0cmFuc2FjdGlvbi5zdGF0ZS5maWVsZChlZGl0b3JFZGl0b3JGaWVsZCk7XG5cdFx0XG5cdFx0bGV0IHNjcm9sbFN0YXRlTWFuYWdlcjogRWRpdG9yVmlld1Njcm9sbFN0YXRlTWFuYWdlciA9IGdldFNjcm9sbFN0YXRlTWFuYWdlcihlZGl0b3JWaWV3LCB0cmFuc2FjdGlvbik7XG5cdFx0c2Nyb2xsU3RhdGVNYW5hZ2VyLmxhc3REb2NTdGF0ZSA9IHRyYW5zYWN0aW9uLm5ld0RvY1xuXHRcdHNjcm9sbFN0YXRlTWFuYWdlci5kb2NUaXRsZSA9IGVkaXRvclZpZXcuZG9tLm93bmVyRG9jdW1lbnQudGl0bGU7XG5cblx0XHRpZihlZGl0b3JWaWV3Lmhhc0ZvY3VzID09PSB0cnVlKSB7XG5cdFx0XHRzY3JvbGxTdGF0ZU1hbmFnZXIuaGFzRm9jdXMgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGxldCBjdXJzb3JMb2NhdGlvbjogU2VsZWN0aW9uUmFuZ2UgPSBnZXRNYWluQ3Vyc29yTG9jYXRpb24odHJhbnNhY3Rpb24pO1xuXHRcdGlmKGN1cnNvckxvY2F0aW9uICE9PSBudWxsKSB7XG5cdFx0XHRsZXQgdGV4dEFib3ZlQ3Vyc29yID0gZG9jVGV4dC5zbGljZSgwLCBjdXJzb3JMb2NhdGlvbi5mcm9tKTtcblxuXHRcdFx0bGV0IGVuZFRhZ0Fib3ZlQ3Vyc29yID0gY29udGFpbnNFbmRUYWcodGV4dEFib3ZlQ3Vyc29yKTtcblx0XHRcdGlmKGVuZFRhZ0Fib3ZlQ3Vyc29yID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm4gYnVpbGRlci5maW5pc2goKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiggdHJhbnNhY3Rpb25Jc1ZhbGlkTW91c2VEb3duRXZlbnQodHJhbnNhY3Rpb24sIGN1cnNvckxvY2F0aW9uKSApIHtcblx0XHRcdFxuXHRcdFx0aGFuZGxlTW91c2VEb3duRXZlbnQodHJhbnNhY3Rpb24sIGVkaXRvclZpZXcsIGN1cnNvckxvY2F0aW9uKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiggdHJhbnNhY3Rpb25Jc01vdXNlVXBFdmVudCh0cmFuc2FjdGlvbikgKSB7XG5cblx0XHRcdGhhbmRsZU1vdXNlVXBFdmVudCh0cmFuc2FjdGlvbik7XG5cdFx0fVxuXHRcdGVsc2UgaWYoZWRpdG9ySGFzQmVlbkNsaWNrZWRBd2F5RnJvbSh0cmFuc2FjdGlvbiwgZWRpdG9yVmlldywgc2Nyb2xsU3RhdGVNYW5hZ2VyKSkge1xuXG5cdFx0XHRsZXQgcmVmb2N1c0xvY2F0aW9uID0gc2hvdWxkUmVmb2N1c09uQ3Vyc29yT3JWaWV3cG9ydChlZGl0b3JWaWV3LCBjdXJzb3JMb2NhdGlvbiwgZG9jTGVuZ3RoKTtcblx0XHRcdHJlZm9jdXNPbkN1cnNvckFyZWEocmVmb2N1c0xvY2F0aW9uLCBlZGl0b3JWaWV3KTtcblx0XHRcdHNjcm9sbFN0YXRlTWFuYWdlci5oYXNGb2N1cyA9IGZhbHNlO1xuXHRcdH1cblx0XHQvLyBlbHNlIGlmKCBlZGl0b3JIYXNCZWVuQ2xpY2tlZEJhY2tJbnRvKHRyYW5zYWN0aW9uLCBzY3JvbGxTdGF0ZU1hbmFnZXIsIGVkaXRvclZpZXcpICl7XG5cdFx0Ly8gIC8vIFRPRE86IEJ1ZyB3aGVyZSBjbGlja2luZyBiYWNrIGludG8gZWRpdG9yIHdpdGhvdXQgc2VsZWN0aW5nIGEgbmV3IGN1cnNvciBsb2NhdGlvbiBcblx0XHQvLyAgLy8gd2lsbCBjYXVzZSBlZGl0b3IgdG8ganVtcCB0byB0b3Agb2YgZG9jLiBEbyBub3QgaGF2ZSB3YXkgdG8gcHJldmVudCB0aGlzIGFzIG9mIG5vdy5cblx0XHQvLyBcdGNvbnNvbGUubG9nKFwiRWRpdG9yIGhhcyBiZWVuIHJlZm9jdXNlZCB3aXRoIG51bGwgY3Vyc29yIGxvY2F0aW9uLlwiKVxuXHRcdC8vIH1cblx0XHRlbHNlIGlmKCBlZGl0b3JNb3VzZVN0YXRlID09PSBcImRvd25cIiAmJiBtb3VzZVN0YXRlID09PSBcInVwXCIgJiZcblx0XHRcdFx0IHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMgJiYgXG5cdFx0XHRcdCB0cmFuc2FjdGlvbi5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGVkaXRvck1vdXNlU3RhdGUgPSBtb3VzZVN0YXRlO1xuXHRcdFx0bGV0IHJlZm9jdXNMb2NhdGlvbiA9IHNob3VsZFJlZm9jdXNPbkN1cnNvck9yVmlld3BvcnQoZWRpdG9yVmlldywgY3Vyc29yTG9jYXRpb24sIGRvY0xlbmd0aCk7XG5cdFx0XHRyZWZvY3VzT25DdXJzb3JBcmVhKHJlZm9jdXNMb2NhdGlvbiwgZWRpdG9yVmlldyk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXG5cdFx0XHRjbGVhclVuVXNlZEVudHJpZXModHJhbnNhY3Rpb24pO1xuXHRcdH1cblxuICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcblx0fSxcblx0cHJvdmlkZShmaWVsZDogU3RhdGVGaWVsZDxEZWNvcmF0aW9uU2V0Pik6IEV4dGVuc2lvbiB7XG5cdFx0cmV0dXJuIEVkaXRvclZpZXcuZGVjb3JhdGlvbnMuZnJvbShmaWVsZCk7XG5cdH0sXG59KTtcblxuZnVuY3Rpb24gZWRpdG9ySGFzQmVlbkNsaWNrZWRCYWNrSW50byh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24sIHNjcm9sbFN0YXRlTWFuYWdlcjogRWRpdG9yVmlld1Njcm9sbFN0YXRlTWFuYWdlciwgZWRpdG9yVmlldzogRWRpdG9yVmlldyk6IGJvb2xlYW4ge1xuXG5cdGlmKHRyYW5zYWN0aW9uLmlzVXNlckV2ZW50KFwic2VsZWN0LnBvaW50ZXJcIikgPT09IGZhbHNlICYmXG5cdCAgIHNjcm9sbFN0YXRlTWFuYWdlci5oYXNGb2N1cyA9PT0gZmFsc2UgJiZcblx0ICAgc2Nyb2xsU3RhdGVNYW5hZ2VyLnJlZ2FpbmVkRm9jdXMgPT09IGZhbHNlICYmIFxuXHQgICBzY3JvbGxTdGF0ZU1hbmFnZXIubG9zdEZvY3VzID09PSBmYWxzZSAmJiBcblx0ICAgZWRpdG9yVmlldy5pblZpZXcpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0TWFpbkN1cnNvckxvY2F0aW9uKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFNlbGVjdGlvblJhbmdlIHtcblxuXHRsZXQgY3Vyc29yTG9jYXRpb246IFNlbGVjdGlvblJhbmdlID0gbnVsbDtcblx0aWYgKHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMgJiZcblx0XHR0cmFuc2FjdGlvbi5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLmxlbmd0aCA+IDApIHtcblxuXHRcdGN1cnNvckxvY2F0aW9uID0gdHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlc1swXTtcblx0fVxuXG5cdHJldHVybiBjdXJzb3JMb2NhdGlvbjtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duRXZlbnQodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBlZGl0b3JWaWV3OiBFZGl0b3JWaWV3LCBjdXJzb3JMb2NhdGlvbjogU2VsZWN0aW9uUmFuZ2UpIHtcblxuXHRsZXQgeDogVHJhbnNhY3Rpb25TcGVjID0ge1xuXHRcdGVmZmVjdHM6IEVkaXRvclZpZXcuc2Nyb2xsSW50b1ZpZXcoY3Vyc29yTG9jYXRpb24sIHtcblx0XHRcdHk6IFwiY2VudGVyXCJcblx0XHR9KVxuXHR9O1xuXG5cdGFzeW5jIGZ1bmN0aW9uIGRlbGF5KCkge1xuXHRcdGF3YWl0IHNsZWVwKDE1KTtcblx0XHRlZGl0b3JWaWV3LmRpc3BhdGNoKHgpO1xuXHR9XG5cdGxldCBkZWxheUNhbGxiYWNrRGF0YSA9IG5ldyBFZGl0b3JEZWxheUNhbGxiYWNrKCk7XG5cdGRlbGF5Q2FsbGJhY2tEYXRhLmNhbGxiYWNrID0gZGVsYXk7XG5cdGNsaWNrRGVsYXlDYWxsYmFja3Muc2V0KHRyYW5zYWN0aW9uLnN0YXRlLnNsaWNlRG9jKCksIGRlbGF5Q2FsbGJhY2tEYXRhKTtcblxuXHRpZiAoaXNSYW5nZWRTZWxlY3Rpb24oW2N1cnNvckxvY2F0aW9uXSkgPT09IGZhbHNlIHx8XG5cdFx0ZGVsYXlDYWxsYmFja0RhdGEucmVnYWluZWRGb2N1cyA9PT0gdHJ1ZSkge1xuXHRcdGRlbGF5KCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhbnNhY3Rpb25Jc1ZhbGlkTW91c2VEb3duRXZlbnQodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uLCBjdXJzb3JMb2NhdGlvbjogU2VsZWN0aW9uUmFuZ2UpIHtcblx0cmV0dXJuIHRyYW5zYWN0aW9uLmlzVXNlckV2ZW50KFwic2VsZWN0LnBvaW50ZXJcIikgJiZcblx0XHRjdXJzb3JMb2NhdGlvbiAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gdHJhbnNhY3Rpb25Jc01vdXNlVXBFdmVudCh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pOiBib29sZWFuIHtcblxuXHRpZiggdHJhbnNhY3Rpb24uZG9jQ2hhbmdlZCA9PT0gZmFsc2UgJiYgXG5cdCAgICBjbGlja0RlbGF5Q2FsbGJhY2tzLmhhcyh0cmFuc2FjdGlvbi5zdGF0ZS5zbGljZURvYygpKSApIHtcblxuXHRcdFx0ZWRpdG9yTW91c2VTdGF0ZSA9IG1vdXNlU3RhdGU7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFN0YXRlTWFuYWdlcihlZGl0b3JWaWV3OiBFZGl0b3JWaWV3LCB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pIHtcblx0XG5cdGlmIChvcGVuRWRpdG9yVmlld3MuaGFzKGVkaXRvclZpZXcpID09PSBmYWxzZSkge1xuXG5cdFx0bGV0IHNjcm9sbFN0YXRlTWFuYWdlcjogRWRpdG9yVmlld1Njcm9sbFN0YXRlTWFuYWdlciA9IG5ldyBFZGl0b3JWaWV3U2Nyb2xsU3RhdGVNYW5hZ2VyKGVkaXRvclZpZXcpO1xuXHRcdG9wZW5FZGl0b3JWaWV3cy5zZXQoZWRpdG9yVmlldywgc2Nyb2xsU3RhdGVNYW5hZ2VyKTtcblxuXHRcdHJldHVybiBzY3JvbGxTdGF0ZU1hbmFnZXI7XG5cdH1cblxuXHRsZXQgc2Nyb2xsU3RhdGVNYW5hZ2VyOiBFZGl0b3JWaWV3U2Nyb2xsU3RhdGVNYW5hZ2VyID0gb3BlbkVkaXRvclZpZXdzLmdldChlZGl0b3JWaWV3KTtcblx0aWYgKHRyYW5zYWN0aW9uU3dhcHBlZEVkaXRvckZpbGUodHJhbnNhY3Rpb24sIHNjcm9sbFN0YXRlTWFuYWdlcikpIHtcblxuXHRcdHNjcm9sbFN0YXRlTWFuYWdlciA9IG5ldyBFZGl0b3JWaWV3U2Nyb2xsU3RhdGVNYW5hZ2VyKGVkaXRvclZpZXcpO1xuXHRcdG9wZW5FZGl0b3JWaWV3cy5zZXQoZWRpdG9yVmlldywgc2Nyb2xsU3RhdGVNYW5hZ2VyKTtcblx0XHRyZXR1cm4gc2Nyb2xsU3RhdGVNYW5hZ2VyO1xuXHR9XG5cblx0c2Nyb2xsU3RhdGVNYW5hZ2VyLmhhc0JlZW5BY2Nlc3NlZCgpO1x0XG5cdHJldHVybiBzY3JvbGxTdGF0ZU1hbmFnZXI7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1vdXNlVXBFdmVudCh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pIHtcblxuXHRsZXQgZGVsYXlDYWxsYmFja0RhdGEgPSBjbGlja0RlbGF5Q2FsbGJhY2tzLmdldCh0cmFuc2FjdGlvbi5zdGF0ZS5zbGljZURvYygpKTtcblx0ZGVsYXlDYWxsYmFja0RhdGEuY2FsbGJhY2soKTtcblx0aWYgKGRlbGF5Q2FsbGJhY2tEYXRhLmNhbGxiYWNrU2hvdWxkVGltZW91dCA9PT0gdHJ1ZSkge1xuXHRcdGNsaWNrRGVsYXlDYWxsYmFja3MuZGVsZXRlKHRyYW5zYWN0aW9uLnN0YXRlLnNsaWNlRG9jKCkpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsZWFyVW5Vc2VkRW50cmllcyh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24pIHtcblxuXHRmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgY2xpY2tEZWxheUNhbGxiYWNrcykge1xuXHRcdGlmICh2YWx1ZS5jYWxsYmFja1Nob3VsZFRpbWVvdXQgPT09IHRydWUpIHtcblx0XHRcdGNsaWNrRGVsYXlDYWxsYmFja3MuZGVsZXRlKHRyYW5zYWN0aW9uLnN0YXRlLnNsaWNlRG9jKCkpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBzaG91bGRSZWZvY3VzT25DdXJzb3JPclZpZXdwb3J0KGVkaXRvclZpZXc6IEVkaXRvclZpZXcsIGN1cnNvckxvY2F0aW9uOiBTZWxlY3Rpb25SYW5nZSwgZG9jTGVuZ3RoOiBudW1iZXIpOiBTZWxlY3Rpb25SYW5nZSB7XG5cblx0Y29uc3QgVklFV1BPUlRfQ1VSU09SX1JFRk9DVVNfUkFOR0UgPSAzMDA7XG5cblx0bGV0IHZpZXdwb3J0UmFuZ2UgPSBlZGl0b3JWaWV3LnZpZXdwb3J0O1xuXHRpZih2aWV3cG9ydFJhbmdlLmZyb20gKyBWSUVXUE9SVF9DVVJTT1JfUkVGT0NVU19SQU5HRSA8PSBjdXJzb3JMb2NhdGlvbi5mcm9tICYmIGN1cnNvckxvY2F0aW9uLmZyb20gPD0gdmlld3BvcnRSYW5nZS50byAtIFZJRVdQT1JUX0NVUlNPUl9SRUZPQ1VTX1JBTkdFKSB7XG5cdFx0cmV0dXJuIGN1cnNvckxvY2F0aW9uO1xuXHR9XG5cblx0aWYodmlld3BvcnRSYW5nZS5mcm9tID09PSAwKSB7XG5cdFx0cmV0dXJuIEVkaXRvclNlbGVjdGlvbi5jdXJzb3IoMCk7XG5cdH1cblxuXHRpZih2aWV3cG9ydFJhbmdlLnRvID49IGRvY0xlbmd0aCkge1xuXHRcdHJldHVybiBFZGl0b3JTZWxlY3Rpb24uY3Vyc29yKGRvY0xlbmd0aCk7XG5cdH1cblxuXHRsZXQgbG9jYXRpb24gPSB2aWV3cG9ydFJhbmdlLmZyb20gKyBNYXRoLmZsb29yKCh2aWV3cG9ydFJhbmdlLnRvIC0gdmlld3BvcnRSYW5nZS5mcm9tKSAvIDIpO1xuXHRyZXR1cm4gRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihsb2NhdGlvbilcbn1cblxuZnVuY3Rpb24gcmVmb2N1c09uQ3Vyc29yQXJlYShjdXJzb3JMb2NhdGlvbjogU2VsZWN0aW9uUmFuZ2UsIGVkaXRvclZpZXc6IEVkaXRvclZpZXcpIHtcblxuXHRsZXQgeDogVHJhbnNhY3Rpb25TcGVjID0ge1xuXHRcdGVmZmVjdHM6IEVkaXRvclZpZXcuc2Nyb2xsSW50b1ZpZXcoY3Vyc29yTG9jYXRpb24sIHtcblx0XHRcdHk6IFwiY2VudGVyXCJcblx0XHR9KVxuXHR9XG5cblx0YXN5bmMgZnVuY3Rpb24gZGVsYXkoKSB7XG5cdFx0YXdhaXQgc2xlZXAoMTAwKTtcblx0XHRlZGl0b3JWaWV3LmRpc3BhdGNoKHgpXG5cdH1cblx0ZGVsYXkoKVxufVxuXG5mdW5jdGlvbiBlZGl0b3JIYXNCZWVuQ2xpY2tlZEF3YXlGcm9tKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbiwgZWRpdG9yVmlldzogRWRpdG9yVmlldywgc2Nyb2xsU3RhdGVNYW5hZ2VyOiBFZGl0b3JWaWV3U2Nyb2xsU3RhdGVNYW5hZ2VyKTogYm9vbGVhbiB7XG5cblx0aWYoIHRyYW5zYWN0aW9uLmRvY0NoYW5nZWQgPT09IGZhbHNlICYmIFxuXHRcdGVkaXRvclZpZXcuaGFzRm9jdXMgICAgPT09IGZhbHNlICYmIFxuXHRcdGVkaXRvclZpZXcuaW5WaWV3ICAgICAgPT09IHRydWUgICYmXG5cdFx0c2Nyb2xsU3RhdGVNYW5hZ2VyLmhhc0ZvY3VzICA9PT0gdHJ1ZSAgJiZcblx0XHRzY3JvbGxTdGF0ZU1hbmFnZXIubG9zdEZvY3VzID09PSB0cnVlICAgICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNSYW5nZWRTZWxlY3Rpb24oY3Vyc29yTG9jYXRpb25zOiBTZWxlY3Rpb25SYW5nZVtdKSB7XG5cblx0Zm9yKGxldCByYW5nZSBvZiBjdXJzb3JMb2NhdGlvbnMpIHtcblx0XHRpZihyYW5nZS50byAtIHJhbmdlLmZyb20gPiAxKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1RyYW5zYWN0aW9uUmFuZ2VTZWxlY3Rpb24odHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKTogYm9vbGVhbiB7XG5cblx0aWYodHJhbnNhY3Rpb24uaXNVc2VyRXZlbnQoXCJzZWxlY3QucG9pbnRlclwiKSAmJiBcblx0ICAgdHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlcyAmJiBcblx0ICAgdHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlcy5sZW5ndGggPiAwICYmXG5cdCAgIGlzUmFuZ2VkU2VsZWN0aW9uKHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMuc2xpY2UoKSkpIHtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdHJhbnNhY3Rpb25Td2FwcGVkRWRpdG9yRmlsZSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24sIHNjcm9sbFN0YXRlTWFuYWdlcjogRWRpdG9yVmlld1Njcm9sbFN0YXRlTWFuYWdlcik6IGJvb2xlYW4ge1xuXG5cdC8vIElmIG9uIHRoaXMgdHJhbnNhY3Rpb24gdGhlcmUgYXJlIG11bHRpcGxlIHNlbGVjdGlvbiByYW5nZXMgd2Uga25vd1xuXHQvLyB0aGUgdXNlciBjYW4gbm90IGhhdmUgc3dhcHBlZCB0byBhIG5ldyBmaWxlIHRoaXMgdHJhbnNhY3Rpb24uXG5cdGlmKHRyYW5zYWN0aW9uLnN0YXRlLnNlbGVjdGlvbi5yYW5nZXMubGVuZ3RoICE9PSAxKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT24gbmV3IGRvY3VtZW50IGxvYWQgdGhlIGN1cnNvciBpcyBwbGFjZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZmlsZS5cblx0Ly8gSWYgY3Vyc29yIGlzIG5vdCBhdCB0aGlzIGxvY2F0aW9uIHdlIGtub3cgaXQgaXNudCBkb2N1bWVudCBsb2FkLlxuXHRpZih0cmFuc2FjdGlvbi5zdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzWzBdLmZyb20gIT09IDAgJiZcblx0ICAgdHJhbnNhY3Rpb24uc3RhdGUuc2VsZWN0aW9uLnJhbmdlc1swXS50byAgICE9PSAwKSB7XG5cdCAgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0cmFuc2FjdGlvbiBpcyBub3QgYWxzbyBhIHVzZXIgZXZlbnQuIEF0IHRoaXMgcG9pbnQgc2hvdWxkIHdlIGJlIGZhaXJseVxuXHQvLyBjZXJ0YWluIHRoYXQgdGhpcyBpcyBhIGRvY3VtZW50IGxvYWQ/XG5cdGlmKHRyYW5zYWN0aW9uLmlzVXNlckV2ZW50KFwiaW5wdXRcIikgIHx8IFxuXHQgICB0cmFuc2FjdGlvbi5pc1VzZXJFdmVudChcImRlbGV0ZVwiKSB8fFxuXHQgICB0cmFuc2FjdGlvbi5pc1VzZXJFdmVudChcIm1vdmVcIikgICB8fCBcblx0ICAgdHJhbnNhY3Rpb24uaXNVc2VyRXZlbnQoXCJzZWxlY3RcIikgfHxcblx0ICAgdHJhbnNhY3Rpb24uaXNVc2VyRXZlbnQoXCJ1bmRvXCIpICAgfHxcblx0ICAgdHJhbnNhY3Rpb24uaXNVc2VyRXZlbnQoXCJyZWRvXCIpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYoc2Nyb2xsU3RhdGVNYW5hZ2VyLmxhc3REb2NTdGF0ZSA9PT0gdHJhbnNhY3Rpb24ubmV3RG9jKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJ1bkdDT25FZGl0b3JNYXAoKTogYm9vbGVhbiB7XG5cdFxuXHRjb25zdCBHQ19ERUxUQV9USU1FUiA9IDMwMDAwIC8vIDMwc1xuXG5cdGxldCBkZWx0YSA9IERhdGUubm93KCkgLSBsYXN0R0NQYXNzO1xuXHRpZihkZWx0YSA+IEdDX0RFTFRBX1RJTUVSKSB7XG5cblx0XHRsYXN0R0NQYXNzID0gRGF0ZS5ub3coKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRQYXJzZURvY1RpdGxlKHZhbHVlOiBzdHJpbmcpIHtcblxuXHRmb3IobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cblx0XHRsZXQgcmVzdWx0ID0gLyguKikgLSAuKi8uZXhlYyh2YWx1ZSlcblx0XHRpZihyZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0Lmxlbmd0aCA+IDEpIHtcblx0XHRcdHZhbHVlID0gcmVzdWx0WzFdO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHJldHVybiBcIlwiXG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufSIsIi8qXHJcbiAqIEZpbGU6IG11bHRpLWNvbHVtbi1tYXJrZG93bi9zcmMvbWFpbi50c1xyXG4gKiBDcmVhdGVkIERhdGU6IFR1ZXNkYXksIE9jdG9iZXIgNXRoIDIwMjEsIDE6MDkgcG1cclxuICogQXV0aG9yOiBDYW1lcm9uIFJvYmluc29uXHJcbiAqIFxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgQ2FtZXJvbiBSb2JpbnNvblxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5vdGljZSwgUGx1Z2luLCAgTWFya2Rvd25SZW5kZXJDaGlsZCwgTWFya2Rvd25SZW5kZXJlciwgVEZpbGUsIFBsYXRmb3JtLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbiwgcGFyc2VGcm9udE1hdHRlckVudHJ5LCBXb3Jrc3BhY2UsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCAqIGFzIG11bHRpQ29sdW1uUGFyc2VyIGZyb20gJy4vdXRpbGl0aWVzL3RleHRQYXJzZXInO1xyXG5pbXBvcnQgKiBhcyBjb250YWluc1BhbmRvYyBmcm9tIFwiLi91dGlsaXRpZXMvcGFuZG9jUGFyc2VyXCI7XHJcbmltcG9ydCB7IEZpbGVET01NYW5hZ2VyLCBHbG9iYWxET01NYW5hZ2VyIH0gZnJvbSAnLi9kb21fbWFuYWdlci9kb21NYW5hZ2VyJztcclxuaW1wb3J0IHsgTXVsdGlDb2x1bW5SZW5kZXJEYXRhIH0gZnJvbSBcIi4vZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvcmVnaW9uTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyIH0gZnJvbSBcIi4vZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvcmVnaW9uTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBSZWdpb25NYW5hZ2VyQ29udGFpbmVyIH0gZnJvbSBcIi4vZG9tX21hbmFnZXIvcmVnaW9uYWxfbWFuYWdlcnMvcmVnaW9uTWFuYWdlckNvbnRhaW5lclwiO1xyXG5pbXBvcnQgeyBET01PYmplY3QsIERPTU9iamVjdFRhZywgVGFza0xpc3RET01PYmplY3QgfSBmcm9tICcuL2RvbV9tYW5hZ2VyL2RvbU9iamVjdCc7XHJcbmltcG9ydCB7IGZpbGVTdGlsbEluVmlldywgZ2V0VUlEIH0gZnJvbSAnLi91dGlsaXRpZXMvdXRpbHMnO1xyXG5pbXBvcnQgeyBNdWx0aUNvbHVtbkxheW91dENTUywgTXVsdGlDb2x1bW5TdHlsZUNTUyB9IGZyb20gJy4vdXRpbGl0aWVzL2Nzc0RlZmluaXRpb25zJztcclxuaW1wb3J0IHsgRWxlbWVudFJlbmRlclR5cGUgfSBmcm9tICcuL3V0aWxpdGllcy9lbGVtZW50UmVuZGVyVHlwZVBhcnNlcic7XHJcbmltcG9ydCB7IG11bHRpQ29sdW1uTWFya2Rvd25fU3RhdGVGaWVsZCB9IGZyb20gJy4vbGl2ZV9wcmV2aWV3L2NtNl9saXZlUHJldmlldyc7XHJcbmltcG9ydCB7IHBhcnNlQ29sdW1uU2V0dGluZ3MsIHBhcnNlU3RhcnRSZWdpb25Db2RlQmxvY2tJRCB9IGZyb20gJy4vdXRpbGl0aWVzL3NldHRpbmdzUGFyc2VyJztcclxuaW1wb3J0IHsgTXVsdGlDb2x1bW5NYXJrZG93bl9PbkNsaWNrRml4IH0gZnJvbSAnLi9saXZlX3ByZXZpZXcvY202X2xpdmVQcmVpdmV3X29uQ2xpY2tGaXgnO1xyXG5pbXBvcnQgeyBNdWx0aUNvbHVtblNldHRpbmdzLCBnZXREZWZhdWx0TXVsdGlDb2x1bW5TZXR0aW5ncyB9IGZyb20gJy4vcmVnaW9uU2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBIVE1MU2l6aW5nIH0gZnJvbSAnLi91dGlsaXRpZXMvaW50ZXJmYWNlcyc7XHJcblxyXG5pbnRlcmZhY2UgTUNNX1NldHRpbmdzIHtcclxuICAgIHJlbmRlck9uTW9iaWxlOiBib29sZWFuO1xyXG59XHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IE1DTV9TZXR0aW5ncyA9IHtcclxuICAgIHJlbmRlck9uTW9iaWxlOiB0cnVlXHJcbn07XHJcblxyXG5jb25zdCBDT0RFQkxPQ0tfU1RBUlRfU1RSUyA9IFtcclxuICAgIFwic3RhcnQtbXVsdGktY29sdW1uXCIsXHJcbiAgICBcIm11bHRpLWNvbHVtbi1zdGFydFwiXHJcbl1cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXVsdGlDb2x1bW5NYXJrZG93biBleHRlbmRzIFBsdWdpbiB7XHJcblxyXG4gICAgc2V0dGluZ3M6IE1DTV9TZXR0aW5ncyA9IERFRkFVTFRfU0VUVElOR1M7XHJcbiAgICBnbG9iYWxNYW5hZ2VyOiBHbG9iYWxET01NYW5hZ2VyID0gbmV3IEdsb2JhbERPTU1hbmFnZXIoKTtcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgbXVsdGktY29sdW1uIG1hcmtkb3duXCIpO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cclxuICAgICAgICB0aGlzLmdsb2JhbE1hbmFnZXIgPSBuZXcgR2xvYmFsRE9NTWFuYWdlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKG11bHRpQ29sdW1uTWFya2Rvd25fU3RhdGVGaWVsZClcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKE11bHRpQ29sdW1uTWFya2Rvd25fT25DbGlja0ZpeCk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBDT0RFQkxPQ0tfU1RBUlRfU1RSUy5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXJ0U3RyID0gQ09ERUJMT0NLX1NUQVJUX1NUUlNbaV1cclxuICAgICAgICAgICAgdGhpcy5zZXR1cE1hcmtkb3duQ29kZWJsb2NrUG9zdFByb2Nlc3NvcihzdGFydFN0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0dXBNYXJrZG93blBvc3RQcm9jZXNzb3IoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWQ6IGB0b2dnbGUtbW9iaWxlLXJlbmRlcmluZy1tY21gLFxyXG4gICAgICAgICAgICBuYW1lOiBgVG9nZ2xlIE1vYmlsZSBSZW5kZXJpbmcgLSBNdWx0aS1Db2x1bW4gTWFya2Rvd25gLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MucmVuZGVyT25Nb2JpbGUgPSAhdGhpcy5zZXR0aW5ncy5yZW5kZXJPbk1vYmlsZTsgXHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBub3RpY2VTdHJpbmcgPSBgVG9nZ2xlZCBtb2JpbGUgcmVuZGVyaW5nICR7dGhpcy5zZXR0aW5ncy5yZW5kZXJPbk1vYmlsZSA/IFwib25cIiA6IFwib2ZmXCJ9LmBcclxuICAgICAgICAgICAgICAgIGlmKFBsYXRmb3JtLmlzTW9iaWxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlU3RyaW5nICs9IGAgUGxlYXNlIHJlbG9hZCBhbnkgb3BlbiBmaWxlcyBmb3IgY2hhbmdlIHRvIHRha2UgZWZmZWN0LmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UgKG5vdGljZVN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9UT0RPOiBTZXQgdXAgdGhpcyBhcyBhIG1vZGFsIHRvIHNldCBzZXR0aW5ncyBhdXRvbWF0aWNhbGx5XHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWQ6IGBpbnNlcnQtbXVsdGktY29sdW1uLXJlZ2lvbmAsXHJcbiAgICAgICAgICAgIG5hbWU6IGBJbnNlcnQgTXVsdGktQ29sdW1uIFJlZ2lvbmAsXHJcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yLCB2aWV3KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3Vyc29yU3RhcnRQb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3IoXCJmcm9tXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZ2V0RG9jKCkucmVwbGFjZVNlbGVjdGlvbihcclxuYFxyXG5cXGBcXGBcXGBzdGFydC1tdWx0aS1jb2x1bW5cclxuSUQ6IElEXyR7Z2V0VUlEKDQpfVxyXG5OdW1iZXIgb2YgQ29sdW1uczogMlxyXG5MYXJnZXN0IENvbHVtbjogc3RhbmRhcmRcclxuXFxgXFxgXFxgXHJcblxyXG5cclxuXHJcbi0tLSBjb2x1bW4tZW5kIC0tLVxyXG5cclxuXHJcblxyXG4tLS0gZW5kLW11bHRpLWNvbHVtblxyXG5cclxuJHtlZGl0b3IuZ2V0RG9jKCkuZ2V0U2VsZWN0aW9uKCl9YFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yU3RhcnRQb3NpdGlvbi5saW5lID0gY3Vyc29yU3RhcnRQb3NpdGlvbi5saW5lICsgN1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvclN0YXJ0UG9zaXRpb24uY2ggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvclN0YXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRW5jb3VudGVyZWQgYW4gZXJyb3IgaW5zZXJ0aW5nIGEgbXVsdGktY29sdW1uIHJlZ2lvbi4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWQ6IGBhZGQtSURzLVRvLW11bHRpLWNvbHVtbi1yZWdpb25gLFxyXG4gICAgICAgICAgICBuYW1lOiBgRml4IE1pc3NpbmcgSURzIGZvciBNdWx0aS1Db2x1bW4gUmVnaW9uc2AsXHJcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yLCB2aWV3KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgICAgKiBOb3Qgc3VyZSBpZiB0aGVyZSBpcyBhbiBlYXNpZXIgd2F5IHRvIGRvIHRoaXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICogXHJcbiAgICAgICAgICAgICAgICAgICAgICogR2V0IGFsbCBvZiB0aGUgbGluZXMgb2YgdGhlIGRvY3VtZW50IHNwbGl0IGJ5IG5ld2xpbmVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkb2NUZXh0ID0gZWRpdG9yLmdldFJhbmdlKHsgbGluZTogMCwgY2g6IDAgfSwgeyBsaW5lOiBlZGl0b3IuZ2V0RG9jKCkubGluZUNvdW50KCksIGNoOiAwfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVzID0gZG9jVGV4dC5zcGxpdChcIlxcblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0Q29kZWJsb2NrID0gbXVsdGlDb2x1bW5QYXJzZXIuZmluZFN0YXJ0Q29kZWJsb2NrKGRvY1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbnVtQ29kZWJsb2Nrc1VwZGF0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YXJ0Q29kZWJsb2NrLmZvdW5kID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRleHQgb2YgdGhlIHNldHRpbmdzIGJsb2NrIHNvIHdlIGNhbiBjaGVjayBpZiBpdCBjb250YWlucyBhbiBJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyBzbyB3ZSBjYW4gZ2V0IHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IGxpbmUsIHVzZWQgdG8gY2FsY3VsYXRlIHdoZXJlIHRvIGFwcGVuZCBhIG5ldyBJRCBpZiBuZWVkZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNldHRpbmdzVGV4dCA9IGRvY1RleHQuc2xpY2Uoc3RhcnRDb2RlYmxvY2suc3RhcnRQb3NpdGlvbiwgc3RhcnRDb2RlYmxvY2suZW5kUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3RMaW5lT2ZDb2RlYmxvY2tMZW5ndGggPSBzZXR0aW5nc1RleHQuc3BsaXQoXCJcXG5cIilbMF0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGUgbGluZXMgYmVmb3JlIHRoZSBibG9jayB0byBrbm93IHdoZXJlIHRvIHN0YXJ0IHJlcGxhY2luZyB0ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgbGluZXMgaW5jbHVkaW5nIHRoZSBibG9jayB0byBrbm93IHdoZXJlIHRvIHNldCBvdXIgb2Zmc2V0IHRvIGFmdGVyIHRoaXMgaXRlcmF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGluZXNCZWZvcmUgPSBkb2NUZXh0LnNsaWNlKDAsIHN0YXJ0Q29kZWJsb2NrLnN0YXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRSZXBsYWNlbWVudExpbmVJbmRleCA9IChsaW5lc0JlZm9yZS5zcGxpdChcIlxcblwiKS5sZW5ndGggLSAxKSArIGxpbmVPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW5lc09mID0gZG9jVGV4dC5zbGljZSgwLCBzdGFydENvZGVibG9jay5lbmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmRSZXBsYWNlbWVudExpbmVJbmRleCA9ICAobGluZXNPZi5zcGxpdChcIlxcblwiKS5sZW5ndGggLSAxKSArIGxpbmVPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2V0dGluZ3NJRCA9IHBhcnNlU3RhcnRSZWdpb25Db2RlQmxvY2tJRChzZXR0aW5nc1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5nc0lEID09PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSB0aGUgZmlyc3QgbGluZSBvZiB0aGUgY29kZWJsb2NrIGFuZCBhcHBlbmQgYSBuZXcgSUQsIHRoZW4gcmVwbGFjZSB0aGUgZmlyc3QgbGluZSBvZiB0aGUgYmxvY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlbWVudFRleHQgPSBlZGl0b3IuZ2V0UmFuZ2UoeyBsaW5lOiBzdGFydFJlcGxhY2VtZW50TGluZUluZGV4LCBjaDogMCB9LCB7IGxpbmU6IHN0YXJ0UmVwbGFjZW1lbnRMaW5lSW5kZXgsIGNoOiBmaXJzdExpbmVPZkNvZGVibG9ja0xlbmd0aH0pICsgYFxcbklEOiBJRF8ke2dldFVJRCg0KX1gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKHJlcGxhY2VtZW50VGV4dCwgeyBsaW5lOiBzdGFydFJlcGxhY2VtZW50TGluZUluZGV4LCBjaDogMCB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IHN0YXJ0UmVwbGFjZW1lbnRMaW5lSW5kZXgsIGNoOiBmaXJzdExpbmVPZkNvZGVibG9ja0xlbmd0aH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kUmVwbGFjZW1lbnRMaW5lSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bUNvZGVibG9ja3NVcGRhdGVkICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXQgPSBlbmRSZXBsYWNlbWVudExpbmVJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NUZXh0ID0gZG9jVGV4dC5zbGljZShzdGFydENvZGVibG9jay5lbmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29kZWJsb2NrID0gbXVsdGlDb2x1bW5QYXJzZXIuZmluZFN0YXJ0Q29kZWJsb2NrKGRvY1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgICAgICogTG9vcCB0aHJvdWdoIGFsbCBvZiB0aGUgbGluZXMgY2hlY2tpbmcgaWYgdGhlIGxpbmUgaXMgYSBcclxuICAgICAgICAgICAgICAgICAgICAgKiBzdGFydCB0YWcgYW5kIGlmIHNvIGlzIGl0IG1pc3NpbmcgYW4gSUQuXHJcbiAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVzV2l0aG91dElEcyA9IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRXaXRob3V0SURzID0gW11cclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gbXVsdGlDb2x1bW5QYXJzZXIuaXNTdGFydFRhZ1dpdGhJRChsaW5lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEuaXNTdGFydFRhZyA9PT0gdHJ1ZSAmJiBkYXRhLmhhc0tleSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzV2l0aG91dElEcy5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFdpdGhvdXRJRHMucHVzaChsaW5lc1tpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihsaW5lc1dpdGhvdXRJRHMubGVuZ3RoID09PSAwICYmIG51bUNvZGVibG9ja3NVcGRhdGVkID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UgKFwiRm91bmQgMCBtaXNzaW5nIElEcyBpbiB0aGUgY3VycmVudCBkb2N1bWVudC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAqIE5vdyBsb29wIHRocm91Z2ggZWFjaCBsaW5lIHRoYXQgaXMgbWlzc2luZyBhbiBJRCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgKiBnZW5lcmF0ZSBhIHJhbmRvbSBJRCBhbmQgcmVwbGFjZSB0aGUgb3JpZ2luYWwgdGV4dC5cclxuICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGluZXNXaXRob3V0SURzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luYWxUZXh0ID0gdGV4dFdpdGhvdXRJRHNbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSBvcmlnaW5hbFRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnRyaW1FbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGV4dC5jaGFyQXQodGV4dC5sZW5ndGggLSAxKSA9PT0gXCI6XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDAsIHRleHQubGVuZ3RoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBgJHt0ZXh0fTogSURfJHtnZXRVSUQoNCl9YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UodGV4dCwgeyBsaW5lOiBsaW5lc1dpdGhvdXRJRHNbaV0sIGNoOiAwIH0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbGluZTogbGluZXNXaXRob3V0SURzW2ldLCBjaDogb3JpZ2luYWxUZXh0Lmxlbmd0aH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZSAoYFJlcGxhY2VkICR7bGluZXNXaXRob3V0SURzLmxlbmd0aCArIG51bUNvZGVibG9ja3NVcGRhdGVkfSBtaXNzaW5nIElEKHMpIGluIHRoZSBjdXJyZW50IGRvY3VtZW50LmApO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRW5jb3VudGVyZWQgYW4gZXJyb3IgYWRkaWduIElEcyB0byBtdWx0aS1jb2x1bW4gcmVnaW9ucy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZDogYG1jbS1Ub2dnbGUtRG9jdW1lbnQtUmVmbG93YCxcclxuICAgICAgICAgICAgbmFtZTogYFNldHVwIE11bHRpLUNvbHVtbiBSZWZsb3cgLSBNdWx0aS1Db2x1bW4gTWFya2Rvd25gLFxyXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvciwgdmlldykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIodmlldy5maWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzUmVmbG93ID0gaXNNdWx0aUNvbHVtblJlZmxvdyhmcm9udG1hdHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNSZWZsb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXJbXCJNdWx0aS1Db2x1bW4gTWFya2Rvd25cIl0gPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcIk51bWJlciBvZiBDb2x1bW5zXCI6IDJ9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XCJDb2x1bW4gU2l6ZVwiOiBcIlN0YW5kYXJkXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZWRpdG9yLnJlZnJlc2goKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLlVwZGF0ZU9wZW5GaWxlUHJldmlld3MoKTtcclxuICAgICAgICB9LCA1MDApKTtcclxuICAgIH1cclxuXHJcbiAgICBVcGRhdGVPcGVuRmlsZVByZXZpZXdzKCkge1xyXG5cclxuICAgICAgICBsZXQgZmlsZU1hbmFnZXJzID0gdGhpcy5nbG9iYWxNYW5hZ2VyLmdldEFsbEZpbGVNYW5hZ2VycygpO1xyXG4gICAgICAgIGZpbGVNYW5hZ2Vycy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHJlZ2lvbmFsTWFuYWdlcnMgPSBlbGVtZW50LmdldEFsbFJlZ2lvbmFsTWFuYWdlcnMoKTtcclxuICAgICAgICAgICAgcmVnaW9uYWxNYW5hZ2Vycy5mb3JFYWNoKHJlZ2lvbk1hbmFnZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZWdpb25NYW5hZ2VyLnVwZGF0ZVJlbmRlcmVkTWFya2Rvd24oKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXR1cE1hcmtkb3duUG9zdFByb2Nlc3NvcigpIHtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKGFzeW5jIChlbCwgY3R4KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZih0aGlzLnNldHRpbmdzLnJlbmRlck9uTW9iaWxlID09PSBmYWxzZSAmJlxyXG4gICAgICAgICAgICAgICBQbGF0Zm9ybS5pc01vYmlsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VQYXRoID0gY3R4LnNvdXJjZVBhdGg7XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlsZURPTU1hbmFnZXIgPSB0aGlzLmdsb2JhbE1hbmFnZXIuZ2V0RmlsZU1hbmFnZXIoc291cmNlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmKGZpbGVET01NYW5hZ2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGb3VuZCBudWxsIERPTSBtYW5hZ2VyLiBDb3VsZCBub3QgcHJvY2VzcyBtdWx0aS1jb2x1bW4gbWFya2Rvd24uXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIZXJlIHdlIGNoZWNrIGlmIHRoZSBleHBvcnQgXCJwcmludFwiIGZsYWcgaXMgaW4gdGhlIERPTSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGlmIHdlXHJcbiAgICAgICAgICAgICAqIGFyZSBleHBvcnRpbmcgYW5kIGhhbmRsZSB0aGF0IGNhc2UuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZih0aGlzLmNoZWNrRXhwb3J0aW5nKGVsKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZXhwb3J0RG9jdW1lbnRUb1BERihlbCwgZmlsZURPTU1hbmFnZXIsIHNvdXJjZVBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGluZm8gZm9yIG91ciBjdXJyZW50IGNvbnRleHQgYW5kIHRoZW4gY2hlY2tcclxuICAgICAgICAgICAgLy8gaWYgdGhlIGVudGlyZSB0ZXh0IGNvbnRhaW5zIGEgc3RhcnQgdGFnLiBJZiB0aGVyZSBpc1xyXG4gICAgICAgICAgICAvLyBubyBzdGFydCB0YWcgaW4gdGhlIGRvY3VtZW50IHdlIGNhbiBqdXN0IHJldHVybiBhbmRcclxuICAgICAgICAgICAgLy8gaWdub3JlIHRoZSByZXN0IG9mIHRoZSBwYXJzaW5nLlxyXG4gICAgICAgICAgICBsZXQgaW5mbyA9IGN0eC5nZXRTZWN0aW9uSW5mbyhlbCk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV2UgbmVlZCB0aGUgY29udGV4dCBpbmZvIHRvIHByb3Blcmx5IHBhcnNlIHNvIHJldHVybmluZyBoZXJlIFxyXG4gICAgICAgICAgICAgKiBpbmZvIGlzIG51bGwuIFRPRE86IFNldCBlcnJvciBpbiB2aWV3IGlmIHRoaXMgb2NjdXJzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYoIWluZm8pIHtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBkb2NTdHJpbmcgPSBpbmZvLnRleHQ7XHJcbiAgICAgICAgICAgIGxldCBkb2NMaW5lcyA9IGRvY1N0cmluZy5zcGxpdChcIlxcblwiKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZWZsb3dGcm9udG1hdHRlciA9IGlzTXVsdGlDb2x1bW5SZWZsb3coY3R4LmZyb250bWF0dGVyKTtcclxuICAgICAgICAgICAgaWYocmVmbG93RnJvbnRtYXR0ZXIgPT09IHRydWUpIHtcclxuIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEb2NSZWZsb3coZWwsIGN0eCwgc291cmNlUGF0aCwgZmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZywgaW5mbyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlRE9NTWFuYWdlci5yZW1vdmVSZWdpb24oXCJNdWx0aS1Db2x1bW4gUmVmbG93IFJlZ2lvblwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIElmIHdlIGVuY291bnRlciBhIHN0YXJ0IHRhZyBvbiB0aGUgZG9jdW1lbnQgd2Ugc2V0IHRoZSBmbGFnIHRvIHN0YXJ0XHJcbiAgICAgICAgICAgICAqIHBhcnNpbmcgdGhlIHJlc3Qgb2YgdGhlIGRvY3VtZW50LlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYobXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNSZWdpb25TdGFydChkb2NTdHJpbmcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZmlsZURPTU1hbmFnZXIuc2V0SGFzU3RhcnRUYWcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIFxyXG4gICAgICAgICAgICAgKiBJZiB0aGUgZG9jdW1lbnQgZG9lcyBub3QgY29udGFpbiBhbnkgc3RhcnQgdGFncyB3ZSBpZ25vcmUgdGhlXHJcbiAgICAgICAgICAgICAqIHJlc3Qgb2YgdGhlIHBhcnNpbmcuIFRoaXMgaXMgb25seSBzZXQgdG8gdHJ1ZSBvbmNlIHRoZSBmaXJzdFxyXG4gICAgICAgICAgICAgKiBzdGFydCB0YWcgZWxlbWVudCBpcyBwYXJzZWQgYWJvdmUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZihmaWxlRE9NTWFuYWdlci5nZXRIYXNTdGFydFRhZygpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGFrZSB0aGUgaW5mbyBwcm92aWRlZCBhbmQgZ2VuZXJhdGUgdGhlIHJlcXVpcmVkIHZhcmlhYmxlcyBmcm9tIFxyXG4gICAgICAgICAgICAgKiB0aGUgbGluZSBzdGFydCBhbmQgZW5kIHZhbHVlcy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGxldCByZWxhdGl2ZVRleHRzOiBFbGVtZW50UmVsYXRpdmVMb2NhdGlvbkRhdGEgPSBleHRyYWN0RWxlbWVudFJlbGF0aXZlTG9jYXRpb25EYXRhKGRvY0xpbmVzLCBpbmZvKTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBEZXByZWNpYXRlZCBTdGFydCBUYWdcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIElmIHRoZSBjdXJyZW50IGxpbmUgaXMgYSBzdGFydCB0YWcgd2Ugd2FudCB0byBzZXQgdXAgdGhlXHJcbiAgICAgICAgICAgICAqIHJlZ2lvbiBtYW5hZ2VyLiBUaGUgcmVnaW9uYWwgbWFuYWdlciB0YWtlcyBjYXJlXHJcbiAgICAgICAgICAgICAqIG9mIGFsbCBpdGVtcyBiZXR3ZWVuIGl0J3Mgc3RhcnQgYW5kIGVuZCB0YWdzIHdoaWxlIHRoZVxyXG4gICAgICAgICAgICAgKiBmaWxlIG1hbmFnZXIgd2UgZ290IGFib3ZlIGFib3ZlIHRha2VzIGNhcmUgb2YgYWxsIHJlZ2lvbmFsIFxyXG4gICAgICAgICAgICAgKiBtYW5hZ2VycyBpbiBlYWNoIGZpbGUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZihtdWx0aUNvbHVtblBhcnNlci5jb250YWluc1N0YXJ0VGFnKHJlbGF0aXZlVGV4dHMudGV4dE9mRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlRGVwcmVjaWF0ZWRTdGFydEVsZW1lbnQoZWwsIHJlbGF0aXZlVGV4dHMubGluZXNPZkVsZW1lbnQsIGN0eCwgZmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIERlcHJlY2lhdGVkIFN0YXJ0IFRhZ1xyXG5cclxuICAgICAgICAgICAgLy8gUGFuZG9jIFN0YXJ0IFJlZ2lvbiBUYWcuXHJcbiAgICAgICAgICAgIGlmKGNvbnRhaW5zUGFuZG9jLmNvbnRhaW5zUGFuZG9jU3RhcnRUYWcocmVsYXRpdmVUZXh0cy50ZXh0T2ZFbGVtZW50KSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNyZWF0ZVBhbmRvY1N0YXJ0RWxlbWVudChlbCwgcmVsYXRpdmVUZXh0cy50ZXh0T2ZFbGVtZW50LCBjdHgsIGZpbGVET01NYW5hZ2VyLCBkb2NTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQ2hlY2sgaWYgYW55IG9mIHRoZSBsaW5lcyBhYm92ZSB1cyBjb250YWluIGEgc3RhcnQgYmxvY2ssIGFuZCBpZlxyXG4gICAgICAgICAgICAgKiBzbyBnZXQgdGhlIGxpbmVzIGZyb20gb3VyIGN1cnJlbnQgZWxlbWVudCB0byB0aGUgc3RhcnQgYmxvY2suXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsZXQgc3RhcnRCb2NrQWJvdmUgPSBtdWx0aUNvbHVtblBhcnNlci5nZXRTdGFydERhdGFBYm92ZUxpbmUocmVsYXRpdmVUZXh0cy5saW5lc0Fib3ZlQXJyYXkpO1xyXG4gICAgICAgICAgICBpZihzdGFydEJvY2tBYm92ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBXZSBub3cga25vdyB3ZSdyZSB3aXRoaW4gYSBtdWx0aS1jb2x1bW4gcmVnaW9uLCBzbyB3ZSB1cGRhdGUgb3VyXHJcbiAgICAgICAgICAgICAqIGxpc3Qgb2YgbGluZXMgYWJvdmUgdG8ganVzdCBiZSB0aGUgaXRlbXMgd2l0aGluIHRoaXMgcmVnaW9uLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVsYXRpdmVUZXh0cy5saW5lc0Fib3ZlQXJyYXkgPSBzdGFydEJvY2tBYm92ZS5saW5lc0Fib3ZlQXJyYXk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV2UgdXNlIHRoZSBzdGFydCBibG9jaydzIGtleSB0byBnZXQgb3VyIHJlZ2lvbmFsIG1hbmFnZXIuIElmIHRoaXNcclxuICAgICAgICAgICAgICogbG9va3VwIGZhaWxzIHdlIGNhbiBub3QgY29udGludWUgcHJvY2Vzc2luZyB0aGlzIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsZXQgcmVnaW9uYWxDb250YWluZXI6IFJlZ2lvbk1hbmFnZXJDb250YWluZXIgPSBmaWxlRE9NTWFuYWdlci5nZXRSZWdpb25hbENvbnRhaW5lcihzdGFydEJvY2tBYm92ZS5zdGFydEJsb2NrS2V5KTtcclxuICAgICAgICAgICAgaWYocmVnaW9uYWxDb250YWluZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgcmVnaW9uYWxNYW5hZ2VyOiBSZWdpb25NYW5hZ2VyID0gcmVnaW9uYWxDb250YWluZXIuZ2V0UmVnaW9uKCk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVG8gbWFrZSBzdXJlIHdlJ3JlIHBsYWNpbmcgdGhlIGl0ZW0gaW4gdGhlIHJpZ2h0IGxvY2F0aW9uIChhbmQgXHJcbiAgICAgICAgICAgICAqIG92ZXJ3cml0ZSBlbGVtZW50cyB0aGF0IGFyZSBub3cgZ29uZSkgd2Ugbm93IHdhbnQgYWxsIG9mIHRoZVxyXG4gICAgICAgICAgICAgKiBsaW5lcyBhZnRlciB0aGlzIGVsZW1lbnQgdXAgdG8gdGhlIGVuZCB0YWcuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWxhdGl2ZVRleHRzLmxpbmVzQmVsb3dBcnJheSA9ICBtdWx0aUNvbHVtblBhcnNlci5nZXRFbmRCbG9ja0JlbG93KHJlbGF0aXZlVGV4dHMubGluZXNCZWxvd0FycmF5KTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBOb3cgd2UgdGFrZSB0aGUgbGluZXMgYWJvdmUgb3VyIGN1cnJlbnQgZWxlbWVudCB1cCB1bnRpbCB0aGVcclxuICAgICAgICAgICAgICogc3RhcnQgcmVnaW9uIHRhZyBhbmQgcmVuZGVyIHRoYXQgaW50byBhbiBIVE1MIGVsZW1lbnQuIFdlIHdpbGwgXHJcbiAgICAgICAgICAgICAqIHVzZSB0aGVzZSBlbGVtZW50cyB0byBkZXRlcm1pbmUgd2hlcmUgdG8gcGxhY2Ugb3VyIGN1cnJlbnQgZWxlbWVudC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlZ2lvbmFsTWFuYWdlciA9IHRoaXMuYXBwZW5kVG9SZWdpb25hbE1hbmFnZXIoZWwsIHJlZ2lvbmFsQ29udGFpbmVyLCBjdHgsIHJlbGF0aXZlVGV4dHMsIHNvdXJjZVBhdGgsIHN0YXJ0Qm9ja0Fib3ZlLCAoZG9tT2JqOiBET01PYmplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIG9uVW5sb2FkRWxlbWVudChkb21PYmosIHJlZ2lvbmFsQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFwcGVuZFRvUmVnaW9uYWxNYW5hZ2VyKGVsOiBIVE1MRWxlbWVudCwgcmVnaW9uYWxDb250YWluZXI6IFJlZ2lvbk1hbmFnZXJDb250YWluZXIsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCwgcmVsYXRpdmVMaW5lczogRWxlbWVudFJlbGF0aXZlTG9jYXRpb25EYXRhLCBzb3VyY2VQYXRoOiBzdHJpbmcsIHBhcmVudFN0YXJ0QmxvY2s6IG11bHRpQ29sdW1uUGFyc2VyLlN0YXJ0VGFnRGF0YSwgb25VbmxvYWRDYWxsYmFjazogKGRvbU9iajogRE9NT2JqZWN0KSA9PiB2b2lkKSB7XHJcblxyXG4gICAgICAgIGxldCB7IGxpbmVzQWJvdmVBcnJheSwgbGluZXNPZkVsZW1lbnQsIGxpbmVzQmVsb3dBcnJheSwgdGV4dE9mRWxlbWVudCB9ID0gcmVsYXRpdmVMaW5lcztcclxuXHJcbiAgICAgICAgbGV0IHNpYmxpbmdzQWJvdmU6IEhUTUxEaXZFbGVtZW50ID0gcmVuZGVyTWFya2Rvd25Gcm9tTGluZXMobGluZXNBYm92ZUFycmF5LCBzb3VyY2VQYXRoKTtcclxuXHJcbiAgICAgICAgbGV0IHNpYmxpbmdzQmVsb3c6IEhUTUxEaXZFbGVtZW50ID0gcmVuZGVyTWFya2Rvd25Gcm9tTGluZXMobGluZXNCZWxvd0FycmF5LCBzb3VyY2VQYXRoKTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgcmVnaW9uYWxNYW5hZ2VyOiBSZWdpb25NYW5hZ2VyID0gcmVnaW9uYWxDb250YWluZXIuZ2V0UmVnaW9uKCk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldCB1cCBvdXIgZG9tIG9iamVjdCB0byBiZSBhZGRlZCB0byB0aGUgbWFuYWdlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZXQgY3VycmVudE9iamVjdDogRE9NT2JqZWN0ID0gbmV3IERPTU9iamVjdChlbCwgbGluZXNPZkVsZW1lbnQpO1xyXG4gICAgICAgIGVsLmlkID0gY3VycmVudE9iamVjdC5VSUQ7XHJcblxyXG4gICAgICAgIGN1cnJlbnRPYmplY3QgPSBUYXNrTGlzdERPTU9iamVjdC5jaGVja0ZvclRhc2tMaXN0RWxlbWVudChjdXJyZW50T2JqZWN0KTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTm93IHdlIGFkZCB0aGUgb2JqZWN0IHRvIHRoZSBtYW5hZ2VyIGFuZCB0aGVuIHNldHVwIHRoZVxyXG4gICAgICAgICAqIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBvYmplY3QgaXMgcmVtb3ZlZCBmcm9tIHZpZXcgdGhhdCB3aWxsIHJlbW92ZVxyXG4gICAgICAgICAqIHRoZSBpdGVtIGZyb20gdGhlIG1hbmFnZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGFkZEluZGV4ID0gcmVnaW9uYWxNYW5hZ2VyLmFkZE9iamVjdChzaWJsaW5nc0Fib3ZlLCBzaWJsaW5nc0JlbG93LCBjdXJyZW50T2JqZWN0KTtcclxuXHJcbiAgICAgICAgbGV0IGVsZW1lbnRNYXJrZG93blJlbmRlcmVyID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoZWwpO1xyXG4gICAgICAgIGVsZW1lbnRNYXJrZG93blJlbmRlcmVyLm9udW5sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBvblVubG9hZENhbGxiYWNrKGN1cnJlbnRPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguYWRkQ2hpbGQoZWxlbWVudE1hcmtkb3duUmVuZGVyZXIpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOb3cgd2UgY2hlY2sgaWYgb3VyIGN1cnJlbnQgZWxlbWVudCBpcyBhIHNwZWNpYWwgZmxhZyBzbyB3ZSBjYW5cclxuICAgICAgICAgKiBwcm9wZXJseSBzZXQgdGhlIGVsZW1lbnQgdGFnIHdpdGhpbiB0aGUgcmVnaW9uYWwgbWFuYWdlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAobXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNFbmRUYWcoZWwudGV4dENvbnRlbnQpID09PSB0cnVlICYmXHJcbiAgICAgICAgICAgIHBhcmVudFN0YXJ0QmxvY2suc3RhcnRCbG9ja1R5cGUgIT09IFwiUEFET0NcIikge1xyXG5cclxuICAgICAgICAgICAgY3VycmVudE9iamVjdC5lbGVtZW50VHlwZSA9IFwidW5SZW5kZXJlZFwiO1xyXG4gICAgICAgICAgICByZWdpb25hbE1hbmFnZXIudXBkYXRlRWxlbWVudFRhZyhjdXJyZW50T2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLmVuZFJlZ2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250YWluc1BhbmRvYy5pc1ZhbGlkUGFuZG9jRW5kVGFnKGxpbmVzQWJvdmVBcnJheSwgZWwudGV4dENvbnRlbnQpID09PSB0cnVlICYmXHJcbiAgICAgICAgICAgIHBhcmVudFN0YXJ0QmxvY2suc3RhcnRCbG9ja1R5cGUgPT09IFwiUEFET0NcIikge1xyXG5cclxuICAgICAgICAgICAgY3VycmVudE9iamVjdC5lbGVtZW50VHlwZSA9IFwidW5SZW5kZXJlZFwiO1xyXG4gICAgICAgICAgICByZWdpb25hbE1hbmFnZXIudXBkYXRlRWxlbWVudFRhZyhjdXJyZW50T2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLmVuZFJlZ2lvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG11bHRpQ29sdW1uUGFyc2VyLmNvbnRhaW5zQ29sRW5kVGFnKHRleHRPZkVsZW1lbnQpID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50T2JqZWN0LmVsZW1lbnRUeXBlID0gXCJ1blJlbmRlcmVkXCI7XHJcbiAgICAgICAgICAgIHJlZ2lvbmFsTWFuYWdlci51cGRhdGVFbGVtZW50VGFnKGN1cnJlbnRPYmplY3QuVUlELCBET01PYmplY3RUYWcuY29sdW1uQnJlYWspO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChtdWx0aUNvbHVtblBhcnNlci5jb250YWluc0NvbFNldHRpbmdzVGFnKHRleHRPZkVsZW1lbnQpID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50T2JqZWN0LmVsZW1lbnRUeXBlID0gXCJ1blJlbmRlcmVkXCI7XHJcbiAgICAgICAgICAgIHJlZ2lvbmFsTWFuYWdlciA9IHJlZ2lvbmFsQ29udGFpbmVyLnNldFJlZ2lvblNldHRpbmdzKHRleHRPZkVsZW1lbnQpO1xyXG4gICAgICAgICAgICByZWdpb25hbE1hbmFnZXIudXBkYXRlRWxlbWVudFRhZyhjdXJyZW50T2JqZWN0LlVJRCwgRE9NT2JqZWN0VGFnLnJlZ2lvblNldHRpbmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0RWxlbWVudENTUyhjdXJyZW50T2JqZWN0LCBlbCk7XHJcblxyXG4gICAgICAgIHJlZ2lvbmFsTWFuYWdlci5yZW5kZXJSZWdpb25FbGVtZW50c1RvU2NyZWVuKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lvbmFsTWFuYWdlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXR1cE1hcmtkb3duQ29kZWJsb2NrUG9zdFByb2Nlc3NvcihzdGFydFN0cjogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihzdGFydFN0ciwgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgaWYodGhpcy5zZXR0aW5ncy5yZW5kZXJPbk1vYmlsZSA9PT0gZmFsc2UgJiZcclxuICAgICAgICAgICAgICAgIFBsYXRmb3JtLmlzTW9iaWxlID09PSB0cnVlKSB7XHJcbiBcclxuICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVBhdGggPSBjdHguc291cmNlUGF0aDtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy8gU2V0IHVwIG91ciBDU1Mgc28gdGhhdCB0aGUgY29kZWJsb2NrIG9ubHkgcmVuZGVycyB0aGlzIGRhdGEgaW4gcmVhZGluZyBtb2RlXHJcbiAgICAgICAgICAgIC8vIHNvdXJjZS9saXZlIHByZXZpZXcgbW9kZSBpcyBoYW5kbGVkIGJ5IHRoZSBDTTYgaW1wbGVtZW50YXRpb24uXHJcbiAgICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQ/LmFkZENsYXNzKFwicHJlaXZldy1tY20tc3RhcnQtYmxvY2tcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFRvIGRldGVybWluZSB3aGF0IGtpbmQgb2YgdmlldyB3ZSBhcmUgcmVuZGVyaW5nIGluIHdlIG5lZWQgYSBtYXJrZG93biBsZWFmLlxyXG4gICAgICAgICAgICAvLyBSZWFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgcmV0dXJuIGhlcmUgc2luY2UgcmVuZGVyaW5nIGlzIG9ubHkgZG9uZSBpbiBtYXJrZG93biBsZWF2ZXMuXHJcbiAgICAgICAgICAgIGxldCBtYXJrZG93bkxlYXZlcyA9IGFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFwibWFya2Rvd25cIik7XHJcbiAgICAgICAgICAgIGlmKG1hcmtkb3duTGVhdmVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZ2xvYmFsTWFuYWdlciA9PT0gbnVsbCB8fCB0aGlzLmdsb2JhbE1hbmFnZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJHbG9iYWwgbWFuYWdlciBpcyB1bmRlZmluZWQ/XCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZmlsZURPTU1hbmFnZXIgPSB0aGlzLmdsb2JhbE1hbmFnZXIuZ2V0RmlsZU1hbmFnZXIoc291cmNlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmKGZpbGVET01NYW5hZ2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGN0eC5mcm9udG1hdHRlciAmJiBcclxuICAgICAgICAgICAgICAgY3R4LmZyb250bWF0dGVyW1wiTXVsdGktQ29sdW1uIFJlZmxvd1wiXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlRE9NTWFuYWdlci5yZW1vdmVSZWdpb24oXCJNdWx0aS1Db2x1bW4gUmVmbG93IFJlZ2lvblwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2V0IGZpbGUgdG8gaGF2ZSBzdGFydCB0YWcuXHJcbiAgICAgICAgICAgIGZpbGVET01NYW5hZ2VyLnNldEhhc1N0YXJ0VGFnKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgaW5mbyBmb3Igb3VyIGN1cnJlbnQgY29udGV4dCBhbmQgdGhlbiBjaGVja1xyXG4gICAgICAgICAgICAvLyBpZiB0aGUgZW50aXJlIHRleHQgY29udGFpbnMgYSBzdGFydCB0YWcuIElmIHRoZXJlIGlzXHJcbiAgICAgICAgICAgIC8vIG5vIHN0YXJ0IHRhZyBpbiB0aGUgZG9jdW1lbnQgd2UgY2FuIGp1c3QgcmV0dXJuIGFuZFxyXG4gICAgICAgICAgICAvLyBpZ25vcmUgdGhlIHJlc3Qgb2YgdGhlIHBhcnNpbmcuXHJcbiAgICAgICAgICAgIGxldCBpbmZvID0gY3R4LmdldFNlY3Rpb25JbmZvKGVsKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFdlIG5lZWQgdGhlIGNvbnRleHQgaW5mbyB0byBwcm9wZXJseSBwYXJzZSBzbyByZXR1cm5pbmcgaGVyZSBcclxuICAgICAgICAgICAgICogaW5mbyBpcyBudWxsLiBUT0RPOiBTZXQgZXJyb3IgaW4gdmlldyBpZiB0aGlzIG9jY3Vycy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmKCFpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgLyoqIFxyXG4gICAgICAgICAgICAgKiBTZXQgdXAgdGhlIGN1cnJlbnQgZWxlbWVudCB0byBhY3QgYXMgdGhlIHBhcmVudCBmb3IgdGhlIFxyXG4gICAgICAgICAgICAgKiBtdWx0aS1jb2x1bW4gcmVnaW9uLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25Sb290Q29udGFpbmVyRGl2KVxyXG4gICAgICAgICAgICBsZXQgcmVuZGVyRXJyb3JSZWdpb24gPSBlbC5jcmVhdGVEaXYoe1xyXG4gICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25FcnJvckNvbnRhaW5lckRpdn0gJHtNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvbkVycm9yTWVzc2FnZX1gLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHJlbmRlckNvbHVtblJlZ2lvbiA9IGVsLmNyZWF0ZURpdih7XHJcbiAgICAgICAgICAgICAgICBjbHM6IE11bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZ2lvbkNvbnRlbnRDb250YWluZXJEaXZcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICAgICAgbGV0IHJlZ2lvbktleSA9IHBhcnNlU3RhcnRSZWdpb25Db2RlQmxvY2tJRChzb3VyY2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgY3JlYXRlTmV3UmVnaW9uTWFuYWdlciA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKGZpbGVET01NYW5hZ2VyLmNoZWNrS2V5RXhpc3RzKHJlZ2lvbktleSkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlTmV3UmVnaW9uTWFuYWdlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGV0IHsgbnVtYmVyT2ZUYWdzLCBrZXlzIH0gPSBtdWx0aUNvbHVtblBhcnNlci5jb3VudFN0YXJ0VGFncyhpbmZvLnRleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IG51bU1hdGNoZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG51bWJlck9mVGFnczsgaSsrKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBjaGVja2VkIGlmIGtleSBleGlzdHMgb25lIG9mIHRoZXNlIGhhcyB0byBtYXRjaC5cclxuICAgICAgICAgICAgICAgICAgICBpZihrZXlzW2ldID09PSByZWdpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtTWF0Y2hlcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBkaXNwbGF5IGFuIGVycm9yIGlmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMiBvZiB0aGUgc2FtZSBpZCBhY3Jvc3NcclxuICAgICAgICAgICAgICAgIC8vIHRoZSB3aG9sZSBkb2N1bWVudC4gVGhpcyBwcmV2ZW50cyBlcnJvcyB3aGVuIG9ic2lkaWFuIHJlbG9hZHMgdGhlIHdob2xlIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlcmUgYXJlIHR3byBvZiB0aGUgc2FtZSBrZXkgaW4gdGhlIG1hcC5cclxuICAgICAgICAgICAgICAgIGlmKG51bU1hdGNoZXMgPj0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlZ2lvbktleSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJFcnJvclJlZ2lvbi5pbm5lclRleHQgPSBcIkZvdW5kIG11bHRpcGxlIHJlZ2lvbnMgd2l0aCBlbXB0eSBJRHMuIFBsZWFzZSBzZXQgYSB1bmlxdWUgSUQgYWZ0ZXIgZWFjaCBzdGFydCB0YWcuXFxuRUc6ICc9PT0gbXVsdGktY29sdW1uLXN0YXJ0OiByYW5kb21JRCdcXG5PciB1c2UgJ0ZpeCBNaXNzaW5nIElEcycgaW4gdGhlIGNvbW1hbmQgcGFsZXR0ZSBhbmQgcmVsb2FkIHRoZSBkb2N1bWVudC5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JSZWdpb24uaW5uZXJUZXh0ID0gXCJSZWdpb24gSUQgYWxyZWFkeSBleGlzdHMgaW4gZG9jdW1lbnQsIHBsZWFzZSBzZXQgYSB1bmlxdWUgSUQuXFxuRUc6ICc9PT0gbXVsdGktY29sdW1uLXN0YXJ0OiByYW5kb21JRCdcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWwuaWQgPSBgTXVsdGlDb2x1bW5JRDoke3JlZ2lvbktleX1gXHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIElmIHNvbWV0aGluZyBjaGFuZ2VzIGluIHRoZSBjb2RlYmxvY2sgd2UgZG9udCBuZWNlc3NhcmlseSB3YW50IHRvIHVwZGF0ZSBvdXJcclxuICAgICAgICAgICAgLy8gb2xkIHJlZmVyZW5jZSB0byB0aGUgcmVnaW9uIG1hbmFnZXIuIFRoaXMgY291bGQgYmUgYSBwb3RlbnRpYWwgYnVnIGFyZWEuXHJcbiAgICAgICAgICAgIGlmKGNyZWF0ZU5ld1JlZ2lvbk1hbmFnZXIgPT09IHRydWUpIHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyByZWdpb25hbCBtYW5hZ2VyLlxyXG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRNYXJrZG93blJlbmRlcmVyID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICAgICAgZmlsZURPTU1hbmFnZXIuY3JlYXRlUmVnaW9uYWxNYW5hZ2VyKHJlZ2lvbktleSwgZWwsIHJlbmRlckVycm9yUmVnaW9uLCByZW5kZXJDb2x1bW5SZWdpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIHRoZSBvbiB1bmxvYWQgY2FsbGJhY2suIFRoaXMgY2FuIGJlIGNhbGxlZCBpZiB0aGUgdXNlciBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgc3RhcnQvc2V0dGluZ3MgY29kZWJsb2NrIGluIGFueSB3YXkuIFdlIG9ubHkgd2FudCB0byB1bmxvYWRcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmaWxlIGlzIGJlaW5nIHJlbW92ZWQgZnJvbSB2aWV3LlxyXG4gICAgICAgICAgICAgICAgZWxlbWVudE1hcmtkb3duUmVuZGVyZXIub251bmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZmlsZURPTU1hbmFnZXIgJiYgZmlsZVN0aWxsSW5WaWV3KHNvdXJjZVBhdGgpID09PSBmYWxzZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmRlYnVnKFwiRmlsZSBub3QgaW4gYW55IG1hcmtkb3duIGxlYWYuIFJlbW92aW5nIHJlZ2lvbiBmcm9tIGRvbSBtYW5hZ2VyLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlRE9NTWFuYWdlci5yZW1vdmVSZWdpb24ocmVnaW9uS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY3R4LmFkZENoaWxkKGVsZW1lbnRNYXJrZG93blJlbmRlcmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgcmVnaW9uYWxNYW5hZ2VyQ29udGFpbmVyID0gZmlsZURPTU1hbmFnZXIuZ2V0UmVnaW9uYWxDb250YWluZXIocmVnaW9uS2V5KTtcclxuICAgICAgICAgICAgaWYocmVnaW9uYWxNYW5hZ2VyQ29udGFpbmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnaW9uYWxNYW5hZ2VyID0gcmVnaW9uYWxNYW5hZ2VyQ29udGFpbmVyLnNldFJlZ2lvblNldHRpbmdzKHNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICByZWdpb25hbE1hbmFnZXIucmVnaW9uUGFyZW50ID0gZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuICAgIHJlbmRlckRvY1JlZmxvdyhlbDogSFRNTEVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCwgc291cmNlUGF0aDogc3RyaW5nLCBmaWxlRE9NTWFuYWdlcjogRmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZzogc3RyaW5nLCBpbmZvOiBNYXJrZG93blNlY3Rpb25JbmZvcm1hdGlvbikge1xyXG5cclxuICAgICAgICBsZXQgcmVnaW9uYWxDb250YWluZXI6IFJlZ2lvbk1hbmFnZXJDb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgIGlmKGZpbGVET01NYW5hZ2VyLmNoZWNrS2V5RXhpc3RzKFwiTXVsdGktQ29sdW1uIFJlZmxvdyBSZWdpb25cIikgPT09IHRydWUgJiZcclxuICAgICAgICAgICBlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZnJvbnRtYXR0ZXJcIikubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlZ2lvbmFsQ29udGFpbmVyID0gZmlsZURPTU1hbmFnZXIuZ2V0UmVnaW9uYWxDb250YWluZXIoXCJNdWx0aS1Db2x1bW4gUmVmbG93IFJlZ2lvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihmaWxlRE9NTWFuYWdlci5jaGVja0tleUV4aXN0cyhcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIpID09PSB0cnVlICYmXHJcbiAgICAgICAgICAgICAgICBlbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZnJvbnRtYXR0ZXJcIikubGVuZ3RoID09PSAxKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyZW50RWwgPSBjcmVhdGVEaXYoKVxyXG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChwYXJlbnRFbCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgY3VycmVudCBkYXRhLCByZW1vdmUgb2xkIHJlZ2lvbi5cclxuICAgICAgICAgICAgcmVnaW9uYWxDb250YWluZXIgPSBmaWxlRE9NTWFuYWdlci5nZXRSZWdpb25hbENvbnRhaW5lcihcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIpO1xyXG4gICAgICAgICAgICBsZXQgZG9tTGlzdCA9IHJlZ2lvbmFsQ29udGFpbmVyLmdldFJlZ2lvbigpLmdldFJlZ2lvbkRhdGEoKS5kb21MaXN0LnNsaWNlKCk7XHJcbiAgICAgICAgICAgIGZpbGVET01NYW5hZ2VyLnJlbW92ZVJlZ2lvbihcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyByZWdpb24uXHJcbiAgICAgICAgICAgIHNldHVwU3RhcnRUYWcocGFyZW50RWwsIGN0eCwgZmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZywgXCJNdWx0aS1Db2x1bW4gUmVmbG93IFJlZ2lvblwiKTtcclxuICAgICAgICAgICAgcmVnaW9uYWxDb250YWluZXIgPSBmaWxlRE9NTWFuYWdlci5nZXRSZWdpb25hbENvbnRhaW5lcihcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIpO1xyXG4gICAgICAgICAgICBsZXQgc2V0dGluZ3MgPSBnZXRNdWx0aUNvbHVtblNldHRpbmdzRnJvbUZyb250bWF0dGVyKGN0eCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgbGVhZiA9IGdldExlYWZGcm9tRmlsZVBhdGgodGhpcy5hcHAud29ya3NwYWNlLCBjdHguc291cmNlUGF0aCk7XHJcbiAgICAgICAgICAgIGxldCBjbGllbnRIZWlnaHQgPSBjYWxjVmlzaWJsZUNsaWV0SGVpZ2h0KGxlYWYsIHRoaXMuYXBwLndvcmtzcGFjZSk7XHJcbiAgICAgICAgICAgIGlmKHNldHRpbmdzLmNvbHVtbkhlaWdodCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuY29sdW1uSGVpZ2h0ID0gSFRNTFNpemluZy5jcmVhdGUoKS5zZXRXaWR0aChjbGllbnRIZWlnaHQpLnNldFVuaXRzKFwicHhcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5jb2x1bW5IZWlnaHQgPSBzZXR0aW5ncy5jb2x1bW5IZWlnaHQuY29udmVydFRvUFgodGhpcy5hcHAud29ya3NwYWNlLmNvbnRhaW5lckVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWdpb25hbENvbnRhaW5lci5zZXRSZWdpb25QYXJzZWRTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBSZS1SZW5kZXIgYWZ0ZXIgc21hbGwgZGVsYXkuXHJcbiAgICAgICAgICAgIC8vIERlbGF5IGlzIHNvIHRoZSBhdXRvIGxheW91dCBjaGVjayBjYW4gcHJvcGVybHkgcmVhZCB0aGUgY2xpZW50IGhlaWdodC5cclxuICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gZGVsYXlSZW5kZXIoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+IHsgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYWxsIGl0ZW1zIHRvIHJlZ2lvbi5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVnaW9uYWxNYW5hZ2VyID0gcmVnaW9uYWxDb250YWluZXIuZ2V0UmVnaW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3RMZW5ndGggPSBkb21MaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGlzdExlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZG9tT2JqID0gZG9tTGlzdC5zaGlmdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbmFsTWFuYWdlci5hZGRPYmplY3RBdEluZGV4KGRvbU9iaiwgaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRFbGVtZW50Q1NTKGRvbU9iaiwgZG9tT2JqLm9yaWdpbmFsRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWdpb25hbENvbnRhaW5lci5nZXRSZWdpb24oKS5yZW5kZXJSZWdpb25FbGVtZW50c1RvU2NyZWVuKCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxheVJlbmRlcigpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBlbGVtZW50IHRvIGhpdCB0aGlzIHBvaW50IGFwcGVhcnMgdG8gYmUgdGhlIHlhbWwgaW5mb3JtYXRpb24gd2hpY2ggd2UgY2FuIHVzZVxyXG4gICAgICAgICAgICAvLyBhcyBvdXIgcm9vdCBkaXYgc2luY2UgdGhlIHdob2xlIGRvYyBpcyBnb2luZyB0byBiZSByZS1mb3JtYXR0ZWQuXHJcbiAgICAgICAgICAgIGxldCBwYXJlbnRFbCA9IGNyZWF0ZURpdigpXHJcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHBhcmVudEVsKTtcclxuXHJcbiAgICAgICAgICAgIHNldHVwU3RhcnRUYWcocGFyZW50RWwsIGN0eCwgZmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZywgXCJNdWx0aS1Db2x1bW4gUmVmbG93IFJlZ2lvblwiKTtcclxuICAgICAgICAgICAgcmVnaW9uYWxDb250YWluZXIgPSBmaWxlRE9NTWFuYWdlci5nZXRSZWdpb25hbENvbnRhaW5lcihcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNldHRpbmdzID0gZ2V0TXVsdGlDb2x1bW5TZXR0aW5nc0Zyb21Gcm9udG1hdHRlcihjdHgpO1xyXG4gICAgICAgICAgICBsZXQgbGVhZiA9IGdldExlYWZGcm9tRmlsZVBhdGgodGhpcy5hcHAud29ya3NwYWNlLCBjdHguc291cmNlUGF0aCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgY2xpZW50SGVpZ2h0ID0gY2FsY1Zpc2libGVDbGlldEhlaWdodChsZWFmLCB0aGlzLmFwcC53b3Jrc3BhY2UpO1xyXG4gICAgICAgICAgICBpZihzZXR0aW5ncy5jb2x1bW5IZWlnaHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLmNvbHVtbkhlaWdodCA9IEhUTUxTaXppbmcuY3JlYXRlKCkuc2V0V2lkdGgoY2xpZW50SGVpZ2h0KS5zZXRVbml0cyhcInB4XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuY29sdW1uSGVpZ2h0ID0gc2V0dGluZ3MuY29sdW1uSGVpZ2h0LmNvbnZlcnRUb1BYKHRoaXMuYXBwLndvcmtzcGFjZS5jb250YWluZXJFbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVnaW9uYWxDb250YWluZXIuc2V0UmVnaW9uUGFyc2VkU2V0dGluZ3Moc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYocmVnaW9uYWxDb250YWluZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRvY0xpbmVzID0gZG9jU3RyaW5nLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgIGxldCByZWxhdGl2ZVRleHRzOiBFbGVtZW50UmVsYXRpdmVMb2NhdGlvbkRhdGEgPSBleHRyYWN0RWxlbWVudFJlbGF0aXZlTG9jYXRpb25EYXRhKGRvY0xpbmVzLCBpbmZvKTtcclxuICAgICAgICByZWxhdGl2ZVRleHRzLmxpbmVzQmVsb3dBcnJheSA9ICBtdWx0aUNvbHVtblBhcnNlci5nZXRFbmRCbG9ja0JlbG93KHJlbGF0aXZlVGV4dHMubGluZXNCZWxvd0FycmF5KTtcclxuXHJcbiAgICAgICAgaWYobXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNTdGFydFRhZyhyZWxhdGl2ZVRleHRzLnRleHRPZkVsZW1lbnQpIHx8XHJcbiAgICAgICAgICAgbXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNDb2xTZXR0aW5nc1RhZyhyZWxhdGl2ZVRleHRzLnRleHRPZkVsZW1lbnQpKSB7XHJcblxyXG4gICAgICAgICAgICBpZihtdWx0aUNvbHVtblBhcnNlci5jb250YWluc1N0YXJ0VGFnKHJlbGF0aXZlVGV4dHMudGV4dE9mRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRDU1NCeVRhZyhET01PYmplY3RUYWcuc3RhcnRSZWdpb24sIGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKG11bHRpQ29sdW1uUGFyc2VyLmNvbnRhaW5zQ29sU2V0dGluZ3NUYWcocmVsYXRpdmVUZXh0cy50ZXh0T2ZFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgc2V0RWxlbWVudENTU0J5VGFnKERPTU9iamVjdFRhZy5yZWdpb25TZXR0aW5ncywgZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzdGFydEJvY2tBYm92ZTogbXVsdGlDb2x1bW5QYXJzZXIuU3RhcnRUYWdEYXRhID0ge1xyXG4gICAgICAgICAgICBsaW5lc0Fib3ZlQXJyYXk6IHJlbGF0aXZlVGV4dHMubGluZXNBYm92ZUFycmF5LFxyXG4gICAgICAgICAgICBzdGFydEJsb2NrS2V5OiBcIk11bHRpLUNvbHVtbiBSZWZsb3cgUmVnaW9uXCIsXHJcbiAgICAgICAgICAgIHN0YXJ0QmxvY2tUeXBlOiBcIkRFUFJFQ0lBVEVEXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwZW5kVG9SZWdpb25hbE1hbmFnZXIoZWwsIHJlZ2lvbmFsQ29udGFpbmVyLCBjdHgsIHJlbGF0aXZlVGV4dHMsIHNvdXJjZVBhdGgsIHN0YXJ0Qm9ja0Fib3ZlLCAoZG9tT2JqOiBET01PYmplY3QpID0+IHtcclxuICAgICAgICAgICAgb25VbmxvYWRFbGVtZW50KGRvbU9iaiwgcmVnaW9uYWxDb250YWluZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vI3JlZ2lvbiBQREYgRXhwb3J0aW5nLlxyXG4gICAgcHJpdmF0ZSBpc1N0YXJ0Q29kZWJsb2NrSW5FeHBvcnQobm9kZTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IENPREVCTE9DS19TVEFSVF9TVFJTLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBpZihub2RlLmhhc0NsYXNzKGBibG9jay1sYW5ndWFnZS0ke0NPREVCTE9DS19TVEFSVF9TVFJTW2ldfWApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBleHBvcnREb2N1bWVudFRvUERGKGVsOiBIVE1MRWxlbWVudCwgZmlsZURPTU1hbmFnZXI6IEZpbGVET01NYW5hZ2VyLCBzb3VyY2VQYXRoOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQSB0cnVlIGV4cG9ydCB3aWxsIGJlIHBhc3NlZCBhbiBlbGVtZW50IHdpdGggYWxsIG90aGVyIGl0ZW1zIGluIHRoZSBkb2MgYXMgY2hpbGRyZW4uIFxyXG4gICAgICAgIC8vIFNvIGlmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB3ZSBjYW4ganVzdCByZXR1cm5cclxuICAgICAgICBsZXQgZG9jQ2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLmNoaWxkTm9kZXMpO1xyXG4gICAgICAgIGlmKGRvY0NoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY2hpbGRyZW5Ub1JlbW92ZSA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRvIGV4cG9ydCBjb2RlYmxvY2tzIHdlIG5lZWQgdG8gZ2V0IHRoZSBJRHMgc28gd2UgY2FuIGdldCB0aGUgZGF0YSBmcm9tIG91ciBtYW5hZ2Vycy5cclxuICAgICAgICAvLyBob3dldmVyIHNpbmNlIHRoZSBJRCBpc250IGJlaW5nIHN0b3JlZCBpbiB0aGUgZWxlbWVudCB5ZXQgdGhpcyBtZWFucyB3ZSBuZWVkIHRvIHJlYWRcclxuICAgICAgICAvLyBhbGwgb2YgdGhlIElEcyBvdXQgb2YgdGhlIGZ1bGwgZG9jdW1lbnQuXHJcbiAgICAgICAgbGV0IGNvZGVibG9ja1N0YXJ0QmxvY2tzID0gW11cclxuICAgICAgICBsZXQgYUZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoc291cmNlUGF0aCk7XHJcbiAgICAgICAgaWYoYUZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbGUgPSBhRmlsZSBhcyBURmlsZVxyXG4gICAgICAgICAgICBsZXQgZmlsZVRleHQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpIC8vIElzIGNhY2hlZCByZWFkIE9rIGhlcmU/IEl0IHNob3VsZCBiZS5cclxuXHJcbiAgICAgICAgICAgIC8vIE9uY2Ugd2UgaGF2ZSBvdXIgZGF0YSB3ZSBzZWFyY2ggdGhlIHRleHQgZm9yIGFsbCBjb2RlYmxvY2sgc3RhcnQgdmFsdWVzLlxyXG4gICAgICAgICAgICAvLyBzdG9yaW5nIHRoZW0gaW50byBvdXIgcXVldWUuXHJcbiAgICAgICAgICAgIGxldCBjb2RlQmxvY2tEYXRhID0gbXVsdGlDb2x1bW5QYXJzZXIuZmluZFN0YXJ0Q29kZWJsb2NrKGZpbGVUZXh0KTtcclxuICAgICAgICAgICAgd2hpbGUoY29kZUJsb2NrRGF0YS5mb3VuZCA9PT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb2RlYmxvY2tUZXh0ID0gZmlsZVRleHQuc2xpY2UoY29kZUJsb2NrRGF0YS5zdGFydFBvc2l0aW9uLCBjb2RlQmxvY2tEYXRhLmVuZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGZpbGVUZXh0ID0gZmlsZVRleHQuc2xpY2UoY29kZUJsb2NrRGF0YS5lbmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tTdGFydEJsb2Nrcy5wdXNoKGNvZGVibG9ja1RleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvZGVCbG9ja0RhdGEgPSBtdWx0aUNvbHVtblBhcnNlci5maW5kU3RhcnRDb2RlYmxvY2soZmlsZVRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBnZXR0aW5nIGZpbGUgZnJvbSBzb3VyY2UgcGF0aDogJHtzb3VyY2VQYXRofWApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaW5CbG9jayA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jQ2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IGRvY0NoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkRWwgPSBjaGlsZCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChpbkJsb2NrID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZEJsb2NrRGF0YSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZWdpb25LZXkgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYmxvY2tEYXRhID0gbXVsdGlDb2x1bW5QYXJzZXIuaXNTdGFydFRhZ1dpdGhJRChjaGlsZC50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhbmRvY0RhdGEgPSBjb250YWluc1BhbmRvYy5nZXRQYW5kb2NTdGFydERhdGEoY2hpbGQudGV4dENvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrRGF0YS5pc1N0YXJ0VGFnID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBhbiBvbGQtc3R5bGUgc3RhcnQgdGFnLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEJsb2NrRGF0YSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja0RhdGEuaGFzS2V5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmRLZXkgPSBtdWx0aUNvbHVtblBhcnNlci5nZXRTdGFydFRhZ0tleShjaGlsZC50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRLZXkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb25LZXkgPSBmb3VuZEtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGJsb2NrRGF0YS5pc1N0YXJ0VGFnID09PSBmYWxzZSAmJiB0aGlzLmlzU3RhcnRDb2RlYmxvY2tJbkV4cG9ydChjaGlsZCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzdGFydCB0YWcgZnJvbSB0aGUgb2xkIHZlcnNpb24gaXMgbnVsbCB3ZSB0aGVuIGNoZWNrIHRvIHNlZSBpZiB0aGUgZWxlbWVudCBpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGNvZGVibG9jayBzdGFydC4gSWYgaXQgaXMgd2UgdXNlIHRoZSBuZXh0IGF2YWlsYWJsZSBjb2RlYmxvY2sgZGF0YSB0byByZXRyaWV2ZSBvdXIgSUQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb2RlYmxvY2tUZXh0ID0gY29kZWJsb2NrU3RhcnRCbG9ja3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29kZWJsb2NrVGV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRm91bmQgdW5kZWZpbmVkIGNvZGVibG9jayBkYXRhIHdoZW4gZXhwb3J0aW5nLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBwYXJzZVN0YXJ0UmVnaW9uQ29kZUJsb2NrSUQoY29kZWJsb2NrVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlkICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEJsb2NrRGF0YSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb25LZXkgPSBpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhbmRvY0RhdGEuZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRCbG9ja0RhdGEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb25LZXkgPSBwYW5kb2NEYXRhLnVzZXJTZXR0aW5ncy5jb2x1bW5JRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKGZvdW5kQmxvY2tEYXRhID09PSB0cnVlICYmIHJlZ2lvbktleSAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5CbG9jayA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY2hpbGQuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmNoaWxkcmVuW2ldLmRldGFjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLmlubmVyVGV4dCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKE11bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZ2lvblJvb3RDb250YWluZXJEaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVuZGVyRXJyb3JSZWdpb24gPSBjaGlsZC5jcmVhdGVEaXYoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiBgJHtNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25FcnJvckNvbnRhaW5lckRpdn0sICR7TXVsdGlDb2x1bW5TdHlsZUNTUy5SZWdpb25FcnJvck1lc3NhZ2V9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW5kZXJDb2x1bW5SZWdpb24gPSBjaGlsZC5jcmVhdGVEaXYoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiBNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25Db250ZW50Q29udGFpbmVyRGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdpb25hbENvbnRhaW5lcjogUmVnaW9uTWFuYWdlckNvbnRhaW5lciA9IGZpbGVET01NYW5hZ2VyLmdldFJlZ2lvbmFsQ29udGFpbmVyKHJlZ2lvbktleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWdpb25hbENvbnRhaW5lciA9PT0gbnVsbCB8fCByZWdpb25hbENvbnRhaW5lci5nZXRSZWdpb24oKS5udW1iZXJPZkNoaWxkcmVuID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGlzIDAsIHdlIGFyZSBwcm9iYWJseSBpbiBMaXZlUHJldmlldywgd2hlcmUgdGhlIGNvZGVibG9jayBzdGFydCByZWdpb25zIGhhdmUgYmVlbiBwcm9jZXNzZWQgYnkgbmF0aXZlIG9ic2lkaWFuIGxpdmUgcHJldmlldyBidXQgZG8gbm90IGhhdmUgYW55IGNoaWxkcmVuIGxpbmtlZCB0byB0aGVtLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyRXJyb3JSZWdpb24uaW5uZXJUZXh0ID0gXCJFcnJvciByZW5kZXJpbmcgbXVsdGktY29sdW1uIHJlZ2lvbi5cXG5QbGVhc2UgY2xvc2UgYW5kIHJlb3BlbiB0aGUgZmlsZSwgdGhlbiBtYWtlIHN1cmUgeW91IGFyZSBpbiByZWFkaW5nIG1vZGUgYmVmb3JlIGV4cG9ydGluZy5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdpb25hbE1hbmFnZXI6IFJlZ2lvbk1hbmFnZXIgPSByZWdpb25hbENvbnRhaW5lci5nZXRSZWdpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbmFsTWFuYWdlci5leHBvcnRSZWdpb25FbGVtZW50c1RvUERGKHJlbmRlckNvbHVtblJlZ2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11bHRpQ29sdW1uUGFyc2VyLmNvbnRhaW5zRW5kVGFnKGNoaWxkLnRleHRDb250ZW50KSA9PT0gdHJ1ZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluc1BhbmRvYy5jb250YWluc1BhbmRvY0VuZFRhZyhjaGlsZC50ZXh0Q29udGVudCkgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQmxvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuVG9SZW1vdmUucHVzaChjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoaWxkcmVuVG9SZW1vdmUuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGlmKGNoaWxkLnBhcmVudEVsZW1lbnQgPT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0V4cG9ydGluZyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICBpZihlbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicHJpbnRcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihlbGVtZW50LnBhcmVudE5vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tFeHBvcnRpbmcoZWxlbWVudC5wYXJlbnRFbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vI2VuZHJlZ2lvbiBQREYgRXhwb3J0aW5nLlxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRFbGVtZW50Q1NTKGN1cnJlbnRPYmplY3Q6IERPTU9iamVjdCwgZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBzZXRFbGVtZW50Q1NTQnlUYWcoY3VycmVudE9iamVjdC50YWcsIGVsKTtcclxufVxyXG5mdW5jdGlvbiBzZXRFbGVtZW50Q1NTQnlUYWcodGFnOiBET01PYmplY3RUYWcsIGVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgaWYgKHRhZyA9PT0gRE9NT2JqZWN0VGFnLmVuZFJlZ2lvbikge1xyXG4gICAgICAgIGVsLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uRW5kVGFnKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRhZyA9PT0gRE9NT2JqZWN0VGFnLmNvbHVtbkJyZWFrKSB7XHJcbiAgICAgICAgZWwuYWRkQ2xhc3MoTXVsdGlDb2x1bW5TdHlsZUNTUy5Db2x1bW5FbmRUYWcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGFnID09PSBET01PYmplY3RUYWcucmVnaW9uU2V0dGluZ3MpIHtcclxuICAgICAgICBlbC5hZGRDbGFzcyhNdWx0aUNvbHVtblN0eWxlQ1NTLlJlZ2lvblNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGVsLmFkZENsYXNzKE11bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uQ29udGVudCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uVW5sb2FkRWxlbWVudChjdXJyZW50T2JqZWN0OiBET01PYmplY3QsIHJlZ2lvbmFsQ29udGFpbmVyOiBSZWdpb25NYW5hZ2VyQ29udGFpbmVyKTogdm9pZCB7XHJcblxyXG4gICAgaWYgKHJlZ2lvbmFsQ29udGFpbmVyID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZWdpb25hbE1hbmFnZXI6IFJlZ2lvbk1hbmFnZXIgPSByZWdpb25hbENvbnRhaW5lci5nZXRSZWdpb24oKTtcclxuICAgIGlmIChyZWdpb25hbE1hbmFnZXIpIHtcclxuXHJcbiAgICAgICAgLy8gV2UgY2FuIGF0dGVtcHQgdG8gdXBkYXRlIHRoZSB2aWV3IGhlcmUgYWZ0ZXIgdGhlIGl0ZW0gaXMgcmVtb3ZlZFxyXG4gICAgICAgIC8vIGJ1dCBuZWVkIHRvIGdldCB0aGUgaXRlbSdzIHBhcmVudCBlbGVtZW50IGJlZm9yZSByZW1vdmluZyBvYmplY3QgZnJvbSBtYW5hZ2VyLlxyXG4gICAgICAgIGxldCByZWdpb25SZW5kZXJEYXRhOiBNdWx0aUNvbHVtblJlbmRlckRhdGEgPSByZWdpb25hbE1hbmFnZXIuZ2V0UmVnaW9uUmVuZGVyRGF0YSgpO1xyXG5cclxuICAgICAgICByZWdpb25hbE1hbmFnZXIucmVtb3ZlT2JqZWN0KGN1cnJlbnRPYmplY3QuVUlEKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTmVlZCB0byBjaGVjayBoZXJlIGlmIGVsZW1lbnQgaXMgbnVsbCBhcyB0aGlzIGNsb3N1cmUgd2lsbCBiZSBjYWxsZWRcclxuICAgICAgICAgKiByZXBlYXRlZGx5IG9uIGZpbGUgY2hhbmdlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChyZWdpb25SZW5kZXJEYXRhLnBhcmVudFJlbmRlckVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWdpb25hbE1hbmFnZXIucmVuZGVyUmVnaW9uRWxlbWVudHNUb1NjcmVlbigpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuaW50ZXJmYWNlIEVsZW1lbnRSZWxhdGl2ZUxvY2F0aW9uRGF0YSB7XHJcbiAgICBsaW5lc0Fib3ZlQXJyYXk6IHN0cmluZ1tdO1xyXG4gICAgbGluZXNPZkVsZW1lbnQ6IHN0cmluZ1tdO1xyXG4gICAgbGluZXNCZWxvd0FycmF5OiBzdHJpbmdbXTtcclxuICAgIHRleHRPZkVsZW1lbnQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgbmVhcmJ5U2libGluZ3MgPSB7IFxyXG4gICAgc2libGluZ3NBYm92ZTogSFRNTERpdkVsZW1lbnQsXHJcbiAgICBjdXJyZW50T2JqZWN0OiBET01PYmplY3QsIFxyXG59XHJcblxyXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudFJlbGF0aXZlTG9jYXRpb25EYXRhKGRvY0xpbmVzOiBzdHJpbmdbXSwgaW5mbzogTWFya2Rvd25TZWN0aW9uSW5mb3JtYXRpb24pOiBFbGVtZW50UmVsYXRpdmVMb2NhdGlvbkRhdGEge1xyXG5cclxuICAgIGxldCBsaW5lc0Fib3ZlQXJyYXkgPSBkb2NMaW5lcy5zbGljZSgwLCBpbmZvLmxpbmVTdGFydCk7XHJcbiAgICBsZXQgbGluZXNPZkVsZW1lbnQgPSBkb2NMaW5lcy5zbGljZShpbmZvLmxpbmVTdGFydCwgaW5mby5saW5lRW5kICsgMSk7XHJcbiAgICBsZXQgdGV4dE9mRWxlbWVudCA9IGxpbmVzT2ZFbGVtZW50LmpvaW4oXCJcXG5cIik7XHJcbiAgICBsZXQgbGluZXNCZWxvd0FycmF5ID0gZG9jTGluZXMuc2xpY2UoaW5mby5saW5lRW5kICsgMSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsaW5lc0Fib3ZlQXJyYXksXHJcbiAgICAgICAgbGluZXNPZkVsZW1lbnQsXHJcbiAgICAgICAgbGluZXNCZWxvd0FycmF5LFxyXG4gICAgICAgIHRleHRPZkVsZW1lbnRcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZURlcHJlY2lhdGVkU3RhcnRFbGVtZW50KGVsOiBIVE1MRWxlbWVudCwgbGluZXNPZkVsZW1lbnQ6IHN0cmluZ1tdLCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIGZpbGVET01NYW5hZ2VyOiBGaWxlRE9NTWFuYWdlciwgZG9jU3RyaW5nOiBzdHJpbmcpIHtcclxuXHJcbiAgICBlbC5jaGlsZHJlblswXS5kZXRhY2goKTtcclxuXHJcbiAgICBsZXQgc3RhcnRCbG9ja0RhdGEgPSBtdWx0aUNvbHVtblBhcnNlci5nZXRTdGFydEJsb2NrQWJvdmVMaW5lKGxpbmVzT2ZFbGVtZW50KVxyXG4gICAgaWYoc3RhcnRCbG9ja0RhdGEgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlZ2lvbklEID0gc3RhcnRCbG9ja0RhdGEuc3RhcnRCbG9ja0tleTtcclxuXHJcbiAgICBzZXR1cFN0YXJ0VGFnKGVsLCBjdHgsIGZpbGVET01NYW5hZ2VyLCBkb2NTdHJpbmcsIHJlZ2lvbklEKTtcclxuICAgIHJldHVybjtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUGFuZG9jU3RhcnRFbGVtZW50KGVsOiBIVE1MRWxlbWVudCwgdGV4dE9mRWxlbWVudDogc3RyaW5nLCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIGZpbGVET01NYW5hZ2VyOiBGaWxlRE9NTWFuYWdlciwgZG9jU3RyaW5nOiBzdHJpbmcpIHtcclxuICAgIGVsLmNoaWxkcmVuWzBdLmRldGFjaCgpO1xyXG5cclxuICAgIGxldCBwYW5kb2NEYXRhID0gY29udGFpbnNQYW5kb2MuZ2V0UGFuZG9jU3RhcnREYXRhKHRleHRPZkVsZW1lbnQpO1xyXG4gICAgbGV0IHNldHRpbmdzID0gcGFuZG9jRGF0YS51c2VyU2V0dGluZ3M7XHJcblxyXG4gICAgbGV0IHJlZ2lvbk1hbmFnZXIgPSBzZXR1cFN0YXJ0VGFnKGVsLCBjdHgsIGZpbGVET01NYW5hZ2VyLCBkb2NTdHJpbmcsIHNldHRpbmdzLmNvbHVtbklEKTtcclxuICAgIHJlZ2lvbk1hbmFnZXIuc2V0UmVnaW9uYWxTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICByZXR1cm47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlck1hcmtkb3duRnJvbUxpbmVzKG1kTGluZXM6IHN0cmluZ1tdLCBzb3VyY2VQYXRoOiBzdHJpbmcpOiBIVE1MRGl2RWxlbWVudCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXZSByZS1yZW5kZXIgYWxsIG9mIHRoZSBpdGVtcyBhYm92ZSBvdXIgZWxlbWVudCwgdW50aWwgdGhlIHN0YXJ0IHRhZywgXHJcbiAgICAgKiBzbyB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXJlIHRvIHBsYWNlIHRoZSBuZXcgaXRlbSBpbiB0aGUgbWFuYWdlci5cclxuICAgICAqIFxyXG4gICAgICogVE9ETzogQ2FuIHJlZHVjZSB0aGUgYW1vdW50IG5lZWRpbmcgdG8gYmUgcmVuZGVyZWQgYnkgb25seSByZW5kZXJpbmcgdG9cclxuICAgICAqIHRoZSBzdGFydCB0YWcgb3IgYSBjb2x1bW4tYnJlYWsgd2hpY2hldmVyIGlzIGNsb3Nlci5cclxuICAgICAqL1xyXG4gICAgbGV0IHNpYmxpbmdzID0gY3JlYXRlRGl2KCk7XHJcbiAgICBsZXQgbWFya2Rvd25SZW5kZXJDaGlsZCA9IG5ldyBNYXJrZG93blJlbmRlckNoaWxkKFxyXG4gICAgICAgIHNpYmxpbmdzXHJcbiAgICApO1xyXG4gICAgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcclxuICAgICAgICBtZExpbmVzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJldiArIFwiXFxuXCIgICsgY3VycmVudDtcclxuICAgICAgICB9LCBcIlwiKSxcclxuICAgICAgICBzaWJsaW5ncyxcclxuICAgICAgICBzb3VyY2VQYXRoLFxyXG4gICAgICAgIG1hcmtkb3duUmVuZGVyQ2hpbGRcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHNpYmxpbmdzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXR1cFN0YXJ0VGFnKGVsOiBIVE1MRWxlbWVudCwgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBmaWxlRE9NTWFuYWdlcjogRmlsZURPTU1hbmFnZXIsIGRvY1N0cmluZzogc3RyaW5nLCByZWdpb25JRDogc3RyaW5nKSB7XHJcbiAgICAvKiogXHJcbiAgICAgKiBTZXQgdXAgdGhlIGN1cnJlbnQgZWxlbWVudCB0byBhY3QgYXMgdGhlIHBhcmVudCBmb3IgdGhlIFxyXG4gICAgICogbXVsdGktY29sdW1uIHJlZ2lvbi5cclxuICAgICAqL1xyXG4gICAgZWwuY2xhc3NMaXN0LmFkZChNdWx0aUNvbHVtbkxheW91dENTUy5SZWdpb25Sb290Q29udGFpbmVyRGl2KVxyXG4gICAgbGV0IHJlbmRlckVycm9yUmVnaW9uID0gZWwuY3JlYXRlRGl2KHtcclxuICAgICAgICBjbHM6IGAke011bHRpQ29sdW1uTGF5b3V0Q1NTLlJlZ2lvbkVycm9yQ29udGFpbmVyRGl2fSAke011bHRpQ29sdW1uU3R5bGVDU1MuUmVnaW9uRXJyb3JNZXNzYWdlfWAsXHJcbiAgICB9KTtcclxuICAgIGxldCByZW5kZXJDb2x1bW5SZWdpb24gPSBlbC5jcmVhdGVEaXYoe1xyXG4gICAgICAgIGNsczogTXVsdGlDb2x1bW5MYXlvdXRDU1MuUmVnaW9uQ29udGVudENvbnRhaW5lckRpdlxyXG4gICAgfSlcclxuXHJcbiAgICBpZihmaWxlRE9NTWFuYWdlci5jaGVja0tleUV4aXN0cyhyZWdpb25JRCkgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgbGV0IHsgbnVtYmVyT2ZUYWdzLCBrZXlzIH0gPSBtdWx0aUNvbHVtblBhcnNlci5jb3VudFN0YXJ0VGFncyhkb2NTdHJpbmcpO1xyXG5cclxuICAgICAgICBsZXQgbnVtTWF0Y2hlcyA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG51bWJlck9mVGFnczsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBCZWNhdXNlIHdlIGNoZWNrZWQgaWYga2V5IGV4aXN0cyBvbmUgb2YgdGhlc2UgaGFzIHRvIG1hdGNoLlxyXG4gICAgICAgICAgICBpZihrZXlzW2ldID09PSByZWdpb25JRCkge1xyXG4gICAgICAgICAgICAgICAgbnVtTWF0Y2hlcysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gZGlzcGxheSBhbiBlcnJvciBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIDIgb2YgdGhlIHNhbWUgaWQgYWNyb3NzXHJcbiAgICAgICAgLy8gdGhlIHdob2xlIGRvY3VtZW50LiBUaGlzIHByZXZlbnRzIGVycm9zIHdoZW4gb2JzaWRpYW4gcmVsb2FkcyB0aGUgd2hvbGUgZG9jdW1lbnRcclxuICAgICAgICAvLyBhbmQgdGhlcmUgYXJlIHR3byBvZiB0aGUgc2FtZSBrZXkgaW4gdGhlIG1hcC5cclxuICAgICAgICBpZihudW1NYXRjaGVzID49IDIpIHtcclxuICAgICAgICAgICAgaWYocmVnaW9uSUQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckVycm9yUmVnaW9uLmlubmVyVGV4dCA9IFwiRm91bmQgbXVsdGlwbGUgcmVnaW9ucyB3aXRoIGVtcHR5IElEcy4gUGxlYXNlIHNldCBhIHVuaXF1ZSBJRCBhZnRlciBlYWNoIHN0YXJ0IHRhZy5cXG5FRzogJz09PSBtdWx0aS1jb2x1bW4tc3RhcnQ6IHJhbmRvbUlEJ1xcbk9yIHVzZSAnRml4IE1pc3NpbmcgSURzJyBpbiB0aGUgY29tbWFuZCBwYWxldHRlIGFuZCByZWxvYWQgdGhlIGRvY3VtZW50LlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJFcnJvclJlZ2lvbi5pbm5lclRleHQgPSBcIlJlZ2lvbiBJRCBhbHJlYWR5IGV4aXN0cyBpbiBkb2N1bWVudCwgcGxlYXNlIHNldCBhIHVuaXF1ZSBJRC5cXG5FRzogJz09PSBtdWx0aS1jb2x1bW4tc3RhcnQ6IHJhbmRvbUlEJ1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsLmlkID0gYE11bHRpQ29sdW1uSUQ6JHtyZWdpb25JRH1gXHJcblxyXG4gICAgbGV0IGVsZW1lbnRNYXJrZG93blJlbmRlcmVyID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoZWwpO1xyXG4gICAgbGV0IHJlZ2lvbk1hbmFnZXIgPSBmaWxlRE9NTWFuYWdlci5jcmVhdGVSZWdpb25hbE1hbmFnZXIocmVnaW9uSUQsIGVsLCByZW5kZXJFcnJvclJlZ2lvbiwgcmVuZGVyQ29sdW1uUmVnaW9uKTtcclxuICAgIGVsZW1lbnRNYXJrZG93blJlbmRlcmVyLm9udW5sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGlmKGZpbGVET01NYW5hZ2VyKSB7XHJcblxyXG4gICAgICAgICAgICBmaWxlRE9NTWFuYWdlci5yZW1vdmVSZWdpb24ocmVnaW9uSUQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjdHguYWRkQ2hpbGQoZWxlbWVudE1hcmtkb3duUmVuZGVyZXIpO1xyXG5cclxuICAgIHJldHVybiByZWdpb25NYW5hZ2VyXHJcbn1cclxuXHJcbmNvbnN0IEZST05UTUFUVEVSX1JFR0VYOiBSZWdFeHBbXSA9XHJcbltcclxuL011bHRpWy0gXSpDb2x1bW4gKk1hcmtkb3duL2ksXHJcbi9NdWx0aVstIF0qQ29sdW1uICpSZWZsb3cvaVxyXG5dXHJcbmZ1bmN0aW9uIGlzTXVsdGlDb2x1bW5SZWZsb3coZnJvbnRtYXR0ZXI6IGFueSk6IGJvb2xlYW4ge1xyXG5cclxuICAgIGlmKGZyb250bWF0dGVyID09PSBudWxsIHx8XHJcbiAgICAgICBmcm9udG1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgcmVnZXggb2YgRlJPTlRNQVRURVJfUkVHRVgpIHtcclxuXHJcbiAgICAgICAgbGV0IGZyb250bWF0dGVyUmVmbG93RGF0YSA9IHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShmcm9udG1hdHRlciwgcmVnZXgpO1xyXG4gICAgICAgIGlmKGZyb250bWF0dGVyUmVmbG93RGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IFtrZXlzLCB2YWx1ZXNdID0gT2JqZWN0LmVudHJpZXMoZnJvbnRtYXR0ZXIpO1xyXG4gICAgaWYoa2V5cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQga2V5IG9mIGtleXMpIHtcclxuXHJcbiAgICAgICAgaWYodHlwZW9mIGtleSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQgcmVnZXggb2YgRlJPTlRNQVRURVJfUkVHRVgpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCByZWdleFJlc3VsdCA9IHJlZ2V4LmV4ZWMoa2V5KTtcclxuICAgICAgICAgICAgaWYocmVnZXhSZXN1bHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TXVsdGlDb2x1bW5TZXR0aW5nc0Zyb21Gcm9udG1hdHRlcihjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpOiBNdWx0aUNvbHVtblNldHRpbmdzIHtcclxuXHJcbiAgICBsZXQgc2V0dGluZ3MgPSBnZXREZWZhdWx0TXVsdGlDb2x1bW5TZXR0aW5ncygpO1xyXG4gICAgc2V0dGluZ3MuZnVsbERvY1JlZmxvdyA9IHRydWU7XHJcbiAgICBpZihjdHguZnJvbnRtYXR0ZXIgPT09IG51bGwgfHxcclxuICAgICAgIGN0eC5mcm9udG1hdHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcihsZXQgcmVnZXggb2YgRlJPTlRNQVRURVJfUkVHRVgpIHtcclxuXHJcbiAgICAgICAgbGV0IGZyb250bWF0dGVyUmVmbG93RGF0YSA9IHBhcnNlRnJvbnRNYXR0ZXJFbnRyeShjdHguZnJvbnRtYXR0ZXIsIHJlZ2V4KTtcclxuICAgICAgICBpZihmcm9udG1hdHRlclJlZmxvd0RhdGEgIT09IG51bGwgJiZcclxuICAgICAgICAgICBBcnJheS5pc0FycmF5KGZyb250bWF0dGVyUmVmbG93RGF0YSkpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MgPSBwYXJzZUZyb250bWF0dGVyU2V0dGluZ3MoZnJvbnRtYXR0ZXJSZWZsb3dEYXRhKTtcclxuICAgICAgICAgICAgc2V0dGluZ3MuZnVsbERvY1JlZmxvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2V0dGluZ3M7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlRnJvbnRtYXR0ZXJTZXR0aW5ncyhmcm9udG1hdHRlclJlZmxvd0RhdGE6IGFueVtdKTogTXVsdGlDb2x1bW5TZXR0aW5ncyB7XHJcblxyXG4gICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICBmb3IobGV0IG9iaiBvZiBmcm9udG1hdHRlclJlZmxvd0RhdGEpIHtcclxuXHJcbiAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IE9iamVjdC5lbnRyaWVzKG9iailbMF07XHJcbiAgICAgICAgc3RyICs9IGAke2tleX06IFske3ZhbHVlfV1cXG5gO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZXR0aW5ncyA9IHBhcnNlQ29sdW1uU2V0dGluZ3Moc3RyKTtcclxuXHJcbiAgICByZXR1cm4gc2V0dGluZ3M7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExlYWZGcm9tRmlsZVBhdGgod29ya3NwYWNlOiBXb3Jrc3BhY2UsIGZpbGVQYXRoOiBzdHJpbmcpOiBXb3Jrc3BhY2VMZWFmIHwgbnVsbCB7XHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2tTdGF0ZShzdGF0ZTogYW55KSB7XHJcblxyXG4gICAgICAgIGlmKHN0YXRlW1widHlwZVwiXSA9PT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgc3RhdGVbXCJ0eXBlXCJdICE9PSBcIm1hcmtkb3duXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc3RhdGVbXCJzdGF0ZVwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc3RhdGVbXCJzdGF0ZVwiXVtcImZpbGVcIl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3RhdGVGaWxlUGF0aCA9IHN0YXRlW1wic3RhdGVcIl1bXCJmaWxlXCJdO1xyXG4gICAgICAgIHJldHVybiBzdGF0ZUZpbGVQYXRoID09PSBmaWxlUGF0aDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHdvcmtzcGFjZS5nZXRMYXlvdXQoKSk7XHJcbiAgICBsZXQgaXRlbXMgPSBBcnJheS5mcm9tKGVudHJpZXMpLm1hcCgodmFsKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHZhbFsxXVxyXG4gICAgfSlcclxuICAgIHdoaWxlKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgbGV0IGVudHJ5T2JqID0gaXRlbXMuc2hpZnQoKSBhcyBhbnk7XHJcbiAgICAgICAgaWYoZW50cnlPYmpbXCJpZFwiXSAhPT0gdW5kZWZpbmVkICYmIGVudHJ5T2JqW1widHlwZVwiXSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICBpZihlbnRyeU9ialtcInR5cGVcIl0gPT09IFwic3BsaXRcIiB8fFxyXG4gICAgICAgICAgICAgICBlbnRyeU9ialtcInR5cGVcIl0gPT09IFwidGFic1wiICkge1xyXG4gICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoZW50cnlPYmpbJ2NoaWxkcmVuJ10pO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGVudHJ5T2JqW1widHlwZVwiXSA9PT0gXCJsZWFmXCIgJiYgXHJcbiAgICAgICAgICAgICAgIGVudHJ5T2JqW1wiaWRcIl0gIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICAgICBlbnRyeU9ialtcInN0YXRlXCJdICE9PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBlbnRyeU9ialtcImlkXCJdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0YXRlID0gZW50cnlPYmpbXCJzdGF0ZVwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsaWQgPSBjaGVja1N0YXRlKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGlmKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtzcGFjZS5nZXRMZWFmQnlJZChpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29udGVudEhlaWdodEZyb21MZWFmKGxlYWY6IFdvcmtzcGFjZUxlYWYpOiBudW1iZXIge1xyXG5cclxuICAgIGxldCBjb250ZW50RWwgPSAobGVhZi52aWV3IGFzIGFueSlbXCJjb250ZW50RWxcIl0gYXMgSFRNTEVsZW1lbnRcclxuICAgIGlmKGNvbnRlbnRFbCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICBjb250ZW50RWwuY2xpZW50SGVpZ2h0ID4gMCkge1xyXG4gICAgICAgIHJldHVybiBjb250ZW50RWwuY2xpZW50SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjbGllbnRIZWlnaHQgPSBsZWFmLnZpZXcuY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xyXG4gICAgbGV0IHRpdGxlQ29udGFpbmVyID0gKGxlYWYudmlldyBhcyBhbnkpW1widGl0bGVDb250YWluZXJFbFwiXSBhcyBIVE1MRWxlbWVudCBcclxuICAgIGlmKHRpdGxlQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgIHRpdGxlQ29udGFpbmVyLmNsaWVudEhlaWdodCA+IDApIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50SGVpZ2h0IC0gdGl0bGVDb250YWluZXIuY2xpZW50SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjbGllbnRIZWlnaHQgLSA1MDtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY1Zpc2libGVDbGlldEhlaWdodChsZWFmOiBXb3Jrc3BhY2VMZWFmLCB3b3Jrc3BhY2U6IFdvcmtzcGFjZSk6IG51bWJlciB7XHJcblxyXG4gICAgbGV0IGNsaWVudEhlaWdodCA9IDA7XHJcbiAgICBpZiAobGVhZikge1xyXG4gICAgICAgIGNsaWVudEhlaWdodCA9IGdldENvbnRlbnRIZWlnaHRGcm9tTGVhZihsZWFmKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCh3b3Jrc3BhY2UgIT09IG51bGwgJiYgd29ya3NwYWNlICE9PSB1bmRlZmluZWQpICYmXHJcbiAgICAgICAgICAgICAod29ya3NwYWNlLmNvbnRhaW5lckVsICE9PSBudWxsICYmIHdvcmtzcGFjZS5jb250YWluZXJFbCAhPT0gdW5kZWZpbmVkKSAmJlxyXG4gICAgICAgICAgICAgIHdvcmtzcGFjZS5jb250YWluZXJFbC5jbGllbnRIZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgY2xpZW50SGVpZ2h0ID0gd29ya3NwYWNlLmNvbnRhaW5lckVsLmNsaWVudEhlaWdodCAtIDEwMDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNsaWVudEhlaWdodCA9IDEwMDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xpZW50SGVpZ2h0O1xyXG59Il0sIm5hbWVzIjpbIk1hcmtkb3duUmVuZGVyQ2hpbGQiLCJXaWRnZXRUeXBlIiwiTWFya2Rvd25SZW5kZXJlciIsIlN0YXRlRmllbGQiLCJEZWNvcmF0aW9uIiwiUmFuZ2VTZXRCdWlsZGVyIiwiZWRpdG9yTGl2ZVByZXZpZXdGaWVsZCIsInN5bnRheFRyZWUiLCJ0b2tlbkNsYXNzTm9kZVByb3AiLCJlZGl0b3JJbmZvRmllbGQiLCJFZGl0b3JWaWV3IiwiZWRpdG9yRWRpdG9yRmllbGQiLCJFZGl0b3JTZWxlY3Rpb24iLCJQbHVnaW4iLCJQbGF0Zm9ybSIsIk5vdGljZSIsIm11bHRpQ29sdW1uUGFyc2VyLmZpbmRTdGFydENvZGVibG9jayIsIm11bHRpQ29sdW1uUGFyc2VyLmlzU3RhcnRUYWdXaXRoSUQiLCJtdWx0aUNvbHVtblBhcnNlci5jb250YWluc1JlZ2lvblN0YXJ0IiwibXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNTdGFydFRhZyIsImNvbnRhaW5zUGFuZG9jLmNvbnRhaW5zUGFuZG9jU3RhcnRUYWciLCJtdWx0aUNvbHVtblBhcnNlci5nZXRTdGFydERhdGFBYm92ZUxpbmUiLCJtdWx0aUNvbHVtblBhcnNlci5nZXRFbmRCbG9ja0JlbG93IiwibXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNFbmRUYWciLCJjb250YWluc1BhbmRvYy5pc1ZhbGlkUGFuZG9jRW5kVGFnIiwibXVsdGlDb2x1bW5QYXJzZXIuY29udGFpbnNDb2xFbmRUYWciLCJtdWx0aUNvbHVtblBhcnNlci5jb250YWluc0NvbFNldHRpbmdzVGFnIiwibXVsdGlDb2x1bW5QYXJzZXIuY291bnRTdGFydFRhZ3MiLCJURmlsZSIsImNvbnRhaW5zUGFuZG9jLmdldFBhbmRvY1N0YXJ0RGF0YSIsIm11bHRpQ29sdW1uUGFyc2VyLmdldFN0YXJ0VGFnS2V5IiwiY29udGFpbnNQYW5kb2MuY29udGFpbnNQYW5kb2NFbmRUYWciLCJtdWx0aUNvbHVtblBhcnNlci5nZXRTdGFydEJsb2NrQWJvdmVMaW5lIiwicGFyc2VGcm9udE1hdHRlckVudHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBb0dBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8s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
