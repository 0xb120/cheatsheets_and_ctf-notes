{"path":"VR/Targets/SicuraNext/challenge-1/attachments/semgrep-1.png","text":"L-§ semgrep scan --config=p/php index.php 000 Semgrep CLI Scanning 1 file (only git-tracked) with 50 Code rules: CODE RULES Scanning 1 file with 48 php rules. SUPPLY CHAIN RULES @ Run senorep oo to find dependency vulnerabilities and advanced cross-file findings. PROGRESS —_— 100% 0:00:00 2 Code Findings index.php ) php.lang.security.injection.tainted-sql-string.tainted-sql-string User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements ( $mysqli—prepare(\"INSERT INTO test(id label) VALUES (?, ?)\");) or a safe library DIS AR A4 ERV/ES- 08 (I VAWA{c] 38] $result = mysqli_query($connection, 'SELECT * FROM users WHERE username = \"' . $username ‘\" AND password = \"' . $password . '\"'); >) php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in PHP, it is possible to adopt prepared statements by using \"PDO” with bind variables using “bindParam() . Details: https://sg.run/PBq3 38| $result = mysqli_query($connection, 'SELECT * FROM users WHERE username = \"' . $username . ‘\" AND password = \"' . $password . '\"');","libVersion":"0.5.0","langs":"eng"}