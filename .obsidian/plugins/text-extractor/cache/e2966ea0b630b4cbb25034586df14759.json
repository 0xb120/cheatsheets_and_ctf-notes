{"path":"Communities/MeetHack/MeetHack - Android Application Security 101.pdf","text":"MEETHACK TORINO ANDROID APPLICATION SECURITY 101 TYPES OF APPLICATION Native: \"traditional\" applications, developed with client-side programming languages o\u0000en specific to the platform Mobile Web apps: non-native applications, written in web languages and imported into the app Cross platform: written with external libraries that made them run on multiple devices and OS. ANDROID SDK API Minimum recommended API: Android 6.0 (Marshmallow) - API 23 Most popular & used: Android 10-13 - API 29-33 The full SDK list can be found Try testing on multiple recent APIs because behaviors can change from version to version. here IMPORTANT CONCEPTS App isolation: applications are isolated from the others, obtaining their own id and process, inaccessible to anyone other than the application itself and root APK are just archives Permissions: applications work requesting permissions to the system and to the user. Based on the SDK and API used, permissions may change in type and typology: Install-time permissions Normal permissions Signature permissions Runtime permissions Special permissions See the for more details.oﬀicial doc Certificates trust: Depending on the Android API used, the path containing trusted certificates may change: “system” certificates (default) are located in /system/etc/security/cacerts/ . It is pre-populated when the OS is installed the first time, cannot be modified or altered without root privileges. “user” installed certificates are located in /data/misc/user/0/cacerts-added/ . Those certificates were trusted by default before Android 7, no w each application has to specifically opt to trust them. Application embedded certificates: each application can include its own certificates, refusing to trust any other installed one, even those within the system certificate store. This technique is the so-called “certificate pinning”. IMPORTANT FILES INSIDE APKS /assets and /res : folders containing elements useful for the app to work /res/values/public.xml contains all the references between ids and files (like resources.arsc ) /META-INF : this is the folder that contains the .MF files and certificates used by the app. AndroidManifest.xml : contains all the details about the application, its functionality and the permissions needed to make it work. classes.dex : is the compiled Delvik executable file resources.arsc : contains all of the resource names, identifiers, and values. Further info and . /lib : is the folder containing all the compiled code specific to the processor here here BUILDING PROCESS FOR APK ANDROID APPLICATION COMPONENTS Intents: are the key of internal communication between the elements that make up an application. May be implicit or explicit Activities: are a representation of a single GUI screen Services: components that can perform long-term operations in the background. They comunicate using intents Broadcast Receivers: component used to respond to system or application events Content Providers: components used to store, manage and share data between multiple applications. SPECIAL ANDROID DIRECTORIES /system/bin : contains all binaries used to execute the main commands (e.g. ls, cd, etc.) /system/xbin : has the same function as the directory above /data/data : contains all the data of the various applications installed on the device, divided by package /data/apk : contains all the original APK files for the installed app, divided by package /storage/emulated/0/Download/ : default download folder /data/data : This directory contains all the applications that are installed by the user. /data/user/0 : This directory contains data that only the app can access. /data/app : This directory stores the APKs of the applications that are installed by the user. /system/app : This directory contains the pre- installed applications of the device. /data/local/tmp : This is a world writable directory. /data/system : This directory contains system configuration files. /etc/apns-conf.xml : This file contains the default Access Point Name (APN) configurations. APN is used in order for the device to connect with our current carrier’s network. /data/misc/wifi : This directory contains WiFi configuration files. /data/misc/user/0/cacerts-added : User certificate store. This directory stores certificates added by the user. /etc/security/cacerts/ : System certificate store. Permission to non-root users is not permitted. /sdcard : This directory contains a symbolic link of the directories DCIM, Downloads, Music, Pictures, etc. ANALYSIS TECHNIQUES Static application security testing (SAST) Dynamic application security testing (DAST) SAST The analysis is done on the provided files or decompiled source code. No app installation or execution. MAIN TASKS INCLUDE Reverse Engineering Source Code Analysis Security Setting Analysis Vulnerable or insecure code patterns searches Archive Analysis POSSIBLE FINDINGS: Hard-Coded Keys or Credentials Critical internal process identification Pinning Authentication Native Code & 3r d Party Libraries insecure native code (.so) Public known vulnerabilities in 3r d party lib SUGGESTED TOOLS: adb APKTool jadx dex2jar JD-GUI Bytecode Viewer simplify ClassNameDeobfuscator MobSF DAST The mobile application is analyzed as it runs on the device. Reviews include forensic analysis of the file system, assessment of the network traﬀic between the application and server and an assessment of the application’s inter-process communication (IPC). Rooted/Jailbroken device are almost mandatory MAIN TASKS: Network Traﬀic Analysis Insecure network communication Man in the Middle (MiTM) required Backend Analysis VA/PT on API and WebServices (classic Web Application Penetration Test) Client-side testing, e.g. Sensitive Data Exposure Inside logs Inside non-sandboxed folders ... Insecure Configuration Insecure Cryptography Rooting detection KEY SECURITY TESTING AREAS Local Data Storage, e.g. data leak to cloud storage, backups, logs, keyboard cache, db or local files Authentication and Authorization, e.g. bypass, insecure or wrongly implemented framework Interaction with the Mobile Platform, e.g. IPC APIs misues, sensitive data or functionality exposure to other apps running on the device. Code Quality and Exploit Mitigation Anti-Tampering and Anti-Reversing SUGGESTED TOOLS: adb HTTP proxy (Burpsuite/ZAP) drozer Xposed! + Modules / Magisk Frida COMMON BYPASSES BYPASSING CERTIFICATE PINNING Evasion techniques: Device Trust Store: install the proxy certificate into the device trust store (system certificate store or user certificate store based on the Android version and root availability) App patching: disassemble the app and remove the code responsible for certificate pinning. Smali code knowledge is required Alternatively implement user certificate trust configurations inside network_security_config.xml , and then rebuild and sign the «p atched» app . Add to the <application>  element in your application manifest.xml the following line: a n d r o i d : n e t w o r k S e c u r i t y C o n f i g = \" @ x m l / n e t w o r k _ s e c u r i t y _ c o Runtime Manipulation: runtime execution modification in order to invalidate certificate pinning validation Xposed! framework with   or   (root required) Objection (non-root, see the  ) Improper Cert Management: the server certificate might be stored in unsafe locations, (Documents directory, application files) therefore replaced with our own proxy certificate TrustMeAlready SSLUnpinning - Certificate Pinning Bypass Frida following video BYPASSING ANTI-ROOT Evasion techniques: App patching: based on disassembling the app in order to remove the code responsible for root checks and then rebuild the «p atched» app Smali code knowledge is required disassembly tools + APKTool Runtime Manipulation: runtime execution modification in order to invalidate root checks Rooted device required Magisk Hide Frida DIGITAL PRIVATE VAULT Google Play APK Download MANUAL APK EXTRACTION Root access not required: F o r W i n d o w s u s e r s a d b c a n f o u n d u n d e r C : \\ U s e r s \\ < u s e r > \\ A p p D a t a \\ L o c a l \\ A n d r o i d \\ S d k \\ p l a t f o r m - t o o l s \\ a d b . e $ a d b s h e l l p m l i s t p a c k a g e s $ a d b s h e l l p m p a t h < p a c k a g e _ n a m e > $ a d b p u l l < A P K _ p a t h >","libVersion":"0.5.0","langs":""}