{"path":"VR/Targets/SicuraNext/SicuraNext-Challenge-Report_v1.0.pdf","text":"Author Mattia Brollo Delivery date 19/11/2024 Version 1.0 Language English Client SicuraNext Activity Type Web Application Penetration Test Penetration Test report for SicuraNext   SicuraNext-Challenge-Report_v1 - Mattia Brollo1 / 35 Index Penetration Test report for SicuraNext Index Introduction Scope Rules of Engagement Methodology Report Terminology Executive Summary Technical Summary Vulnerabilities [Critical] ACL WAF Bypass Description Impact Vulnerability details and root-cause Remediation [High] SQL Injection in index.php Description Impact Vulnerability details and root-cause PoC Remediation [High] SQL Injection in email.php Description Impact Vulnerability details and root-cause PoC Remediation [High] Use of password hash with insufficient computational effort Description Impact Vulnerability details and root-cause Remediation [Medium] Software with known vulnerabilities Description Impact Vulnerability details and root-cause Remediation [Informational] Information disclosure in server headers Description Impact Vulnerability details and root-cause Remediation Remediation Summary   SicuraNext-Challenge-Report_v1 - Mattia Brollo2 / 35 Info Description Targets Challenge 1 ( http://127.0.0.1:80/index.php ) Challenge 2 ( http://127.0.0.1:81/email.php ) Environment Test/Development Platform Web Application System Description Docker environment setup with an Apache + PHP, MySQL, and HAProxy Business Criticality N/A Focal Point simone.fossat@sicuranext.com Company SicuraNext Activity Start 15/11/2024 Activity End 22/11/2024 Time Window 00:00 - 23:59 Attack Point localhost 127.0.0.1 Operating Mode White Box Note A docker compose file was provided to the candidate to create a local setup of the environment to be tested. Introduction SicuraNext asked the candidate to conduct a Web Application Penetration Test against two different applications, focusing on identifying and exploiting the vulnerabilities existing in the targets, using a methodical and documented approach. The goal of the project was to analyse targets to identify any weaknesses or security holes, use the information gathered to develop an exploit to achieve the objective of each challenge and document the activity with a technical report. Scope Rules of Engagement The Rules of Engagement (RoE) determine which actions and tests are allowed and which actions and tests are not allowed during the activity. For this activity, the client gave the following instructions: Work independently; no external help is allowed. Use of automated scanning tools is permitted, but you must demonstrate a clear understanding of the vulnerabilities discovered. Analyze and interpret the provided information independently; no clarifications will be given regarding the challenges. SicuraNext-Challenge-Report_v1 - Mattia Brollo3 / 35 Exploit only the vulnerabilities present; do not modify the target's source code under any circumstances. Do not alter the Docker Compose configuration unless compatibility issues or execution errors prevent the containers from functioning. You are authorized to read the target's source code. Do not modify any configuration files of the target. Refrain from making any modifications to the database. Moreover, the following vulnerabilities were explicitly asked to be considered out of scope: Service Availability / DDoS CSRF Cookie flags Missing security headers Clickjacking CORS SSL/TLS Missing rate limit   Methodology This section documents the methodology applied by the candidate during this project and discusses the resulting coverage, highlighting the way in which the various components were examined. The candidate approached the security assessments in a hybrid way, involving both Static and Dynamic Application Security Testing, as well as automated scans and manual validation and verification. This approach reduces false positives and ensures that automated scans are always enriched by a highly skilled human factor. The source code provided by SicuraNext was small enough so that it was possible to review it manually line by line. However, a static code analyser (semgrep) was also used as a double check in order to avoid possible false negatives. The candidate initiated the analysis by examining Challenge 01 . This approach was compiled with a white-box pentesting strategy, as the full source code and environment were provided. The application was analysed for high and critical vulnerabilities first. Then, other less severe flaws were sought. Given the functionalities provided by the application, the candidate focused most of the research effort on SQL Injection and XSS vulnerabilities, with related bypass techniques, although with regard to the latter flaw the app is safe as any malicious characters are encoded before they are displayed in the output. The candidate then moved to Challenge 02 , where a similar approach was adopted. This time, however, the candidate noticed some sort of WAF protecting the application, so part of the research effort was directed towards analysing the WAF and searching for any bypasses that might be useful for exploiting other flaws. The WAF was analysed with a hybrid approach, trying to blindly apply standard bypass techniques, analysing WAF configuration rules searching for ad- SicuraNext-Challenge-Report_v1 - Mattia Brollo4 / 35 hoc bypasses, and applying novel research documented online. Given the functionality provided by the web application, the same evaluations were carried out as for Challenge 01 . For each identified vulnerability, the candidate sought to demonstrate and document the maximum possible impact. Both applications were found to be vulnerable to boolean-based blind SQL injection, which compromised the full confidentiality of the data managed by the database. The password hashes, associated with the MD5 hashing mechanism, obtained through the aforementioned vulnerabilities, were subsequently analyzed and cracked. However, it was not possible to escalate these vulnerabilities to remote code execution or issues that would affect the integrity of the data because the server's user was configured with the appropriate permissions. Finally, the applications were further examined for low-impact vulnerabilities, but no additional issues were found, apart from the exposure of the software used by the server and its corresponding versions, as well as a series of known vulnerabilities related to these components. However, these vulnerabilities do not directly impact the two instances that were tested.   Report Terminology At the end of the tests, this document is written to describe the security status of the system at a high level (Executive Summary) and at a low level (Technical Summary). The vulnerabilities will be reported using the following fields to provide the right granularity of information: Description of the vulnerability and where it was found; Vuln ID is the canonical value assigned to the vulnerability; CVSSv4/CVSSv3 Score and Vector is the score assigned to the vulnerability using the CVSS standard; URL where the vulnerability can be found; References for further information on the vulnerability found; CVE or CWE (if available) identifying the vulnerability; Impact of the successful exploitation of the vulnerability; Vulnerability details and root-cause describing why, where, and how the vulnerability has been discovered; PoC (if available) to reproduce the vulnerability will be added as an attachment; Remediation suggest possible actions, hot fixes and best practices to correct the vulnerability. SicuraNext-Challenge-Report_v1 - Mattia Brollo5 / 35 Executive Summary The objective of the activity was to analyse SicuraNext's Challenge 01 and Challenge 02 applications for weaknesses and vulnerabilities in the software. The tests were carried out in a local docker environment provided by the SicuraNext team and the applications were accessible at the URL indicated in the \"Scope\" section. The SicuraNext team provided the candidate with a specific docker compose file to create a local configuration of the targets to be tested and specific rules of engagement. During the activity, six (6) vulnerabilities were identified. One (1) of them has a critical severity since it allows the defence mechanisms implemented by the reverse proxy to be completely bypassed (vuln. SN-00 1), enabling malicious users to interact arbitrarily with the underlying server and exploit other otherwise unexploitable loopholes. Three (3 ) of them, instead, have been classified with a high severity as they allow access to data and information to which access should be prohibited or highly restricted. These issues arise from weak or entirely absent security controls, allowing both applications to be manipulated through the injection of specific malicious strings into their database integration functionalities (vuln. SN-002 and SN-003). This enables the disclosure of arbitrary information about the database's contents. Some of the information stored in the database is also not stored properly (vuln. SN-004), making it quick and easy to retrieve the original data that was meant to be protected. Among the remaining vulnerabilities, one (1) has a medium severity level and concerns the use of software with known vulnerabilities (vuln. SN-005). These vulnerabilities are not always exploitable or accompanied by scripts that simplify exploitation (as in this case). However, using outdated or vulnerable software significantly increases the attack surface and the likelihood of discovering new flaws within it, increasing the risk level of the application that includes it. Finally, the last issue identified (1) concerns the exposure of the software used by the two target websites and their respective versions (vuln. SN-006). This is not strictly a vulnerability but rather a deviation from best practices, and for this reason, it has been reported with an informational severity. By themselves, this information does not pose a direct security risk to the targets, but it can facilitate the discovery of vulnerabilities specific to those versions (e.g. vuln SN-00 5) or provide malicious actors with details about the environment and its associated technologies.   SicuraNext-Challenge-Report_v1 - Mattia Brollo6 / 35 ID Vulnerability Name Technical Risk SN-001 ACL WAF Bypass Critical SN-002 SQL Injection in index.php High SN-003 SQL Injection in email.php High SN-004 Use of password hash with insufficient computational effort High SN-005 Software with known vulnerabilities Medium SN-006 Information disclosure in server headers Informational Technical Summary Both targets present critical security flaws that, when exploited together, undermine the confidentiality of the data managed by the respective sites. Challenge 01 and Challenge 02 are both vulnerable to the same type of boolean-based SQL Injection (vuln. SN-002 and SN-003). Threat actors or malicious users can inject malicious payloads into the intended application queries, enabling them to escape the original query structure and append arbitrary SQL statements. This ultimately enables them to query the underlying database using true/false prompts, leveraging server responses as an \"oracle\" to obtain any desired information or data. Challenge 02, furthermore, is vulnerable to a WAF bypass because the reverse proxy used to perform access control verification on HTTP body requests and fields does not support HTTP multipart data. This issue can be misuse to trick the reverse proxy into parsing one value, but getting another value to the backend, leading to a complete circumvention of the WAF and resulting eventually in a boolean-based SQL Injection vulnerability (vulnerability SN-003). Given these three vulnerabilities, they can be combined and exploited to extract all the data from the database, including user emails and passwords. The passwords are stored without any salting, using MD5, a hashing algorithm that is widely considered weak and outdated for this purpose (vuln SN-004). MD5 can be easily cracked in a very short time, leaving weak passwords highly susceptible to brute-force attacks. By examining the information exposed in the server headers (vuln. SN-006), it was also possible to identify the specific versions of PHP and Apache used to build the two websites. Both versions have known vulnerabilities (vuln. SN-005) that could be exploited. However, a brief analysis of the identified vulnerabilities indicates that the publicly known issues are unlikely to affect the sites, as they concern unused features or different operating systems than those in use on the target. Below is a summary table with the vulnerabilities sorted by severity. SicuraNext-Challenge-Report_v1 - Mattia Brollo7 / 35 Vuln ID SN-001 Severity Critical CVSSv3 Score 10.0 - AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:L CVSSv4 Score 9.2 - AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:H/VA:N/SC:H/SI:N/SA:L URL http://127.0.0.1:81/email.php Reference https://blog.sicuranext.com/breaking-down-multipart-parsers-validation-byp ass/ CVE or CWE CWE-693 CWE-358 Vulnerabilities [Critical] ACL WAF Bypass Description Challenge 0 2 implements some sort of WAF rules to discard HTTP requests containing invalid email addresses and requests containing basic evasion techniques. The reverse proxy used for this purpose, however, is vulnerable to a well-known parser differential vulnerability because it does not support multipart data. This flaw leads to a complete circumvention of the WAF, resulting eventually in a boolean-based SQL Injection vulnerability (vulnerability SN-003). Impact Attackers can exploit this vulnerability to completely bypass any rule running on any field of any HTTP request, resulting in a total bypass of any form of protection on requests made by the application. This flaw eventually led to the discovery of a critical SQL Injection vulnerability (ID SN- 003) that could not have been exploited without this initial vulnerability. Vulnerability details and root-cause The haproxy reverse proxy used in the environment is configured to reject any HTTP requests containing an invalid email body field: Request rejected because the email field does not follow the desired email format SicuraNext-Challenge-Report_v1 - Mattia Brollo8 / 35 Request rejected because the email field contains not accepted characters Request rejected because the email field contains unexpected characters and does not follow the desired format It was noticed that the only special characters allowed by the ACL were dots and dashes: Fuzzed any possible special characters looking to the accepted one Dash and dot characters are the only accepted special chars This check is performed using a strong regex rejecting almost every non-email string, and it can be confirmed peeking at the configuration used to perform this control: To try to bypass this control and confuse the WAF, various evasion techniques have been used, focusing on switching encodings, inserting multiple fields with the same name, and changing data format, but without achieving any results. # A C L t o c h e c k i f t h e \" e m a i l \" p a r a m e t e r m a t c h e s t h e r e g e x f o r a v a l i d e m a i l f o r m a t a c l v a l i d _ e m a i l r e q . b o d y _ p a r a m ( e m a i l ) - m r e g ^ [ a - z A - Z 0 - 9 . - ] + @ [ a - z A - Z 0 - 9 . - ] + $ # D e n y t h e r e q u e s t i f t h e \" e m a i l \" p a r a m e t e r e x i s t s b u t d o e s n o t m a t c h t h e v a l i d e m a i l r e g e x h t t p - r e q u e s t d e n y i f h a s _ e m a i l ! v a l i d _ e m a i l SicuraNext-Challenge-Report_v1 - Mattia Brollo9 / 35 Tried to inject an URL-encoded payload Tried to inject multiple email fields, containing both accepted and malicious data SicuraNext-Challenge-Report_v1 - Mattia Brollo10 / 35 Tried to inject multiple email fields, containing only accepted data SicuraNext-Challenge-Report_v1 - Mattia Brollo11 / 35 Tried to inject malicious data exploiting new lines SicuraNext-Challenge-Report_v1 - Mattia Brollo12 / 35 Tried to pass a JSON data containing a boolean value and exploit type confusions Again, looking at the proxy configuration, we can see that rules have been implemented to discard any request that contains more than one email parameter or url-encoded characters. With this in mind, searching online for other haproxy-specific bypass techniques, I came across a research 1 in which it is explained how haproxy does not support multipart HTTP requests in any way, and how it is possible to trick the reverse proxy into parsing one value, but getting another value to the backend. # A C L t o c h e c k i f t h e \" e m a i l \" p a r a m e t e r e x i s t s i n t h e f o r m b o d y a c l h a s _ e m a i l r e q . b o d y - m s u b e m a i l a c l e v a s i o n _ 1 r e q . b o d y - m r e g ' . * e m a i l [ = ] . * e m a i l [ = ] . * ' a c l e v a s i o n _ 2 r e q . b o d y - m r e g ' . * [ % ] [ a - f A - F 0 - 9 ] { 2 , 2 } . * ' . . . h t t p - r e q u e s t d e n y i f e v a s i o n _ 1 h t t p - r e q u e s t d e n y i f e v a s i o n _ 2 SicuraNext-Challenge-Report_v1 - Mattia Brollo13 / 35 This can be achieved because the r e q . b o d y _ p a r a m ( )   function only parses  x - w w w - f o r m - u r l e n c o d e d  data and does not handle multipart form data. That is why, thanks to this trick, it is possible to bypass the check on the email format (only that single one, because the others are executed at the level of the entire body and not of the individual parameter). Sent an HTTP multipart request containing a payload that tricks haproxy into parsing only foo@bar.com as the email field Proof request to show that other ACLs applied to the full HTTP body still works SicuraNext-Challenge-Report_v1 - Mattia Brollo14 / 35 Once this bypass was discovered, it was possible to exploit it to send malformed e-mails to the backend and exploit an SQL Injection vulnerability (refer to vuln SN-003). Bypassed the ACL and sent an SQL Injection payload to the application behind the proxy Remediation The vulnerability is due to the fact that the product used does not support multipart HTTP requests in any way, so there is no specific remediation. If possible, replace the solution with software that also supports this type of request. Also, do not focus application protection solely on a WAF solution, but also perform the right checks on the backend side on user input (for more details, see the remediation for vulnerability SN-003).   SicuraNext-Challenge-Report_v1 - Mattia Brollo15 / 35 Vuln ID SN-002 Severity High CVSSv3 Score 8.6 - AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L CVSSv4 Score 8.8 - AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:L/VA:L/SC:N/SI:N/SA:N Affected URL http://127.0.0.1/index.php Reference https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_C heat_Sheet.html https://portswigger.net/web-security/sql-injection/blind https://owasp.org/www-community/attacks/Blind_SQL_Injection CVE or CWE CWE-89 [High] SQL Injection in index.php Description The index.php file for the Challenge 01 application is affected by a critical boolean-based blind SQL injection vulnerability in the u s e r n a m e field, because user-supplied input is inserted directly into an SQL query without being properly sanitised first, allowing attackers to inject malicious characters that allow them to \"break out\" from the intended query and append arbitrary SQL statements. Boolean-based blind SQL injection is a type of blind SQL injection in which an attacker manipulates legitimate queries with malicious inputs using Boolean operators and observes the resulting behaviour of the database server and application for retrieving the information contained inside the database. Impact Malicious users or adversaries can exploit this vulnerability to completely bypass the authentication mechanism implemented by the application. Due to the nature of the vulnerability and the application's behaviour, this flaw also allows arbitrary data to be exfiltrated from the underlying database by injecting arbitrary queries with true/false answers and observing the server's responses. Since the server responds differently depending on whether the response is true or false, it is possible to exploit this behaviour to extract information from the database or directly exfiltrate the data it contains. Vulnerability details and root-cause The SQL Injection vulnerability in i n d e x . p h p exists because user-supplied input coming from $ _ P O S T [ ' u s e r n a m e ' ] [1] is inserted within the SQL query $ r e s u l t = m y s q l i _ q u e r y ( . . . ' S E L E C T * F R O M u s e r s W H E R E u s e r n a m e = \" ' . $ u s e r n a m e . ' \" . . . [3] without being properly sanitised [2]. This issue allows attackers to inject malicious characters that allow them to \"break out\" from the intended query and append arbitrary SQL statements. SicuraNext-Challenge-Report_v1 - Mattia Brollo16 / 35 Since the server responds differently depending on whether the response is true or false [4], it is possible to exploit this behavior to extract information from the database or directly exfiltrate the data it contains. The relevant vulnerable code can be found below: The vulnerability can be detected either by using a white-box approach and doing a static analysis of the code, or by using a black-box approach and probing the application with standard SQL injection payloads. - - S t a n d a r d q u e r y : S E L E C T * F R O M u s e r s W H E R E u s e r n a m e = \" f o o \" A N D p a s s w o r d = \" b a r \" - - P a y l o a d s e n d b y t h e a t t a c k e r : n o w - i - b r e a k - o u t \" o t h e r q u e r i e s h e r e - - - - - R e s u l t i n g q u e r y : S E L E C T * F R O M u s e r s W H E R E u s e r n a m e = \" n o w - i - b r e a k - o u t \" o t h e r q u e r i e s h e r e - - - \" A N D p a s s w o r d = \" b a r \" . . . $ a u t h = f a l s e ; i f ( i s s e t ( $ _ P O S T [ ' u s e r n a m e ' ] ) & & i s s e t ( $ _ P O S T [ ' p a s s w o r d ' ] ) ) { $ u s e r n a m e = $ _ P O S T [ ' u s e r n a m e ' ] ; / / [ 1 ] . . .     $ u s e r n a m e = p r e g _ r e p l a c e ( ' / ( s l e e p | b e n c h m a r k | i n f o r m a t i o n ) / i ' , ' ' , $ u s e r n a m e ) ; / / [ 2 ]     . . .     / / [ 3 ]     $ r e s u l t = m y s q l i _ q u e r y ( $ c o n n e c t i o n , ' S E L E C T * F R O M u s e r s W H E R E u s e r n a m e = \" ' . $ u s e r n a m e . ' \" A N D p a s s w o r d = \" ' . $ p a s s w o r d . ' \" ' ) ;     . . .     $ u s e r = m y s q l i _ f e t c h _ a s s o c ( $ r e s u l t ) ; / / f e t c h e d t h e d a t a e x t r a c t e d w i t h t h e q u e r y     i f ( $ u s e r ) {         $ a u t h = t r u e ;     } . . . i f ( $ a u t h = = = f a l s e ) { ? > / / [ 4 ] / / s o m e d a t a p r i n t e d w h e n t h e q u e r y r e s u l t s f a l s e } e l s e { / / s o m e d a t a p r i n t e d w h e n t h e q u e r y r e s u l t s t r u e } SicuraNext-Challenge-Report_v1 - Mattia Brollo17 / 35 One way to detect the vulnerability is through static code analysis, using a tool such as semgrep: semgrep output showing the SQL Injection Once discovered the vulnerability, it can be validated by providing standard SQL injection payloads to the username field. Doing this way it is possible to observe the application behavior based on the appended queries and understand that the authentication mechanism can be bypassed by providing SQL queries that result in t r u e . Sample request: P O S T / i n d e x . p h p H T T P / 1 . 1 H o s t : 1 2 7 . 0 . 0 . 1 C o n t e n t - L e n g t h : 6 7 C o n t e n t - T y p e : a p p l i c a t i o n / x - w w w - f o r m - u r l e n c o d e d u s e r n a m e = \" + O R + 1 % 3 d 1 + - - + - & p a s s w o r d = a s d SicuraNext-Challenge-Report_v1 - Mattia Brollo18 / 35 Server replies with the login form when the query result is false Server replies with a welcome message when the query result is true, confirming the authentication bypass Since the application responds differently depending on the result of the query, it can be used as an ‘or acle’ to exfiltrate specific information or the data itself, through true/false answers. We can use this technique to ask the server whether the first letter of a user's password matches a value specified by us. If the result is true, we can proceed to compare the second letter of the password, otherwise, we can proceed to ask for further values until we find the desired one. SicuraNext-Challenge-Report_v1 - Mattia Brollo19 / 35 Asked the database if the first character of the password field for the user \"admin\" matches the character \"a\" ( false) Asked the database if the first character of the password field for the user \"admin\" matches the character \"f\" ( true) Asked the database if the second character of the password field for the user \"admin\" matches the character \"2\" ( true) This process can be automated to automatically extract any information from the database. SicuraNext-Challenge-Report_v1 - Mattia Brollo20 / 35 PoC Refer to the file located in p o c / e x p l o i t - c h a l l - 1 . p y PoC script to exfiltrate any user hashed password Remediation Validate the input as strictly as possible by escaping, encoding, or removing any unwanted or dangerous characters (such as \" ' / > ( ) ; # * - ). Furthermore, it is suggested to use prepared statements and stored procedures and to implement a whitelist with an allow-list input validation. Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP.   SicuraNext-Challenge-Report_v1 - Mattia Brollo21 / 35 Vuln ID SN-003 Severity High CVSSv3 Score 8.2 - AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:L CVSSv4 Score 8.8 - AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:N/VA:L/SC:N/SI:N/SA:N Reference https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_C heat_Sheet.html https://portswigger.net/web-security/sql-injection/blind https://owasp.org/www-community/attacks/Blind_SQL_Injection CVE or CWE CWE-89 [High] SQL Injection in email.php Description The  email.php  file for the Challenge 02 application is affected by a critical  boolean-based blind SQL injection vulnerability in the  e m a i l  field, because user-supplied input is inserted directly into an SQL query without being properly sanitised first, allowing attackers to inject malicious characters that allow them to \"break out\" from the intended query and append arbitrary SQL statements. Boolean-based blind SQL injection is a type of blind SQL injection in which an attacker manipulates legitimate queries with malicious inputs using Boolean operators and observes the resulting behavior of the database server and application for retrieving the information contained inside the database. Impact Due to the nature of the vulnerability and the application's behavior, malicious users or adversaries can exploit this vulnerability to exfiltrate arbitrary data from the underlying database by injecting ad-hoc queries resulting in true/false answers and observing the server's responses. Since the server responds differently depending on whether the response is true or false, it is possible to exploit this behavior to extract information from the database or directly exfiltrate the data it contains. This vulnerability must be chained with vulnerability SN-001 ACL WAF Bypass in order to be exploited. Vulnerability details and root-cause The SQL Injection vulnerability in  e m a i l . p h p   exists because user-supplied input coming from  $ _ P O S T [ ' e m a i l ' ]   [1] is inserted within the SQL query  $ r e s u l t = m y s q l i _ q u e r y ( $ c o n n e c t i o n , ' S E L E C T * F R O M u s e r s W H E R E e m a i l = \" ' . $ _ P O S T [ ' e m a i l ' ] . ' \" ' ) ;   [2] without being ever sanitised. This issue allows attackers to inject malicious characters that allow them to \"break out\" from the intended query and append arbitrary SQL statements that will be executed by the DBMS. SicuraNext-Challenge-Report_v1 - Mattia Brollo22 / 35 Since the server responds differently depending on whether the response is t r u e or f a l s e [3], it is possible to exploit this behavior to extract information from the database or directly exfiltrate the data it contains. The relevant vulnerable code can be found below: The vulnerability can be detected either by using a white-box approach and doing a static analysis of the code, or by using a black-box approach and probing the application with standard SQL injection payloads conformed to the format required to bypass the WAF, cited at vuln. SN-001. One way to detect the vulnerability is through static code analysis, using a tool such as semgrep: - - S t a n d a r d q u e r y : S E L E C T * F R O M u s e r s W H E R E e m a i l = \" a s d @ a s d . c o m \" - - M a l i c i o u s p a y l o a d i n j e c t e d b y t h e a t t a c k e r : & e m a i l = a s d @ a s d . a s d & \" O R o t h e r q u e r i e s h e r e - - - - - R e s u l t i n g q u e r y : S E L E C T * F R O M u s e r s W H E R E e m a i l = \" & e m a i l = a s d @ a s d . a s d & \" O R o t h e r q u e r i e s h e r e - - - . . . i f ( i s s e t ( $ _ P O S T [ ' e m a i l ' ] ) ) { $ e m a i l = $ _ P O S T [ ' e m a i l ' ] ; / / [ 1 ] . . . $ r e s u l t = m y s q l i _ q u e r y ( $ c o n n e c t i o n , ' S E L E C T * F R O M u s e r s W H E R E e m a i l = \" ' . $ _ P O S T [ ' e m a i l ' ] . ' \" ' ) ; / / [ 2 ] . . . i f ( $ u s e r ) { / / [ 3 ]         e c h o \" E m a i l s e n t t o \" . h t m l s p e c i a l c h a r s ( $ _ P O S T [ \" e m a i l \" ] , E N T _ Q U O T E S , ' U T F - 8 ' ) ;   } e l s e {         e c h o \" E m a i l a d d r e s s n o t f o u n d \" ;   } . . . SicuraNext-Challenge-Report_v1 - Mattia Brollo23 / 35 semgrep output showing the SQL Injection Once discovered the vulnerability, it can be validated providing standard SQL injection payloads conformed to the format required to bypass the WAF, cited at vuln. SN-001. Doing this way it is possible to observe the application behavior based on the appended queries. Server response when the injection results true SicuraNext-Challenge-Report_v1 - Mattia Brollo24 / 35 Server response when the injection results false Since the application responds differently depending on the result of the query, it can be used as an ‘or acle’ to exfiltrate specific information or the data itself, through true/false answers. We can use this technique to ask the server whether the first letter of a user's email matches a value specified by us. If the result is true, we can proceed to compare the second letter of the email, otherwise, we can proceed to ask for further values until we find the desired one. Asked the database if the first character of the email field for the user \"andrea\" matches the character \"a\" ( true) Asked the database if the second character of the email field for the user \"andrea\" matches the character \"a\" ( false) Asked the database if the second character of the email field for the user \"andrea\" matches the character \"n\" ( true) This process can be automated to automatically extract any information from the database. SicuraNext-Challenge-Report_v1 - Mattia Brollo25 / 35 PoC Refer to the file located in p o c / e x p l o i t - c h a l l - 2 . p y PoC script to exfiltrate any user email Remediation Validate the input as strictly as possible by escaping, encoding, or removing any unwanted or dangerous characters (such as \" ' / > ( ) ; # * - ). Furthermore, it is suggested to use prepared statements and stored procedures and to implement a whitelist with an allow-list input validation. Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP. SicuraNext-Challenge-Report_v1 - Mattia Brollo26 / 35 Vuln ID SN-004 Severity High CVSSv3 Score 7.5 - AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N CVSSv4 Score 8.7 - AV:N/AC:L/AT:N/PR:N/UI:N/VC:H/VI:N/VA:N/SC:N/SI:N/SA:N URL Database Reference https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_S heet.html https://owasp.org/Top10/A02_2021-Cryptographic_Failures/ https://pulse.michalspacek.cz/passwords/storages CVE or CWE CWE-261 CWE-759 CWE-916 [High] Use of password hash with insufficient computational effort Description The application stores passwords using a weak hashing function (md5) without salting them with any values. This combination makes passwords much more susceptible to brute-force attacks if the hash is compromised, allowing attackers to obtain the password in plain text very quickly and easily. Impact Many hash algorithms, including cryptographic ones, are designed for speed and low computational overhead. While this efficiency is beneficial in many contexts, it poses a problem for password storage. Fast hash algorithms make brute-force password cracking easier for attackers. If an attacker obtains password hashes (e.g., via SQL injection on a database), they can store these hashes offline and use efficient computing techniques to crack them. Modern attack methods leverage massively parallel computing resources, such as cloud platforms, GPUs, ASICs, or FPGAs, to compute vast numbers of hashes quickly, potentially exhausting all possible passwords. In such cases, the efficiency of the hash algorithm works in the attacker’s favour. Moreover, the application does not salt passwords in any way, making cracking even faster and easier. Vulnerability details and root-cause Index.php hashes the password provided by the user with m d 5 ( ) and uses it, together with the e- mail, to extract the data from the database. SicuraNext-Challenge-Report_v1 - Mattia Brollo27 / 35 This proves that the application saves passwords using the notoriously weak md5 hashing function without applying any salt. Passwords stored in this manner are very quick and easy to crack, especially if they are of low complexity. Once the hashes are obtained through the previously mentioned SQL Injection vulnerabilities, it takes only a few seconds to retrieve their clear-text versions. Identified the type of hash using an external tool assuming the source code wasn't available Cracked the hashed extracted with the SQL Injections and recovered the corresponding plain text password Remediation Replace md5 with a more secure password hashing algorithm such as bcrypt, argon2id, scrypt, or PBKDF2. These algorithms are designed to be computationally intensive, making brute-force attacks significantly more difficult. Furthermore, force users to use passwords with a high complexity rate and, if possible, implement a salt mechanism in order to make cracking them even more difficult. . . . $ p a s s w o r d = m d 5 ( $ _ P O S T [ ' p a s s w o r d ' ] ) ; . . .     $ r e s u l t = m y s q l i _ q u e r y ( $ c o n n e c t i o n , ' S E L E C T * F R O M u s e r s W H E R E u s e r n a m e = \" ' . $ u s e r n a m e . ' \" A N D p a s s w o r d = \" ' . $ p a s s w o r d . ' \" ' ) ; SicuraNext-Challenge-Report_v1 - Mattia Brollo28 / 35 Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP. SicuraNext-Challenge-Report_v1 - Mattia Brollo29 / 35 Vuln ID SN-005 Severity Medium CVSSv3 Score 5.6 - AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L CVSSv4 Score 6.3 - AV:N/AC:H/AT:N/PR:N/UI:N/VC:L/VI:L/VA:L/SC:N/SI:N/SA:N URL http://127.0.0.1/index.php http://127.0.0.1:81/email.php Reference https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_wi th_Known_Vulnerabilities https://www.cvedetails.com/version/1334797/PHP-PHP-7.2.34.html https://www.cvedetails.com/version/613554/Apache-Http-Server-2.4.38.html CVE or CWE CWE-1104 [Medium] Software with known vulnerabilities Description Known vulnerabilities are flaws discovered in the past that affect one or more pieces of software, which have been given a unique vulnerability identifier and published within the NVD database, more general security advisories or specific issue trackers. Analysing the application, it was discovered that both targets are based on software with known vulnerabilities. Impact The impact of the vulnerability cannot be determined with certainty as it depends on the known vulnerability itself being exploited. The vulnerability might be affecting a feature or an operating system that is not used in this environment. Due to time constraints, few manual validation was carried out on these vulnerabilities, and no true positives were detected, but some other false positives may be present due to the nature of the vulnerability itself. Vulnerability details and root-cause The S e r v e r and X - P o w e r e d - B y headers displayed by the web server in its responses reveal the exact versions of PHP and Apache. Various vulnerability databases were searched for issues affecting these exact versions, and it was noted that known vulnerabilities were associated with both components. SicuraNext-Challenge-Report_v1 - Mattia Brollo30 / 35 PHP's known vulnerabilities from https://www.cvedetails.com/version/1334797/PHP-PHP-7.2.34.html Apache's known vulnerabilities from https://www.cvedetails.com/version/613554/Apache-Http-Server-2. 4.38.html Remediation Upgrade to p h p @ 8 . 3 . 8 or higher. Upgrade to a p a c h e @ 2 . 4 . 6 2 or higher.   SicuraNext-Challenge-Report_v1 - Mattia Brollo31 / 35 Vuln ID SN-006 Severity Informational CVSSv4 Score 0.0 - AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N CVSSv4 Score 0.0 - AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:N/SC:N/SI:N/SA:N URL http://127.0.0.1/index.php http://127.0.0.1:81/email.php Reference https://portswigger.net/web-security/information-disclosure https://www.tenable.com/plugins/was/98618 https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Shee t.html CVE or CWE CWE-200 [Informational] Information disclosure in server headers Description Server headers disclose information about the software used by the target and the relative versions. Impact The HTTP headers provided by the remote web server reveal details, such as the server version and underlying technologies, which could assist an attacker in exploiting or identifying vulnerabilities or misconfigurations. Vulnerability details and root-cause The S e r v e r and X - P o w e r e d - B y headers displayed by the web server in its responses reveal the exact versions of PHP and Apache, as well as the operating system of the website. Server and X-Powered-By headers disclosed in Challenge 01 server responses SicuraNext-Challenge-Report_v1 - Mattia Brollo32 / 35 Server and X-Powered-By headers disclosed in Challenge 02 server responses Remediation Configure the web server, the CDN, or the reverse proxy to to prevent the disclosure of detailed information about the underlying technologies of the web server. SicuraNext-Challenge-Report_v1 - Mattia Brollo33 / 35 Vuln ID Vulnerability Name Technical Risk Remediation SN- 001 ACL WAF Bypass Critical The vulnerability is due to the fact that the product used does not support multipart HTTP requests in any way, so there is no specific remediation. If possible, replace the solution with software that also supports this type of request. Also, do not focus application protection solely on a WAF solution, but also perform the right checks on the backend side on user input (for more details, see the remediation for vulnerability SN-003). SN- 002 SQL Injection in index.php High Validate the input as strictly as possible by escaping, encoding, or removing any unwanted or dangerous characters (such as  \" ' / > ( ) ; # * - ). Furthermore, it is suggested to use prepared statements and stored procedures and to implement a whitelist with an allow-list input validation. Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP. SN- 003 SQL Injection in email.php High Validate the input as strictly as possible by escaping, encoding, or removing any unwanted or dangerous characters (such as  \" ' / > ( ) ; # * - ). Furthermore, it is suggested to use prepared statements and stored procedures and to implement a whitelist with an allow-list input validation. Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP. Remediation Summary SicuraNext-Challenge-Report_v1 - Mattia Brollo34 / 35 Vuln ID Vulnerability Name Technical Risk Remediation SN- 004 Use of password hash with insufficient computational effort High Replace md5 with a more secure password hashing algorithm such as bcrypt, argon2id, scrypt, or PBKDF2. These algorithms are designed to be computationally intensive, making brute-force attacks significantly more difficult. Furthermore force users to use passwords with a high complexity rate and, if possible, implement a salt mechanism in order to make cracking them even more difficult. Please refer to the \"Reference\" section for more details about the remediation and the best practices suggested by OWASP. SN- 005 Software with known vulnerabilities Medium Upgrade to  p h p @ 8 . 3 . 8  or higher. Upgrade to  a p a c h e @ 2 . 4 . 6 2  or higher. SN- 006 Information disclosure in server headers Informational Configure the web server, the CDN, or the reverse proxy to to prevent the disclosure of detailed information about the underlying technologies of the web server. 1 . Breaking Down Multipart Parsers: File upload validation bypass, Andrea Menin; blog.sicuranext.com ↩ SicuraNext-Challenge-Report_v1 - Mattia Brollo35 / 35","libVersion":"0.5.0","langs":""}